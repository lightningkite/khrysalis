buildscript {
    ext.kotlinVersion = '1.3.71'
    repositories {

        maven { url "http://dl.bintray.com/kotlin/kotlin-eap" }
        maven { url "http://dl.bintray.com/kotlin/kotlin-dev" }
        jcenter()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}"
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.+'
    }
}

apply plugin: "java"
apply plugin: 'java-gradle-plugin'
apply plugin: "kotlin"
apply plugin: "kotlin-kapt"
apply plugin: 'antlr'
apply plugin: "idea"
apply plugin: 'application'
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'

bintray {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_KEY')
    publish = true
    pkg {
        repo = project.group.toString()
        name = project.name
        userOrg = "lightningkite"
        licenses = ["MIT"]
        def github = "https://github.com/lightningkite/mirror-kotlin"
        vcsUrl = github
        websiteUrl = github
        issueTrackerUrl = github + "/issues"
        version {
            name = project.version
            released = new Date()
        }
    }
}

gradlePlugin {
    plugins {
        mirrorPlugin {
            id = "com.lightningkite.khrysalis"
            implementationClass = "com.lightningkite.khrysalis.gradle.KhrysalisPlugin"
        }
    }
}

mainClassName = 'com.lightningkite.khrysalis.MainKt'

repositories {
    mavenLocal()
    jcenter()
    mavenCentral()
    google()

}

group = "com.lightningkite.khrysalis"
version = '0.1.0'


dependencies {
    api gradleApi()
    api "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}"
    api group: 'org.antlr', name: 'antlr4-runtime', version: '4.5'
//    api "org.jetbrains.kotlin:kotlin-gradle-plugin:${rootProject.kotlinVersion}"
    antlr "org.antlr:antlr4:4.5.3" // use ANTLR version 4
    // https://mvnrepository.com/artifact/com.google.protobuf/protobuf-java
    api "org.apache.commons:commons-lang3:3.10"
    api "me.eugeniomarletti.kotlin.metadata:kotlin-metadata:1.4.0"
    api "com.fasterxml.jackson.core:jackson-databind:2.9.+"
    api "com.fasterxml.jackson.module:jackson-module-kotlin:2.9.+"
    api "net.jodah:xsylum:0.1.0"
    testImplementation("junit:junit:4.12")
    api(project(":kotlin-compiler-plugin-typescript"))

    def aetherVersion = "1.0.0.v20140518"
    def mavenVersion = "3.1.0"
    testApi "org.eclipse.aether:aether-api:$aetherVersion"
    testApi "org.eclipse.aether:aether-impl:$aetherVersion"
    testApi "org.eclipse.aether:aether-util:$aetherVersion"
    testApi "org.eclipse.aether:aether-connector-basic:$aetherVersion"
    testApi "org.eclipse.aether:aether-transport-file:$aetherVersion"
    testApi "org.eclipse.aether:aether-transport-http:$aetherVersion"
    testApi "org.apache.maven:maven-aether-provider:$mavenVersion"

    compileOnly "com.google.auto.service:auto-service:1.0-rc4"
    kapt "com.google.auto.service:auto-service:1.0-rc4"

    api group: 'org.jetbrains.kotlin', name: 'kotlin-gradle-plugin', version: kotlinVersion
    api group: 'org.jetbrains.kotlin', name: 'kotlin-gradle-plugin-api', version: kotlinVersion
}

generateGrammarSource {
    outputDirectory = new File("${project.buildDir}/generated-src/antlr/main/org/jetbrains/kotlin".toString())
}

compileKotlin.dependsOn generateGrammarSource

task insertCompilerJar(type: Copy){
    dependsOn(":kotlin-compiler-plugin-typescript:shadowJar")
    from('../kotlin-compiler-plugin-typescript/build/libs'){
        include '*-all.jar'
    }
    into 'src/main/resources/compiler-plugins'
    rename '.*', 'typescript.jar'
}
tasks.jar.dependsOn("insertCompilerJar")

task sourceJar(type: Jar) {
    from sourceSets.main.allJava
    archiveClassifier = 'sources'
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId = project.group
            artifactId = project.name
            version = project.version

            from components.java
        }
    }
}

compileJava {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

compileKotlin {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}
