package com.lightningkite.khrysalis.web.layout

import com.fasterxml.jackson.module.kotlin.jacksonObjectMapper
import com.lightningkite.khrysalis.android.layout.readLayoutInfo
import com.lightningkite.khrysalis.generic.SmartTabWriter
import com.lightningkite.khrysalis.ios.layout.*
import com.lightningkite.khrysalis.ios.values.readXMLStrings
import com.lightningkite.khrysalis.log
import com.lightningkite.khrysalis.typescript.safeJsIdentifier
import com.lightningkite.khrysalis.utils.XmlNode
import com.lightningkite.khrysalis.utils.kabobCase
import com.lightningkite.khrysalis.utils.writeTextIfDifferent
import com.lightningkite.khrysalis.web.layout.drawables.convertDrawablesToWeb
import com.lightningkite.khrysalis.web.layout.values.getXmlStrings
import com.lightningkite.khrysalis.web.layout.values.translateXmlColorSetToCss
import com.lightningkite.khrysalis.web.layout.values.translateXmlColorsToCss
import com.lightningkite.khrysalis.web.layout.values.translateXmlDimensionsToCss
import java.io.File
import java.lang.StringBuilder

fun convertLayoutsToHtml(
    androidMainFolder: File,
    webFolder: File,
    packageName: String,
    converter: HtmlTranslator = HtmlTranslator()
) {
    converter.styles = androidMainFolder.resolve("res/values/styles.xml").readXMLStyles()
    converter.strings = getXmlStrings(androidMainFolder.resolve("res/values/strings.xml"))
    converter.outFolder = webFolder

    log("Writing CSS...")
    val scssFile = webFolder.resolve("src/main.css").also { it.parentFile.mkdirs() }
    val resources = WebResources()
    scssFile.printWriter().use { out ->
        out.appendln("/*Generated by Khrysalis*/")
        androidMainFolder.resolve("res/values/colors.xml").takeIf { it.exists() }?.let {
            translateXmlColorsToCss(it, out, resources)
        }
        androidMainFolder.resolve("res/color").walkTopDown().filter { it.extension == "xml" }.forEach {
            translateXmlColorSetToCss(it, out, resources)
        }
        androidMainFolder.resolve("res/values/dimens.xml").takeIf { it.exists() }?.let {
            translateXmlDimensionsToCss(it, out)
        }
        convertDrawablesToWeb(androidMainFolder.resolve("res"), webFolder, out, resources)
    }

    log("Clearing layout folder...")
    val styles = androidMainFolder.resolve("res/values/styles.xml").takeIf { it.exists() }?.readXMLStyles() ?: mapOf()
    webFolder.resolve("src").listFiles()!!.filter { it.name.contains("layout") }.forEach {
        it.deleteRecursively()
        it.mkdirs()
    }

    log("Emitting layout manifests...")
    val layoutInfo = readLayoutInfo(androidMainFolder.resolve("../../build"))
    val manifestFile = webFolder.resolve("src/layout/manifest.json")
        .also { it.parentFile.mkdirs() }
    manifestFile.writeText(
        jacksonObjectMapper().writeValueAsString(
            layoutInfo.values.mapNotNull {
                it.fileName to (it.variants.takeUnless { it.isEmpty() } ?: return@mapNotNull null)
            }.associate { it }
        )
    )

    //Load equivalents
    log("Loading equivalents...")
    webFolder.walkTopDown()
        .filter {
            it.name.endsWith(".ts.yaml") || it.name.endsWith(".ts.yml")
        }
        .forEach { actualFile ->
            try {
                converter.replacements += actualFile
            } catch (t: Throwable) {
                println("Failed to parse equivalents for $actualFile:")
            }
        }

    log("Finding layout files...")
    androidMainFolder.resolve("res").listFiles()!!
        .asSequence()
        .filter { it.name.contains("layout") }
        .filter { !it.name.startsWith("android_") }
        .forEach { folder ->
            folder.walkTopDown()
                .filter { it.extension == "xml" }
                .forEach { item ->
                    log(item.toString())

                    val appendable = StringBuilder()
                    converter.styles = styles
                    val root = XmlNode.read(item, styles, androidMainFolder.resolve("res/layout"))
                    log("Converting $item to HTML...")
                    converter.emitFile(root, appendable)
                    val output = appendable.toString()

                    webFolder.resolve("src").resolve(folder.name).resolve(item.nameWithoutExtension + ".html").also {
                        it.parentFile.mkdirs()
                    }.writeTextIfDifferent(output)
                }
        }

    log("Writing resources file...")
    val stringsFile = webFolder.resolve("src/R.ts")
    val defaultStrings = androidMainFolder.resolve("res/values/strings.xml").readXMLStrings()
    val whitespace = Regex("\\s+")
    stringsFile.bufferedWriter().use {
        with(SmartTabWriter(it)) {
            appendln("import { DrawableResource } from 'khrysalis/dist/views/DrawableResource'")
            appendln("//! Declares $packageName.R")
            appendln("export namespace R {")

            appendln("export namespace color {")
            resources.colors.entries.sortedBy { it.key }.forEach {
                appendln("export const ${it.key}: string = \"${it.value.cssName}\";")
            }
            appendln("}")

            appendln("export namespace drawable {")
            resources.drawables.entries.sortedBy { it.key }.forEach {
                val cssName = it.value.cssName
                val imagePath = it.value.imagePath
                if(imagePath != null){
                    appendln("export const ${it.key.safeJsIdentifier()}: DrawableResource = new DrawableResource(\"$cssName\", \"$imagePath\");")
                } else {
                    appendln("export const ${it.key.safeJsIdentifier()}: DrawableResource = new DrawableResource(\"$cssName\");")
                }
            }
            appendln("}")

            appendln("export interface Strings {")
            defaultStrings.keys.forEach {
                appendln("${it.safeJsIdentifier()}: string;")
            }
            appendln("}")

            appendln("export namespace DefaultStrings {")
            defaultStrings.entries.forEach {
                appendln(
                    "export const ${it.key.safeJsIdentifier()}: string = \"${it.value.replace(
                        whitespace,
                        " "
                    )}\";"
                )
            }
            appendln("}")

            appendln("export let _string = DefaultStrings;")

            appendln("}")
        }
    }
}
