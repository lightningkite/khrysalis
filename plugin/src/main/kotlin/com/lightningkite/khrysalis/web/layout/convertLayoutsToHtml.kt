package com.lightningkite.khrysalis.web.layout

import com.fasterxml.jackson.module.kotlin.jacksonObjectMapper
import com.lightningkite.khrysalis.android.layout.readLayoutInfo
import com.lightningkite.khrysalis.ios.layout.*
import com.lightningkite.khrysalis.ios.values.readXMLStrings
import com.lightningkite.khrysalis.log
import com.lightningkite.khrysalis.utils.XmlNode
import com.lightningkite.khrysalis.utils.writeTextIfDifferent
import com.lightningkite.khrysalis.web.layout.drawables.convertDrawablesToWeb
import com.lightningkite.khrysalis.web.layout.values.getXmlStrings
import com.lightningkite.khrysalis.web.layout.values.translateXmlColorSetToCss
import com.lightningkite.khrysalis.web.layout.values.translateXmlColorsToCss
import com.lightningkite.khrysalis.web.layout.values.translateXmlDimensionsToCss
import java.io.File
import java.lang.StringBuilder

fun convertLayoutsToHtml(
    androidMainFolder: File,
    webFolder: File,
    converter: HtmlTranslator = HtmlTranslator()
) {
    converter.styles = androidMainFolder.resolve("res/values/styles.xml").readXMLStyles()
    converter.strings = getXmlStrings(androidMainFolder.resolve("res/values/strings.xml"))
    converter.outFolder = webFolder

    val scssFile = webFolder.resolve("src/main.css").also { it.parentFile.mkdirs() }
    scssFile.printWriter().use { out ->
        out.appendln("/*Generated by Khrysalis*/")
        out.appendln(
            """
html,
body {
    height: 100%;
    width: 100%;
    margin: 0;
}
body > * {
    height: 100%;
    width: 100%;
}
* {
    overflow-x: hidden;
    overflow-y: hidden;
    box-sizing: border-box;
    flex-shrink: 0;
    font-family: "Roboto", "Open Sans", sans-serif;
    max-width: 100%;
    max-height: 100%;
}
.khrysalis-scroll-view > * {
    max-height: none;
}
button {
    border: none;
    background: none;
    text-transform: uppercase;
    transition-duration: 0.2s;
}
input {
    background: none;
    border: none;
    border-bottom: 1px solid var(--color-foreground-fade, gray);
}
input:focus {
    border-bottom: 2px solid var(--color-foreground, blue);
}
button:hover {
    box-shadow: 0 2px 2px 0 rgba(0,0,0,0.24), 0 4px 8px 0 rgba(0,0,0,0.19);
}

.khrysalis-switch {
    display: flex;
    flex-direction: row;
}
.khrysalis-switch > div {
    flex-grow: 1;
}
.khrysalis-switch > input {
    display: none;
}
.khrysalis-switch-back {
    position: relative;
    width: 40px;
    height: 24px;
    border-radius: 12px;
    background-color: var(--color-background-fade, gray);
}
.khrysalis-switch-front {
    position: absolute;
    width: 20px;
    height: 20px;
    right: 18px;
    top: 50%;
    transform: translateY(-50%);
    border-radius: 50%;
    background-color: var(--color-color-accent, blue);
    -webkit-transition: 0.2s;
    transition: 0.2s;
}
:checked ~ .khrysalis-switch-back > .khrysalis-switch-front {
    right: 2px;
}
.khrysalis-swap {
    position: relative;
}
.khrysalis-flip {
    position: relative;
}
.khrysalis-pager {
    position: relative;
}
.khrysalis-tabs {
    display: flex;
    flex-direction: row;
}
.khrysalis-compound-on {
    background-color: var(--color-color-primary);
    color: white;
}
.khrysalis-compound-off {
    background-color: transparent;
    color: var(--color-foreground);
}
.khrysalis-page-indicator {
}

.resp-sharing-dialog-back {
  position: fixed;
  display: flex;
  flex-direction: column;
  justify-items: center;
  justify-content: center;
  align-items: center;
  width: 100%;
  height: 100%;
  left: 0;
  top: 0;
  background-color: rgba(0, 0, 0, 0.4);
  z-index: 9999;
}

.resp-sharing-dialog-front {
  display: flex;
  flex-direction: column;
  justify-items: center;
  align-items: center;
  background-color: #F0F0F0;
  padding: 0.5em;
  max-height: 90%;
  max-width: 90%;
  box-sizing: border-box;
  overflow-y: scroll;

}

.resp-sharing-button__link,
.resp-sharing-button__icon {
  display: inline-block
}

.resp-sharing-button__link {
  text-decoration: none;
  color: #fff;
  margin: 0.5em
}

.resp-sharing-button {
  border-radius: 5px;
  transition: 25ms ease-out;
  padding: 0.5em 0.75em;
  font-family: Helvetica Neue, Helvetica, Arial, sans-serif
}

.resp-sharing-button__icon svg {
  width: 1em;
  height: 1em;
  margin-right: 0.4em;
  vertical-align: top
}

.resp-sharing-button--small svg {
  margin: 0;
  vertical-align: middle
}

/* Non solid icons get a stroke */
.resp-sharing-button__icon {
  stroke: #fff;
  fill: none;
  vertical-align: middle
}

/* Solid icons get a fill */
.resp-sharing-button__icon--solid,
.resp-sharing-button__icon--solidcircle {
  fill: #fff;
  stroke: none
}

.resp-sharing-button--twitter {
  background-color: #55acee
}

.resp-sharing-button--twitter:hover {
  background-color: #2795e9
}

.resp-sharing-button--pinterest {
  background-color: #bd081c
}

.resp-sharing-button--pinterest:hover {
  background-color: #8c0615
}

.resp-sharing-button--facebook {
  background-color: #3b5998
}

.resp-sharing-button--facebook:hover {
  background-color: #2d4373
}

.resp-sharing-button--tumblr {
  background-color: #35465C
}

.resp-sharing-button--tumblr:hover {
  background-color: #222d3c
}

.resp-sharing-button--reddit {
  background-color: #5f99cf
}

.resp-sharing-button--reddit:hover {
  background-color: #3a80c1
}

.resp-sharing-button--google {
  background-color: #dd4b39
}

.resp-sharing-button--google:hover {
  background-color: #c23321
}

.resp-sharing-button--linkedin {
  background-color: #0077b5
}

.resp-sharing-button--linkedin:hover {
  background-color: #046293
}

.resp-sharing-button--email {
  background-color: #777
}

.resp-sharing-button--email:hover {
  background-color: #5e5e5e
}

.resp-sharing-button--xing {
  background-color: #1a7576
}

.resp-sharing-button--xing:hover {
  background-color: #114c4c
}

.resp-sharing-button--whatsapp {
  background-color: #25D366
}

.resp-sharing-button--whatsapp:hover {
  background-color: #1da851
}

.resp-sharing-button--hackernews {
  background-color: #FF6600
}

.resp-sharing-button--hackernews:hover,
.resp-sharing-button--hackernews:focus {
  background-color: #FB6200
}

.resp-sharing-button--vk {
  background-color: #507299
}

.resp-sharing-button--vk:hover {
  background-color: #43648c
}

.resp-sharing-button--facebook {
  background-color: #3b5998;
  border-color: #3b5998;
}

.resp-sharing-button--facebook:hover,
.resp-sharing-button--facebook:active {
  background-color: #2d4373;
  border-color: #2d4373;
}

.resp-sharing-button--twitter {
  background-color: #55acee;
  border-color: #55acee;
}

.resp-sharing-button--twitter:hover,
.resp-sharing-button--twitter:active {
  background-color: #2795e9;
  border-color: #2795e9;
}

.resp-sharing-button--tumblr {
  background-color: #35465C;
  border-color: #35465C;
}

.resp-sharing-button--tumblr:hover,
.resp-sharing-button--tumblr:active {
  background-color: #222d3c;
  border-color: #222d3c;
}

.resp-sharing-button--email {
  background-color: #777777;
  border-color: #777777;
}

.resp-sharing-button--email:hover,
.resp-sharing-button--email:active {
  background-color: #5e5e5e;
  border-color: #5e5e5e;
}

.resp-sharing-button--pinterest {
  background-color: #bd081c;
  border-color: #bd081c;
}

.resp-sharing-button--pinterest:hover,
.resp-sharing-button--pinterest:active {
  background-color: #8c0615;
  border-color: #8c0615;
}

.resp-sharing-button--linkedin {
  background-color: #0077b5;
  border-color: #0077b5;
}

.resp-sharing-button--linkedin:hover,
.resp-sharing-button--linkedin:active {
  background-color: #046293;
  border-color: #046293;
}

.resp-sharing-button--reddit {
  background-color: #5f99cf;
  border-color: #5f99cf;
}

.resp-sharing-button--reddit:hover,
.resp-sharing-button--reddit:active {
  background-color: #3a80c1;
  border-color: #3a80c1;
}

.resp-sharing-button--xing {
  background-color: #1a7576;
  border-color: #1a7576;
}

.resp-sharing-button--xing:hover .resp-sharing-button--xing:active {
  background-color: #114C4C;
  border-color: #114C4C;
}

.resp-sharing-button--whatsapp {
  background-color: #25D366;
  border-color: #25D366;
}

.resp-sharing-button--whatsapp:hover,
.resp-sharing-button--whatsapp:active {
  background-color: #1DA851;
  border-color: #1DA851;
}

.resp-sharing-button--hackernews {
  background-color: #FF6600;
  border-color: #FF6600;
}

.resp-sharing-button--hackernews:hover .resp-sharing-button--hackernews:active {
  background-color: #FB6200;
  border-color: #FB6200;
}

.resp-sharing-button--vk {
  background-color: #507299;
  border-color: #507299;
}

.resp-sharing-button--vk:hover .resp-sharing-button--vk:active {
  background-color: #43648c;
  border-color: #43648c;
}

.resp-sharing-button--telegram {
  background-color: #54A9EB;
}

.resp-sharing-button--telegram:hover {
  background-color: #4B97D1;
}

      """
        )
        androidMainFolder.resolve("res/values/colors.xml").takeIf { it.exists() }?.let {
            translateXmlColorsToCss(it, out)
        }
        androidMainFolder.resolve("res/color").walkTopDown().filter { it.extension == "xml" }.forEach {
            translateXmlColorSetToCss(it, out)
        }
        androidMainFolder.resolve("res/values/dimens.xml").takeIf { it.exists() }?.let {
            translateXmlDimensionsToCss(it, out)
        }
        convertDrawablesToWeb(androidMainFolder.resolve("res"), webFolder, out)
    }

    val styles = androidMainFolder.resolve("res/values/styles.xml").takeIf { it.exists() }?.readXMLStyles() ?: mapOf()
    webFolder.resolve("src").listFiles()!!.filter { it.name.contains("layout") }.forEach {
        it.deleteRecursively()
        it.mkdirs()
    }

    val layoutInfo = readLayoutInfo(androidMainFolder.resolve("../../build"))
    val manifestFile = webFolder.resolve("src/layout/manifest.json")
        .also { it.parentFile.mkdirs() }
    manifestFile.writeText(
        jacksonObjectMapper().writeValueAsString(
            layoutInfo.values.mapNotNull {
                it.fileName to (it.variants.takeUnless { it.isEmpty() } ?: return@mapNotNull null)
            }.associate { it }
        ).also { println(it) }
    )
    androidMainFolder.resolve("res").listFiles()!!
        .asSequence()
        .filter { it.name.contains("layout") }
        .forEach { folder ->

            folder.walkTopDown()
                .filter { it.extension == "xml" }
                .forEach { item ->
                    log(item.toString())

                    val appendable = StringBuilder()
                    converter.styles = styles
                    val root = XmlNode.read(item, styles, androidMainFolder.resolve("res/layout"))
                    converter.emitFile(root, appendable)
                    val output = appendable.toString()

                    webFolder.resolve("src").resolve(folder.name).resolve(item.nameWithoutExtension + ".html").also {
                        it.parentFile.mkdirs()
                    }.writeTextIfDifferent(output)
                }
        }

}
