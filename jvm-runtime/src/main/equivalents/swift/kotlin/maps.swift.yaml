---
# Maps
- id: kotlin.collections.Map
  type: type
  typeArgumentNames: [Key, Value]
  template: Dictionary<~T0~, ~T1~>

- id: kotlin.collections.Map.isEmpty
  type: call
  template: "~this~.isEmpty"

- id: kotlin.collections.Map.isNotEmpty
  type: call
  template: "(!~this~.isEmpty)"

- id: kotlin.collections.Map.Entry
  type: type
  template: '(key: ~T0~, value: ~T1~)'

- id: kotlin.collections.HashMap
  type: type
  requiresMutable: true
  template: Dictionary<~T0~, ~T1~>

- id: java.util.HashMap
  type: type
  requiresMutable: true
  template: Dictionary<~T0~, ~T1~>

- id: kotlin.collections.MutableMap
  type: type
  requiresMutable: true
  template: Dictionary<~T0~, ~T1~>

## Creation

- id: kotlin.collections.emptyMap
  type: call
  typeArgumentRequirements:
    0: primitive
  hasExplicitTypeArguments: true
  template: "(dictionaryOf() as Dictionary<~T0~, ~T1~>)"
- id: kotlin.collections.emptyMap
  type: call
  template: "dictionaryOf()"

- id: kotlin.collections.mapOf
  type: call
  typeArgumentRequirements:
    0: primitive
  hasExplicitTypeArguments: true
  template: "(dictionaryOf(~*~) as Dictionary<~T0~, ~T1~>)"
- id: kotlin.collections.mapOf
  type: call
  template: "dictionaryOf(~*~)"

- id: kotlin.collections.mutableMapOf
  type: call
  hasExplicitTypeArguments: true
  template: "(dictionaryOf(~*~) as Dictionary<~T0~, ~T1~>)"
- id: kotlin.collections.mutableMapOf
  type: call
  template: "dictionaryOf(~*~)"

- id: kotlin.collections.toMap
  type: call
  template: "dictionaryFrom(~this~)"

- id: kotlin.collections.hashMapOf
  type: call
  hasExplicitTypeArguments: true
  template: "(dictionaryOf(~*~) as Dictionary<~T0~, ~T1~>)"
- id: kotlin.collections.hashMapOf
  type: call
  template: "dictionaryOf(~*~)"


- id: kotlin.collections.HashMap
  type: call
  hasExplicitTypeArguments: true
  template: "Dictionary<~T0~, ~T1~>()"

- id: kotlin.collections.HashMap
  type: call
  template: "Dictionary()"


- id: java.util.HashMap
  type: call
  hasExplicitTypeArguments: true
  template: "Dictionary<~T0~, ~T1~>()"

- id: java.util.HashMap
  type: call
  template: "Dictionary()"

## Usage
- id: kotlin.collections.Map.size
  type: get
  template: ~this~.count
- id: kotlin.collections.Map.get
  type: call
  template: ~this~[~0~]
- id: kotlin.collections.Map.containsKey
  type: call
  template: '(~this~.index(forKey: ~0~) != nil)'
- id: kotlin.collections.MutableMap.put
  type: call
  template: ~this~[~0~] = ~1~
- id: kotlin.collections.MutableMap.put
  type: call
  usedAsExpression: true
  template: '~this~.updateValue(~1~, forKey: ~0~)'
- id: kotlin.collections.set
  type: call
  receiver: kotlin.collections.MutableMap
  template: ~this~[~0~] = ~1~
- id: kotlin.collections.MutableMap.remove
  type: call
  template: '~this~.removeValue(forKey: ~0~)'

- id: kotlin.collections.component1
  type: call
  template: ~this~.key

- id: kotlin.collections.component2
  type: call
  template: ~this~.value

- id: kotlin.collections.mapValues
  type: call
  template: ~this~.mapValuesFromPairs(~*~)

- id: kotlin.collections.filterKeys
  type: call
  template:
    pattern: ~this~.filter { (key, value) in ~L0~ }
    lambdaTransforms:
      0: ["key"]

#- id: kotlin.collections.filterKeys
#  type: call
#  template: ~this~.filter { (key, value) in ~0~(key) }

- id: kotlin.collections.Map.entries
  type: get
  template: ~this~

- id: kotlin.collections.plus
  receiver: Map
  arguments: [Pair]
  type: call
  template: (~this~ + dictionaryOf(~0~))

- id: kotlin.collections.toList
  type: call
  receiver: kotlin.collections.Map
  template:
    pattern: "~this~.map { Pair($0.key, $0.value) }"
    imports: [KhrysalisRuntime]

- id: kotlin.collections.toPair
  type: call
  template:
    pattern: 'Pair(from: ~this~)'
    imports: [KhrysalisRuntime]
