// Generated by Khrysalis TypeScript converter
// File: MapView.bind.actual.kt
// Package: com.lightningkite.khrysalis.maps
import {MutableObservableProperty} from 'khrysalis/dist/observables/MutableObservableProperty.shared'
import {GeoCoordinate} from 'khrysalis/dist/location/GeoCoordinate.shared'
import {ObservableProperty} from 'khrysalis/dist/observables/ObservableProperty.shared'
import {} from "googlemaps"
import {
    getAndroidViewViewRemoved,
    ioReactivexDisposablesDisposableUntil
} from "khrysalis/dist/rx/DisposeCondition.actual";
import {comLightningkiteKhrysalisObservablesObservablePropertySubscribeBy} from "khrysalis/dist/observables/ObservableProperty.ext.shared";
import {customViewInvalidate} from "khrysalis/dist/views/CustomView.actual";
import {
    comGoogleAndroidGmsMapsModelLatLngToKhrysalis,
    comLightningkiteKhrysalisLocationGeoCoordinateToMaps
} from "./LatLng.ext";

const mapSymbol = Symbol("mapSymbol");
declare global {
    interface HTMLDivElement {
        [mapSymbol]: google.maps.Map;
    }
}

//! Declares com.lightningkite.khrysalis.maps.bind>com.google.android.gms.maps.MapView
export function comGoogleAndroidGmsMapsMapViewBind(this_: HTMLDivElement, dependency: Window, style: string | null): void {
    const map = new google.maps.Map(this_, {
        center: { lat: 0, lng: 0 },
        zoom: 2,
        styles: [] //?
    });
    this_[mapSymbol] = map;
}

//! Declares com.lightningkite.khrysalis.maps.bindView>com.google.android.gms.maps.MapView
export function comGoogleAndroidGmsMapsMapViewBindView(this_: HTMLDivElement, dependency: Window, position: ObservableProperty<(GeoCoordinate | null)>, zoomLevel: number = 15, animate: boolean = true, style: string | null = null): void {
    comGoogleAndroidGmsMapsMapViewBind(this_, dependency, style);
    const map = this_[mapSymbol];
    let first = true;
    let marker: google.maps.Marker | null = null;
    ioReactivexDisposablesDisposableUntil(comLightningkiteKhrysalisObservablesObservablePropertySubscribeBy(position, undefined, undefined, (g: GeoCoordinate | null)=>{
        if(g){
            const p: google.maps.LatLng = comLightningkiteKhrysalisLocationGeoCoordinateToMaps(g);
            if(animate && !first){
                map.panTo(p);
                map.setZoom(zoomLevel);
            } else {
                map.setCenter(p);
                map.setZoom(zoomLevel);
            }
            first = false;
            if(!marker){
                marker = new google.maps.Marker({
                    position: p,
                    map: map
                });
            } else {
                marker.setPosition(p);
            }
        } else {
            if(marker) {
                marker.setMap(null);
                marker = null;
            }
        }
    }), getAndroidViewViewRemoved(this_));
}


//! Declares com.lightningkite.khrysalis.maps.bindSelect>com.google.android.gms.maps.MapView
export function comGoogleAndroidGmsMapsMapViewBindSelect(this_: HTMLDivElement, dependency: Window, position: MutableObservableProperty<(GeoCoordinate | null)>, zoomLevel: number = 15, animate: boolean = true, style: string | null = null): void {
    comGoogleAndroidGmsMapsMapViewBind(this_, dependency, style);
    const map = this_[mapSymbol];
    let first = true;
    let marker: google.maps.Marker | null = null;
    ioReactivexDisposablesDisposableUntil(comLightningkiteKhrysalisObservablesObservablePropertySubscribeBy(position, undefined, undefined, (g: GeoCoordinate | null)=>{
        if(g){
            const p: google.maps.LatLng = comLightningkiteKhrysalisLocationGeoCoordinateToMaps(g);
            if(animate && !first){
                map.panTo(p);
                map.setZoom(zoomLevel);
            } else {
                map.setCenter(p);
                map.setZoom(zoomLevel);
            }
            first = false;
            if(!marker){
                marker = new google.maps.Marker({
                    position: p,
                    map: map,
                    draggable: true
                });
                marker.addListener("dragend", ()=>{
                    const pos = marker?.getPosition()
                    if(pos){
                        position.value = comGoogleAndroidGmsMapsModelLatLngToKhrysalis(pos);
                    }
                })
            } else {
                marker.setPosition(p);
            }
        } else {
            if(marker) {
                marker.setMap(null);
                marker = null;
            }
        }
    }), getAndroidViewViewRemoved(this_));
    map.addListener("click", (ev)=>{
        position.value = comGoogleAndroidGmsMapsModelLatLngToKhrysalis(ev.latLng)
    });
}

