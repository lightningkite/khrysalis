// Generated by Khrysalis TypeScript converter - this file will be overwritten.
// File: Image.loadingRx.actual.kt
// Package: com.lightningkite.khrysalis
// FQImport: com.lightningkite.khrysalis.ImageRaw.raw TS raw
// FQImport: com.lightningkite.khrysalis.Image TS Image
// FQImport: java.lang.Math.ceil TS ceil
// FQImport: com.lightningkite.khrysalis.ImageReference TS ImageReference
// FQImport: com.lightningkite.khrysalis.load TS comLightningkiteKhrysalisImageReferenceLoad
// FQImport: contentResolver TS getAndroidContentContextContentResolver
// FQImport: com.lightningkite.khrysalis.load.<anonymous>.<anonymous>.<anonymous>.it TS it
// FQImport: com.lightningkite.khrysalis.load.maxDimension TS maxDimension
// FQImport: android.graphics.BitmapFactory.Options.outHeight TS outHeight
// FQImport: io.reactivex.Single TS Single
// FQImport: com.lightningkite.khrysalis.net.HttpClient.appContext TS appContext
// FQImport: kotlin.ranges.coerceAtLeast TS kotlinIntCoerceAtLeast
// FQImport: android.graphics.Bitmap TS Bitmap
// FQImport: com.lightningkite.khrysalis.ImageReference.uri TS uri
// FQImport: com.lightningkite.khrysalis.load.finalOpts TS finalOpts
// FQImport: okhttp3.ResponseBody.byteStream TS byteStream
// FQImport: android.graphics.BitmapFactory.decodeByteArray TS decodeByteArray
// FQImport: android.graphics.BitmapFactory.Options.inJustDecodeBounds TS inJustDecodeBounds
// FQImport: android.content.ContentResolver.openInputStream TS openInputStream
// FQImport: kotlin.ByteArray.size TS size
// FQImport: io.reactivex.Single.error TS error
// FQImport: kotlin.Exception TS Exception
// FQImport: com.lightningkite.khrysalis.load.<anonymous>.it TS it
// FQImport: com.lightningkite.khrysalis.load.e TS e
// FQImport: java.lang.IllegalStateException TS IllegalStateException
// FQImport: com.lightningkite.khrysalis.load.<anonymous>.<anonymous>.it TS it
// FQImport: com.lightningkite.khrysalis.load.<anonymous>.response TS response
// FQImport: com.lightningkite.khrysalis.load.<anonymous>.sizeOpts TS sizeOpts
// FQImport: kotlin.io.use TS javaIoCloseableUse
// FQImport: com.lightningkite.khrysalis.net.HttpClient.call TS call
// FQImport: android.graphics.BitmapFactory.Options.inSampleSize TS inSampleSize
// FQImport: com.lightningkite.khrysalis.ImageRaw TS ImageRaw
// FQImport: com.lightningkite.khrysalis.ImageBitmap TS ImageBitmap
// FQImport: com.lightningkite.khrysalis.ImageRemoteUrl TS ImageRemoteUrl
// FQImport: java.lang.Math TS Math
// FQImport: com.lightningkite.khrysalis.net.HttpClient.GET TS GET
// FQImport: okhttp3.Response.body TS body
// FQImport: android.graphics.BitmapFactory.decodeStream TS decodeStream
// FQImport: android.graphics.BitmapFactory TS BitmapFactory
// FQImport: com.lightningkite.khrysalis.ImageBitmap.bitmap TS bitmap
// FQImport: com.lightningkite.khrysalis.ImageRemoteUrl.url TS url
// FQImport: com.lightningkite.khrysalis.net.unsuccessfulAsError TS ioReactivexSingleUnsuccessfulAsError
// FQImport: kotlin.math.max TS max
// FQImport: com.lightningkite.khrysalis.load TS comLightningkiteKhrysalisImageRemoteUrlLoad
// FQImport: android.graphics.BitmapFactory.Options.outWidth TS outWidth
import { Image, ImageBitmap, ImageRaw, ImageReference, ImageRemoteUrl } from './Image.shared'
import { comLightningkiteKhrysalisImageReferenceLoad, comLightningkiteKhrysalisImageRemoteUrlLoad } from './Image.actual'
import { ioReactivexSingleUnsuccessfulAsError } from './net/RxHttpAssist.actual'
import { Observable, of as rxOf } from 'rxjs'
import { map as rxMap } from 'rxjs/operators'
import { also } from 'khrysalis/dist/Kotlin'

//! Declares com.lightningkite.khrysalis.load
export function comLightningkiteKhrysalisImageLoad(this_: Image): Observable<Bitmap>{
    return try {
        return (() => {if (this_ instanceof ImageRaw) {
                    return rxOf(BitmapFactory.decodeByteArray(this_.raw, 0, this_.raw.size))
                } else if (this_ instanceof ImageReference) {
                    return comLightningkiteKhrysalisImageReferenceLoad(undefined)
                } else if (this_ instanceof ImageBitmap) {
                    return rxOf(this_.bitmap)
                } else if (this_ instanceof ImageRemoteUrl) {
                    return comLightningkiteKhrysalisImageRemoteUrlLoad()
        }})()
    } catch (e: Exception) {
        return Single.error(e);
    };
}

//! Declares com.lightningkite.khrysalis.load
export function comLightningkiteKhrysalisImageReferenceLoad(this_: ImageReference, maxDimension: number = 2048): Observable<Bitmap>{
    try {
        const finalOpts = BitmapFactory.Options.constructor();
        
        ((_it)=>{
                if(_it === null) return null;
                return javaIoCloseableUse(_it, (it) => {
                        const sizeOpts = also(BitmapFactory.Options.constructor(), (this_1) => this_1.inJustDecodeBounds = true);
                        
                        return also(BitmapFactory.decodeStream(it, null, sizeOpts), (this_1) => finalOpts.inSampleSize = kotlinIntCoerceAtLeast(max(Math.floor(((it) => Math.ceil(it))(sizeOpts.outWidth / maxDimension)), Math.floor(((it) => Math.ceil(it))(sizeOpts.outHeight / maxDimension))), 1));
                })
        })(getAndroidContentContextContentResolver(HttpClient.INSTANCE.appContext).openInputStream(this_.uri))
        ?: return Single.error(IllegalStateException.constructorkotlinString("Context from HttpClient is missing; please set up HttpClient before attempting this."));
        ((_it)=>{
                if(_it === null) return null;
                return javaIoCloseableUse(_it, (it) => return rxOf(BitmapFactory.decodeStream(it, null, finalOpts)))
        })(getAndroidContentContextContentResolver(HttpClient.INSTANCE.appContext).openInputStream(this_.uri))
        ?: return Single.error(IllegalStateException.constructorkotlinString("Context from HttpClient is missing; please set up HttpClient before attempting this."));
    } catch (e: Exception) {
        return Single.error(e);
    };
}

//! Declares com.lightningkite.khrysalis.load
export function comLightningkiteKhrysalisImageRemoteUrlLoad(this_: ImageRemoteUrl): Observable<Bitmap>{
    return ioReactivexSingleUnsuccessfulAsError(HttpClient.INSTANCE.call(this_.url, HttpClient.INSTANCE.GET, new Map([]), undefined)).pipe(rxMap((response) => ((_it)=>{
                    if(_it === null) return null;
                    return javaIoCloseableUse(_it, (it) => javaIoCloseableUse(it.byteStream(), (it) => BitmapFactory.decodeStream(it)))
    })(response.body())));
}

