// Generated by Khrysalis TypeScript converter - this file will be overwritten.
// File: observables/binding/ViewFlipper.binding.actual.kt
// Package: com.lightningkite.khrysalis.observables.binding
// FQImport: com.lightningkite.khrysalis.observables.binding.bindLoading.<anonymous>.it TS it
// FQImport: android.graphics.LightingColorFilter TS LightingColorFilter
// FQImport: android.widget.ViewFlipper.context TS getAndroidWidgetViewFlipperContext
// FQImport: com.lightningkite.khrysalis.observables.subscribeBy>com.lightningkite.khrysalis.observables.ObservableProperty<kotlin.Any> TS comLightningkiteKhrysalisObservablesObservablePropertySubscribeBy
// FQImport: android.widget.ViewFlipper.childCount TS getAndroidWidgetViewFlipperChildCount
// FQImport: android.widget.ViewFlipper.outAnimation TS setAndroidWidgetViewFlipperOutAnimation
// FQImport: android.content.res.Resources.getColor TS getColor
// FQImport: android.widget.ViewFlipper.addView TS addView
// FQImport: com.lightningkite.khrysalis.views.ColorResource TS ColorResource
// FQImport: com.lightningkite.khrysalis.observables.binding.bindLoading.color TS color
// FQImport: com.lightningkite.khrysalis.observables.binding.bindLoading.spinner TS spinner
// FQImport: android.widget.ProgressBar TS ProgressBar
// FQImport: com.lightningkite.khrysalis.rx.until>io.reactivex.disposables.Disposable TS ioReactivexDisposablesDisposableUntil
// FQImport: android.view.animation.AlphaAnimation TS AlphaAnimation
// FQImport: android.widget.ViewFlipper.displayedChild TS setAndroidWidgetViewFlipperDisplayedChild
// FQImport: com.lightningkite.khrysalis.observables.binding.bindLoading.<anonymous>.color TS color
// FQImport: com.lightningkite.khrysalis.observables.binding.bindLoading.loading TS loading
// FQImport: android.widget.ProgressBar.indeterminateDrawable TS getAndroidWidgetProgressBarIndeterminateDrawable
// FQImport: android.widget.ViewFlipper.inAnimation TS getAndroidWidgetViewFlipperInAnimation
// FQImport: android.view.Gravity TS Gravity
// FQImport: android.view.Gravity.CENTER TS CENTER
// FQImport: android.view.animation.LinearInterpolator TS LinearInterpolator
// FQImport: android.view.ViewGroup.LayoutParams.WRAP_CONTENT TS WRAP_CONTENT
// FQImport: com.lightningkite.khrysalis.observables.ObservableProperty TS ObservableProperty
// FQImport: android.view.animation.AlphaAnimation.duration TS setAndroidViewAnimationAlphaAnimationDuration
// FQImport: android.graphics.drawable.Drawable.colorFilter TS setAndroidGraphicsDrawableDrawableColorFilter
// FQImport: android.widget.ViewFlipper.outAnimation TS getAndroidWidgetViewFlipperOutAnimation
// FQImport: android.widget.ViewFlipper.resources TS getAndroidWidgetViewFlipperResources
// FQImport: android.widget.FrameLayout TS FrameLayout
// FQImport: android.widget.ViewFlipper.inAnimation TS setAndroidWidgetViewFlipperInAnimation
// FQImport: com.lightningkite.khrysalis.observables.binding.bindLoading.<anonymous>.colorValue TS colorValue
// FQImport: com.lightningkite.khrysalis.rx.removed>android.view.View TS getAndroidViewViewRemoved
// FQImport: android.view.animation.AlphaAnimation.interpolator TS setAndroidViewAnimationAlphaAnimationInterpolator
import { comLightningkiteKhrysalisObservablesObservablePropertySubscribeBy } from './../ObservableProperty.ext.shared'
import { getAndroidViewViewRemoved, ioReactivexDisposablesDisposableUntil } from './../../rx/DisposeCondition.actual'
import { ObservableProperty } from './../ObservableProperty.shared'
import { SubscriptionLike } from 'rxjs'
import { also } from 'Kotlin'
import { ColorResource } from './../../views/ResourceTypes.actual'

//! Declares com.lightningkite.khrysalis.observables.binding.bindLoading>android.widget.ViewFlipper
export function androidWidgetViewFlipperBindLoading(this_: HTMLDivElement, loading: ObservableProperty<boolean>, color: (ColorResource | null) = null): SubscriptionLike{
    if (getAndroidWidgetViewFlipperInAnimation(this_).equals(null)) setAndroidWidgetViewFlipperInAnimation(this_, also(AlphaAnimation.constructorkotlinFloat, kotlinFloat(0, 1), (this_1) => {
                setAndroidViewAnimationAlphaAnimationDuration(this_1, 250);
                setAndroidViewAnimationAlphaAnimationInterpolator(this_1, LinearInterpolator.constructor());
    }));
    if (getAndroidWidgetViewFlipperOutAnimation(this_).equals(null)) setAndroidWidgetViewFlipperOutAnimation(this_, also(AlphaAnimation.constructorkotlinFloat, kotlinFloat(1, 0), (this_1) => {
                setAndroidViewAnimationAlphaAnimationDuration(this_1, 250);
                setAndroidViewAnimationAlphaAnimationInterpolator(this_1, LinearInterpolator.constructor());
    }));
    if (getAndroidWidgetViewFlipperChildCount(this_) === 1) {
        const spinner = ProgressBar.constructorandroidcontentContext(getAndroidWidgetViewFlipperContext(this_));
        
        const temp390 = color;
        if(temp390 !== null) ((color) => {
                //TODO: Make this actually show the proper color. Currently it only makes it white.
                const colorValue = getAndroidWidgetViewFlipperResources(this_).getColor(color);
                
                setAndroidGraphicsDrawableDrawableColorFilter(getAndroidWidgetProgressBarIndeterminateDrawable(spinner), LightingColorFilter.constructorkotlinInt, kotlinInt(0xFFFFFFFF - colorValue, colorValue));
        })(temp390);
        this_.addView(spinner, 1, FrameLayout.LayoutParams.constructorkotlinInt, kotlinInt, kotlinInt(WRAP_CONTENT, WRAP_CONTENT, Gravity.CENTER));
    }
    ioReactivexDisposablesDisposableUntil(comLightningkiteKhrysalisObservablesObservablePropertySubscribeBy(loading, undefined, undefined, (it) => {
                setAndroidWidgetViewFlipperDisplayedChild(this_, it ? 1 : 0)
    }), getAndroidViewViewRemoved(this_));
}

