// Generated by Khrysalis TypeScript converter - this file will be overwritten.
// File: observables/binding/RatingBar.binding.actual.kt
// Package: com.lightningkite.khrysalis.observables.binding
// FQImport: kotlin.Boolean TS Boolean
// FQImport: com.lightningkite.khrysalis.observables.MutableObservableProperty.value TS value
// FQImport: android.widget.RatingBar.OnRatingBarChangeListener TS RatingBarOnRatingBarChangeListener
// FQImport: stepSize TS setAndroidWidgetRatingBarStepSize
// FQImport: com.lightningkite.khrysalis.observables.binding.bind.<no name provided>.onRatingChanged.p0 TS p0
// FQImport: com.lightningkite.khrysalis.observables.binding.bindFloat.stars TS stars
// FQImport: com.lightningkite.khrysalis.observables.binding.bind.stars TS stars
// FQImport: com.lightningkite.khrysalis.observables.subscribeBy TS comLightningkiteKhrysalisObservablesObservablePropertySubscribeBy
// FQImport: android.widget.RatingBar.setIsIndicator TS setIsIndicator
// FQImport: com.lightningkite.khrysalis.observables.binding.bind.observable TS observable
// FQImport: com.lightningkite.khrysalis.observables.binding.bindFloat.suppress TS suppress
// FQImport: android.widget.RatingBar.incrementProgressBy TS incrementProgressBy
// FQImport: android.widget.RatingBar TS RatingBar
// FQImport: max TS setAndroidWidgetRatingBarMax
// FQImport: com.lightningkite.khrysalis.rx.until TS ioReactivexDisposablesDisposableUntil
// FQImport: onRatingBarChangeListener TS setAndroidWidgetRatingBarOnRatingBarChangeListener
// FQImport: com.lightningkite.khrysalis.observables.binding.bindFloat.observable TS observable
// FQImport: com.lightningkite.khrysalis.observables.binding.bind.<anonymous>.value TS value
// FQImport: rating TS setAndroidWidgetRatingBarRating
// FQImport: progress TS setAndroidWidgetRatingBarProgress
// FQImport: com.lightningkite.khrysalis.observables.ObservableProperty TS ObservableProperty
// FQImport: com.lightningkite.khrysalis.observables.binding.bind.suppress TS suppress
// FQImport: numStars TS setAndroidWidgetRatingBarNumStars
// FQImport: progress TS getAndroidWidgetRatingBarProgress
// FQImport: com.lightningkite.khrysalis.observables.binding.bindFloat.<no name provided>.onRatingChanged.p1 TS p1
// FQImport: com.lightningkite.khrysalis.rx.removed TS getAndroidViewViewRemoved
// FQImport: com.lightningkite.khrysalis.observables.binding.bindFloat.<anonymous>.value TS value
// FQImport: com.lightningkite.khrysalis.observables.MutableObservableProperty TS MutableObservableProperty
import { comLightningkiteKhrysalisObservablesObservablePropertySubscribeBy } from './../ObservableProperty.ext.shared'
import { MutableObservableProperty } from './../MutableObservableProperty.shared'
import { getAndroidViewViewRemoved, ioReactivexDisposablesDisposableUntil } from './../../rx/DisposeCondition.actual'
import { ObservableProperty } from './../ObservableProperty.shared'

//! Declares com.lightningkite.khrysalis.observables.binding.bind
export function androidWidgetRatingBarBind(this_Bind: RatingBar, stars: number, observable: MutableObservableProperty<number>){
    setAndroidWidgetRatingBarMax(this_Bind, stars);
    setAndroidWidgetRatingBarNumStars(this_Bind, stars);
    this_Bind.incrementProgressBy(1);
    
    let suppress = false;
    
    ioReactivexDisposablesDisposableUntil(comLightningkiteKhrysalisObservablesObservablePropertySubscribeBy(observable, undefined, undefined, (value) => (() => {if (suppress.not()) {
                        suppress = true;
                        setAndroidWidgetRatingBarProgress(this_Bind, value);
                        suppress = false;
    }})()), getAndroidViewViewRemoved(this_Bind));
    setAndroidWidgetRatingBarOnRatingBarChangeListener(this_Bind, new class Anon implements RatingBarOnRatingBarChangeListener {
            public static implementsInterfaceAndroidWidgetRatingBarOnRatingBarChangeListener = true;
            public constructor() {
            }
            
            onRatingChanged(p0: RatingBar, p1: number, p2: Boolean){
                (() => {if (suppress.not()) {
                            suppress = true;
                            observable.value = getAndroidWidgetRatingBarProgress(p0);
                            suppress = false;
                }})()
            }
    }());
    
}

//! Declares com.lightningkite.khrysalis.observables.binding.bind
export function androidWidgetRatingBarBind(this_Bind: RatingBar, stars: number, observable: ObservableProperty<number>){
    setAndroidWidgetRatingBarMax(this_Bind, stars);
    setAndroidWidgetRatingBarNumStars(this_Bind, stars);
    this_Bind.setIsIndicator(true);
    
    return ioReactivexDisposablesDisposableUntil(comLightningkiteKhrysalisObservablesObservablePropertySubscribeBy(observable, undefined, undefined, (value) => setAndroidWidgetRatingBarProgress(this_Bind, value)), getAndroidViewViewRemoved(this_Bind));
}



//! Declares com.lightningkite.khrysalis.observables.binding.bindFloat
export function androidWidgetRatingBarBindFloat(this_BindFloat: RatingBar, stars: number, observable: MutableObservableProperty<number>){
    setAndroidWidgetRatingBarNumStars(this_BindFloat, stars);
    setAndroidWidgetRatingBarStepSize(this_BindFloat, 0.01f);
    
    let suppress = false;
    
    ioReactivexDisposablesDisposableUntil(comLightningkiteKhrysalisObservablesObservablePropertySubscribeBy(observable, undefined, undefined, (value) => (() => {if (suppress.not()) {
                        suppress = true;
                        setAndroidWidgetRatingBarRating(this_BindFloat, value);
                        suppress = false;
    }})()), getAndroidViewViewRemoved(this_BindFloat));
    setAndroidWidgetRatingBarOnRatingBarChangeListener(this_BindFloat, new class Anon implements RatingBarOnRatingBarChangeListener {
            public static implementsInterfaceAndroidWidgetRatingBarOnRatingBarChangeListener = true;
            public constructor() {
            }
            
            onRatingChanged(p0: RatingBar, p1: number, p2: Boolean){
                (() => {if (suppress.not()) {
                            suppress = true;
                            observable.value = p1;
                            suppress = false;
                }})()
            }
    }());
    
}


//! Declares com.lightningkite.khrysalis.observables.binding.bindFloat
export function androidWidgetRatingBarBindFloat(this_BindFloat: RatingBar, stars: number, observable: ObservableProperty<number>){
    setAndroidWidgetRatingBarNumStars(this_BindFloat, stars);
    this_BindFloat.setIsIndicator(true);
    
    return ioReactivexDisposablesDisposableUntil(comLightningkiteKhrysalisObservablesObservablePropertySubscribeBy(observable, undefined, undefined, (value) => setAndroidWidgetRatingBarRating(this_BindFloat, value)), getAndroidViewViewRemoved(this_BindFloat));
}

