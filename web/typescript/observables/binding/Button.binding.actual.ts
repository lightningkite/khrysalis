// Generated by Khrysalis TypeScript converter - this file will be overwritten.
// File: observables/binding/Button.binding.actual.kt
// Package: com.lightningkite.khrysalis.observables.binding
// FQImport: android.widget.Button.isEnabled TS isEnabled
// FQImport: com.lightningkite.khrysalis.observables.binding.bindActive.inactiveBackground TS inactiveBackground
// FQImport: com.lightningkite.khrysalis.observables.binding.bindActive.observable TS observable
// FQImport: android.graphics.drawable.Drawable TS Drawable
// FQImport: com.lightningkite.khrysalis.observables.binding.bindActive.activeColorResource TS activeColorResource
// FQImport: com.lightningkite.khrysalis.observables.binding.bindActive.<anonymous>.<anonymous>.color TS color
// FQImport: com.lightningkite.khrysalis.observables.subscribeBy>com.lightningkite.khrysalis.observables.ObservableProperty<kotlin.Any> TS comLightningkiteKhrysalisObservablesObservablePropertySubscribeBy
// FQImport: com.lightningkite.khrysalis.observables.ObservableProperty TS ObservableProperty
// FQImport: com.lightningkite.khrysalis.observables.binding.bindActive.activeBackground TS activeBackground
// FQImport: com.lightningkite.khrysalis.observables.binding.bindActive.inactiveColorResource TS inactiveColorResource
// FQImport: com.lightningkite.khrysalis.rx.removed>android.view.View TS getAndroidViewViewRemoved
// FQImport: com.lightningkite.khrysalis.views.backgroundDrawable>android.view.View TS setAndroidViewViewBackgroundDrawable
// FQImport: com.lightningkite.khrysalis.rx.until>io.reactivex.disposables.Disposable TS ioReactivexDisposablesDisposableUntil
// FQImport: com.lightningkite.khrysalis.observables.binding.bindActive.<anonymous>.it TS it
import { comLightningkiteKhrysalisObservablesObservablePropertySubscribeBy } from './../ObservableProperty.ext.shared'
import { getAndroidViewViewRemoved, ioReactivexDisposablesDisposableUntil } from './../../rx/DisposeCondition.actual'
import { ObservableProperty } from './../ObservableProperty.shared'
import { SubscriptionLike } from 'rxjs'

//! Declares com.lightningkite.khrysalis.observables.binding.bindActive>android.widget.Button
export function androidWidgetButtonBindActive(this_: HTMLButtonElement, observable: ObservableProperty<boolean>, activeColorResource: (string | null) = null, inactiveColorResource: (string | null) = null): SubscriptionLike{
    ioReactivexDisposablesDisposableUntil(comLightningkiteKhrysalisObservablesObservablePropertySubscribeBy(observable, undefined, undefined, (it) => {
                this_.isEnabled = it;
                if (it) {
                    const temp333 = activeColorResource;
                    if(temp333 !== null) ((color) => {
                            this_.style.background = color
                    })(temp333);
                } else {
                    const temp335 = inactiveColorResource;
                    if(temp335 !== null) ((color) => {
                            this_.style.background = color
                    })(temp335);
                }
    }), getAndroidViewViewRemoved(this_));
}


//! Declares com.lightningkite.khrysalis.observables.binding.bindActive>android.widget.Button
export function androidWidgetButtonBindActive(this_: HTMLButtonElement, observable: ObservableProperty<boolean>, activeBackground: Drawable, inactiveBackground: Drawable): SubscriptionLike{
    ioReactivexDisposablesDisposableUntil(comLightningkiteKhrysalisObservablesObservablePropertySubscribeBy(observable, undefined, undefined, (it) => {
                this_.isEnabled = it;
                if (it) {
                    setAndroidViewViewBackgroundDrawable(this_, activeBackground);
                } else {
                    
                    setAndroidViewViewBackgroundDrawable(this_, inactiveBackground);
                }
    }), getAndroidViewViewRemoved(this_));
}

