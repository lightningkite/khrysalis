// Generated by Khrysalis TypeScript converter - this file will be overwritten.
// File: observables/binding/LinearLayout.binding.shared.kt
// Package: com.lightningkite.khrysalis.observables.binding
// FQImport: com.lightningkite.khrysalis.observables.binding.bind.<anonymous>.excessViews TS excessViews
// FQImport: com.lightningkite.khrysalis.observables.binding.bind.<anonymous>.view TS view
// FQImport: com.lightningkite.khrysalis.observables.binding.bind.data TS data
// FQImport: android.widget.LinearLayout.addView TS addView
// FQImport: com.lightningkite.khrysalis.observables.binding.bind.existingViews TS existingViews
// FQImport: com.lightningkite.khrysalis.observables.binding.LinearLayoutBoundSubview.view TS view
// FQImport: com.lightningkite.khrysalis.observables.subscribeBy TS comLightningkiteKhrysalisObservablesObservablePropertySubscribeBy
// FQImport: com.lightningkite.khrysalis.views.params TS androidWidgetLinearLayoutParams
// FQImport: com.lightningkite.khrysalis.observables.binding.bind.<anonymous>.old TS old
// FQImport: android.widget.LinearLayout.removeView TS removeView
// FQImport: android.view.View TS View
// FQImport: com.lightningkite.khrysalis.observables.binding.bind.defaultValue TS defaultValue
// FQImport: com.lightningkite.khrysalis.observables.binding.bind.T TS T
// FQImport: com.lightningkite.khrysalis.rx.until TS ioReactivexDisposablesDisposableUntil
// FQImport: com.lightningkite.khrysalis.observables.binding.LinearLayoutBoundSubview.property TS property
// FQImport: com.lightningkite.khrysalis.observables.binding.LinearLayoutBoundSubview SKIPPED due to same file
// FQImport: com.lightningkite.khrysalis.observables.binding.bind.<anonymous>.value TS value
// FQImport: com.lightningkite.khrysalis.observables.binding.bind.makeView TS makeView
// FQImport: com.lightningkite.khrysalis.observables.ObservableProperty TS ObservableProperty
// FQImport: com.lightningkite.khrysalis.observables.binding.bind.<anonymous>.prop TS prop
// FQImport: android.widget.LinearLayout TS LinearLayout
// FQImport: com.lightningkite.khrysalis.observables.binding.LinearLayoutBoundSubview TS LinearLayoutBoundSubview
// FQImport: com.lightningkite.khrysalis.observables.StandardObservableProperty TS StandardObservableProperty
// FQImport: kotlin.collections.indices TS getKotlinCollectionsCollectionIndices
// FQImport: com.lightningkite.khrysalis.rx.removed TS getAndroidViewViewRemoved
// FQImport: com.lightningkite.khrysalis.observables.binding.LinearLayoutBoundSubview.T TS T
// FQImport: com.lightningkite.khrysalis.views.geometry.AlignPair.Companion.centerFill TS centerFill
// FQImport: com.lightningkite.khrysalis.observables.StandardObservableProperty.value TS value
// FQImport: com.lightningkite.khrysalis.observables.binding.bind.<anonymous>.index TS index
import { comLightningkiteKhrysalisObservablesObservablePropertySubscribeBy } from './../ObservableProperty.ext.shared'
import { getAndroidViewViewRemoved, ioReactivexDisposablesDisposableUntil } from './../../rx/DisposeCondition.actual'
import { androidWidgetLinearLayoutParams } from './../../views/LinearLayout.actual'
import { StandardObservableProperty } from './../StandardObservableProperty.shared'
import { ObservableProperty } from './../ObservableProperty.shared'
import { NumberRange } from 'khrysalis/dist/Kotlin'

//! Declares com.lightningkite.khrysalis.observables.binding.LinearLayoutBoundSubview
class LinearLayoutBoundSubview<T> {
    public readonly view: View;
    public readonly property: StandardObservableProperty<T>;
    public constructor(view: View, property: StandardObservableProperty<T>) {
        this.view = view;
        this.property = property;
    }
}

//! Declares com.lightningkite.khrysalis.observables.binding.bind
export function androidWidgetLinearLayoutBind<T>(this_: LinearLayout, data: ObservableProperty<Array<T>>, defaultValue: T, makeView:  (a: ObservableProperty<T>) => View){
    const existingViews: Array<LinearLayoutBoundSubview<T>> = [];
    
    ioReactivexDisposablesDisposableUntil(comLightningkiteKhrysalisObservablesObservablePropertySubscribeBy(data, undefined, undefined, (value) => {
                //Fix view count
                const excessViews = existingViews.length - value.length;
                
                if(excessViews > 0){
                    //remove views
                    for (const iter of new NumberRange(1, excessViews)) {
                        const old = existingViews.splice((existingViews.length - 1), 1);
                        
                        this_.removeView(old.view);
                    }
                } else if(existingViews.length < value.length) {
                    //add views
                    for (const iter of new NumberRange(1, (-excessViews))) {
                        const prop = new StandardObservableProperty(defaultValue, undefined);
                        
                        const view = this.makeView(prop);
                        
                        this_.addView(view, androidWidgetLinearLayoutParams(this_, undefined, undefined, undefined, undefined, undefined, undefined, AlignPair.Companion.INSTANCE.centerFill, undefined));
                        existingViews.push(new LinearLayoutBoundSubview(view, prop));
                    }
                }
                
                //Update views
                for (const index of getKotlinCollectionsCollectionIndices(value)) {
                    existingViews[index].property.value = value[index];
                }
    }), getAndroidViewViewRemoved(this_));
}


