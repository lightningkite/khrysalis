// Generated by Khrysalis TypeScript converter - this file will be overwritten.
// File: observables/binding/LinearLayout.binding.shared.kt
// Package: com.lightningkite.khrysalis.observables.binding
import { ComLightningkiteKhrysalisObservablesObservablePropertySubscribeBy } from './../ObservableProperty.ext.shared'
import { IoReactivexDisposablesDisposableUntil, getAndroidViewViewRemoved } from './../../rx/DisposeCondition.actual'
import { AndroidWidgetLinearLayoutParams } from './../../views/LinearLayout.actual'
import { StandardObservableProperty } from './../StandardObservableProperty.shared'
import { LinearLayoutBoundSubview } from './LinearLayout.binding.shared'
import { ObservableProperty } from './../ObservableProperty.shared'
import { NumberRange } from 'khrysalis/dist/Kotlin'

//! Declares com.lightningkite.khrysalis.observables.binding.LinearLayoutBoundSubview
class LinearLayoutBoundSubview<T> {
    public readonly view: View;
    public readonly property: StandardObservableProperty<T>;
    public constructor( view: View,  property: StandardObservableProperty<T>) {
        this.view = view;
        this.property = property;
    }
}

//! Declares com.lightningkite.khrysalis.observables.binding.bind
export function AndroidWidgetLinearLayoutBind<T>(this_Bind: LinearLayout, data: ObservableProperty<Array<T>>, defaultValue: T, makeView:  (a: ObservableProperty<T>) => View){
    const existingViews: Array<LinearLayoutBoundSubview<T>> = [];
    
    return IoReactivexDisposablesDisposableUntil(ComLightningkiteKhrysalisObservablesObservablePropertySubscribeBy(data, undefined, undefined, (value) => {
                //Fix view count
                const excessViews = existingViews.size - value.size;
                
                if(excessViews > 0){
                    //remove views
                    for (const iter of new NumberRange(1, excessViews)) {
                        const old = existingViews.splice((existingViews.length - 1), 1);
                        
                        this_Bind.removeView(old.view);
                    }
                } else if(existingViews.size < value.size) {
                    //add views
                    for (const iter of new NumberRange(1, (-excessViews))) {
                        const prop = new StandardObservableProperty(defaultValue, undefined);
                        
                        const view = this.makeView(prop);
                        
                        this_Bind.addView(view, AndroidWidgetLinearLayoutParams(this_Bind, undefined, undefined, undefined, undefined, undefined, undefined, AlignPair.Companion.INSTANCE.centerFill, undefined));
                        return existingViews.add(new LinearLayoutBoundSubview(view, prop));
                    }
                }
                
                //Update views
                for (const index of getKotlinCollectionsCollectionIndices(value)) {
                    existingViews[index].property.value = value[index];
                }
    }), getAndroidViewViewRemoved(this_Bind));
}


