// Generated by Khrysalis TypeScript converter - this file will be overwritten.
// File: observables/binding/RecyclerView.binding.actual.kt
// Package: com.lightningkite.khrysalis.observables.binding
// FQImport: com.lightningkite.khrysalis.observables.binding.RVTypeHandler.make.event TS event
// FQImport: androidx.recyclerview.widget.RecyclerView.ViewHolder TS ViewHolder
// FQImport: com.lightningkite.khrysalis.observables.binding.RVTypeHandler.viewDependency TS viewDependency
// FQImport: com.lightningkite.khrysalis.observables.binding.bind.<no name provided>.onBindViewHolder.holder TS holder
// FQImport: com.lightningkite.khrysalis.observables.subscribeBy TS comLightningkiteKhrysalisObservablesObservablePropertySubscribeBy
// FQImport: android.view.ViewGroup.LayoutParams.MATCH_PARENT TS MATCH_PARENT
// FQImport: com.lightningkite.khrysalis.observables.binding.RVTypeHandler.type.<anonymous>.handler TS handler
// FQImport: isRefreshing TS setAndroidxSwiperefreshlayoutWidgetSwipeRefreshLayoutIsRefreshing
// FQImport: com.lightningkite.khrysalis.rx.until TS ioReactivexDisposablesDisposableUntil
// FQImport: com.lightningkite.khrysalis.observables.binding.RVTypeHandler.defaultHandler TS defaultHandler
// FQImport: reverseLayout TS getAndroidxRecyclerviewWidgetLinearLayoutManagerReverseLayout
// FQImport: kotlin.Any TS Any
// FQImport: com.lightningkite.khrysalis.observables.binding.RVTypeHandler.make.handler TS handler
// FQImport: com.lightningkite.khrysalis.observables.binding.RVTypeHandler.make.type TS type
// FQImport: com.lightningkite.khrysalis.rx.removed TS getAndroidViewViewRemoved
// FQImport: com.lightningkite.khrysalis.observables.StandardObservableProperty TS StandardObservableProperty
// FQImport: com.lightningkite.khrysalis.observables.binding.RVTypeHandler.handle.T TS T
// FQImport: com.lightningkite.khrysalis.observables.binding.bindMulti.<no name provided>.onCreateViewHolder.event TS event
// FQImport: layoutParams TS setAndroidViewViewLayoutParams
// FQImport: com.lightningkite.khrysalis.observables.binding.bindRefresh.refresh TS refresh
// FQImport: com.lightningkite.khrysalis.observables.binding.bind.<no name provided>.notifyDataSetChanged TS notifyDataSetChanged
// FQImport: com.lightningkite.khrysalis.observables.binding.RVTypeHandler.Handler.handler TS handler
// FQImport: com.lightningkite.khrysalis.observables.binding.bind.<no name provided>.onBindViewHolder.<anonymous>.it TS it
// FQImport: adapter TS setAndroidxRecyclerviewWidgetRecyclerViewAdapter
// FQImport: adapter TS getAndroidxRecyclerviewWidgetRecyclerViewAdapter
// FQImport: androidx.recyclerview.widget.RecyclerView.ViewHolder.itemView TS itemView
// FQImport: com.lightningkite.khrysalis.observables.binding.bindMulti.data TS data
// FQImport: android.view.View TS View
// FQImport: com.lightningkite.khrysalis.observables.binding.bind.defaultValue TS defaultValue
// FQImport: com.lightningkite.khrysalis.observables.map TS comLightningkiteKhrysalisObservablesObservablePropertyMap
// FQImport: com.lightningkite.khrysalis.observables.binding.bindMulti.viewDependency TS viewDependency
// FQImport: com.lightningkite.khrysalis.observables.binding.whenScrolledToEnd.<no name provided>.onScrolled.<anonymous>.it TS it
// FQImport: androidx.recyclerview.widget.LinearLayoutManager.findLastVisibleItemPosition TS findLastVisibleItemPosition
// FQImport: com.lightningkite.khrysalis.observables.binding.whenScrolledToEnd.action TS action
// FQImport: com.lightningkite.khrysalis.observables.binding.bindRefresh.<anonymous>.<anonymous>.value TS value
// FQImport: com.lightningkite.khrysalis.observables.binding.RVTypeHandler.Handler TS Handler
// FQImport: com.lightningkite.khrysalis.observables.binding.RVTypeHandler.type.<anonymous>.index TS index
// FQImport: com.lightningkite.khrysalis.observables.binding.bindMulti.determineType TS determineType
// FQImport: androidx.recyclerview.widget.LinearLayoutManager TS LinearLayoutManager
// FQImport: com.lightningkite.khrysalis.observables.binding.bind.<no name provided>.onCreateViewHolder.event TS event
// FQImport: kotlin.collections.getOrNull TS kotlinCollectionsListGetOrNull
// FQImport: com.lightningkite.khrysalis.observables.binding.RVTypeHandler SKIPPED due to same file
// FQImport: layoutManager TS setAndroidxRecyclerviewWidgetRecyclerViewLayoutManager
// FQImport: com.lightningkite.khrysalis.observables.binding.RVTypeHandler.Handler.defaultValue TS defaultValue
// FQImport: tag TS getAndroidViewViewTag
// FQImport: com.lightningkite.khrysalis.observables.binding.bindMulti.makeView TS makeView
// FQImport: com.lightningkite.khrysalis.observables.binding.RVTypeHandler.type.item TS item
// FQImport: itemCount TS getAndroidxRecyclerviewWidgetRecyclerViewAdapterItemCount
// FQImport: com.lightningkite.khrysalis.observables.binding.bindMulti.<no name provided>.onBindViewHolder.holder TS holder
// FQImport: android.view.ViewGroup TS ViewGroup
// FQImport: com.lightningkite.khrysalis.observables.binding.RVTypeHandler.handlers TS handlers
// FQImport: com.lightningkite.khrysalis.observables.binding.RVTypeHandler.handle TS handle
// FQImport: com.lightningkite.khrysalis.observables.binding.RVTypeHandler.make TS make
// FQImport: com.lightningkite.khrysalis.observables.binding.bindMulti.<no name provided>.onCreateViewHolder.viewType TS viewType
// FQImport: com.lightningkite.khrysalis.observables.binding.bind.<no name provided>.onBindViewHolder.position TS position
// FQImport: com.lightningkite.khrysalis.observables.binding.RVTypeHandler.Handler.type TS type
// FQImport: com.lightningkite.khrysalis.observables.binding.bindMulti.<no name provided>.onBindViewHolder.<anonymous>.it TS it
// FQImport: kotlin.collections.List.size TS size
// FQImport: tag TS setAndroidViewViewTag
// FQImport: com.lightningkite.khrysalis.observables.binding.RVTypeHandler.make.subview TS subview
// FQImport: com.lightningkite.khrysalis.observables.binding.RVTypeHandler.handle.defaultValue TS defaultValue
// FQImport: androidx.swiperefreshlayout.widget.SwipeRefreshLayout TS SwipeRefreshLayout
// FQImport: com.lightningkite.khrysalis.observables.binding.bindMulti.<no name provided>.onBindViewHolder.position TS position
// FQImport: android.view.ViewGroup.LayoutParams.WRAP_CONTENT TS WRAP_CONTENT
// FQImport: com.lightningkite.khrysalis.observables.binding.bindMulti.<no name provided>.onCreateViewHolder.subview TS subview
// FQImport: com.lightningkite.khrysalis.observables.binding.bind.makeView TS makeView
// FQImport: androidx.recyclerview.widget.RecyclerView.addOnScrollListener TS addOnScrollListener
// FQImport: androidx.recyclerview.widget.RecyclerView TS RecyclerView
// FQImport: com.lightningkite.khrysalis.observables.binding.RVTypeHandler TS RVTypeHandler
// FQImport: com.lightningkite.khrysalis.observables.binding.<set-reverseDirection>.value TS value
// FQImport: layoutManager TS getAndroidxRecyclerviewWidgetRecyclerViewLayoutManager
// FQImport: com.lightningkite.khrysalis.observables.binding.RVTypeHandler.handle.type TS type
// FQImport: com.lightningkite.khrysalis.observables.binding.RVTypeHandler.typeCount TS typeCount
// FQImport: com.lightningkite.khrysalis.observables.binding.bind.<no name provided>.onCreateViewHolder.subview TS subview
// FQImport: com.lightningkite.khrysalis.observables.MutableObservableProperty TS MutableObservableProperty
// FQImport: com.lightningkite.khrysalis.views.newEmptyView TS newEmptyView
// FQImport: kotlin.Boolean TS Boolean
// FQImport: context TS getAndroidxRecyclerviewWidgetRecyclerViewContext
// FQImport: com.lightningkite.khrysalis.observables.binding.bind.data TS data
// FQImport: com.lightningkite.khrysalis.observables.MutableObservableProperty.value TS value
// FQImport: com.lightningkite.khrysalis.observables.binding.bindMulti.<no name provided>.notifyDataSetChanged TS notifyDataSetChanged
// FQImport: com.lightningkite.khrysalis.observables.binding.bindMulti.typeHandler TS typeHandler
// FQImport: com.lightningkite.khrysalis.observables.binding.bindMulti.typeHandlerSetup TS typeHandlerSetup
// FQImport: com.lightningkite.khrysalis.observables.binding.RVTypeHandler.handle.<anonymous>.<anonymous>.it TS it
// FQImport: kotlin.collections.forEachIndexed TS kotlinCollectionsIterableForEachIndexed
// FQImport: androidx.swiperefreshlayout.widget.SwipeRefreshLayout.setOnRefreshListener TS setOnRefreshListener
// FQImport: androidx.swiperefreshlayout.widget.SwipeRefreshLayout.post TS post
// FQImport: com.lightningkite.khrysalis.observables.binding.bindMulti.<no name provided>.getItemViewType.position TS position
// FQImport: com.lightningkite.khrysalis.observables.binding.bindRefresh.loading TS loading
// FQImport: com.lightningkite.khrysalis.observables.binding.RVTypeHandler.type TS type
// FQImport: com.lightningkite.khrysalis.observables.binding.bind.T TS T
// FQImport: com.lightningkite.khrysalis.observables.binding.RVTypeHandler.handle.action TS action
// FQImport: com.lightningkite.khrysalis.views.ViewDependency TS ViewDependency
// FQImport: kotlin.reflect.KClass TS KClass
// FQImport: parent TS getAndroidxRecyclerviewWidgetRecyclerViewParent
// FQImport: com.lightningkite.khrysalis.observables.binding.bindMulti.T TS T
// FQImport: com.lightningkite.khrysalis.observables.binding.RVTypeHandler.handle.<anonymous>.obs TS obs
// FQImport: com.lightningkite.khrysalis.observables.ObservableProperty TS ObservableProperty
// FQImport: kotlin.reflect.KClass.isInstance TS isInstance
// FQImport: com.lightningkite.khrysalis.observables.StandardObservableProperty.value TS value
// FQImport: com.lightningkite.khrysalis.observables.binding.bindMulti.defaultValue TS defaultValue
// FQImport: com.lightningkite.khrysalis.observables.ObservableProperty.value TS value
import { comLightningkiteKhrysalisObservablesObservablePropertySubscribeBy } from './../ObservableProperty.ext.shared'
import { getAndroidViewViewRemoved, ioReactivexDisposablesDisposableUntil } from './../../rx/DisposeCondition.actual'
import { MutableObservableProperty } from './../MutableObservableProperty.shared'
import { newEmptyView } from './../../views/EmptyView.actual'
import { comLightningkiteKhrysalisObservablesObservablePropertyMap } from './../TransformedObservableProperty.shared'
import { StandardObservableProperty } from './../StandardObservableProperty.shared'
import { ObservableProperty } from './../ObservableProperty.shared'
import { ViewDependency } from './../../views/ViewDependency.actual'
import { also, tryCastClass } from 'khrysalis/dist/Kotlin'

//! Declares com.lightningkite.khrysalis.observables.binding.whenScrolledToEnd
export function androidxRecyclerviewWidgetRecyclerViewWhenScrolledToEnd(this_WhenScrolledToEnd: RecyclerView, action: () => void){
    addOnScrollListener(new class Anon extends RecyclerView.RecyclerView {
            public constructor() {
                super();
            }
            
            onScrolled(recyclerView: RecyclerView, dx: number, dy: number){
                (tryCastClass(getAndroidxRecyclerviewWidgetRecyclerViewLayoutManager(this_WhenScrolledToEnd), LinearLayoutManager))?.((it) => if (it.findLastVisibleItemPosition() === getAndroidxRecyclerviewWidgetRecyclerViewAdapter(this_WhenScrolledToEnd)?.getAndroidxRecyclerviewWidgetRecyclerViewAdapterItemCount(this)?.this - 1) {
                        this.action();
                })(this);
            }
    }());
}

//! Declares com.lightningkite.khrysalis.observables.binding.reverseDirection
export function getAndroidxRecyclerviewWidgetRecyclerViewReverseDirection(this_ReverseDirection: RecyclerView): Boolean { return (tryCastClass(getAndroidxRecyclerviewWidgetRecyclerViewLayoutManager(this_ReverseDirection), LinearLayoutManager))?.getAndroidxRecyclerviewWidgetLinearLayoutManagerReverseLayout(this) ?: false; }
export function setAndroidxRecyclerviewWidgetRecyclerViewReverseDirection(this_ReverseDirection: RecyclerView, value: Boolean) {
    (tryCastClass(getAndroidxRecyclerviewWidgetRecyclerViewLayoutManager(this_ReverseDirection), LinearLayoutManager))?.getAndroidxRecyclerviewWidgetLinearLayoutManagerReverseLayout(this) = value;
}



//! Declares com.lightningkite.khrysalis.observables.binding.bind
export function androidxRecyclerviewWidgetRecyclerViewBind<T>(this_Bind: RecyclerView, data: ObservableProperty<Array<T>>, defaultValue: T, makeView: (a: ObservableProperty<T>) => View){
    setAndroidxRecyclerviewWidgetRecyclerViewLayoutManager(this_Bind, LinearLayoutManager.constructorandroidcontentContext(getAndroidxRecyclerviewWidgetRecyclerViewContext(this_Bind)));
    setAndroidxRecyclerviewWidgetRecyclerViewAdapter(this_Bind, new class Anon extends RecyclerView.RecyclerView<> {
            public constructor() {
                super();
                ioReactivexDisposablesDisposableUntil(comLightningkiteKhrysalisObservablesObservablePropertySubscribeBy(data, undefined, undefined, (_) => this.notifyDataSetChanged()), getAndroidViewViewRemoved(this_Bind));
            }
            
            
            
            onCreateViewHolder(parent: ViewGroup, viewType: number): RecyclerView.ViewHolder{
                const event = new StandardObservableProperty<T>(defaultValue, undefined);
                
                const subview = this.makeView(event);
                
                setAndroidViewViewTag(subview, event);
                setAndroidViewViewLayoutParams(subview, RecyclerView.LayoutParams.constructorkotlinInt, kotlinInt(MATCH_PARENT, WRAP_CONTENT));
                return new class Anon extends RecyclerView.RecyclerView {
                    public constructor() {
                        super(subview);
                    }
                }();
            }
            
            getItemCount(): number{ return data.value.size; }
            
            onBindViewHolder(holder: RecyclerView.ViewHolder, position: number){
                (tryCastClass(getAndroidViewViewTag(holder.itemView), StandardObservableProperty))?.((it) => it.value = data.value[position])(this) ?: ((this_) => console.log("Failed to find property to update"))(this);
            }
    }());
}

//! Declares com.lightningkite.khrysalis.observables.binding.RVTypeHandler
export class RVTypeHandler {
    public readonly viewDependency: ViewDependency;
    public constructor( viewDependency: ViewDependency) {
        this.viewDependency = viewDependency;
        this.typeCount = 0;
        this.handlers = [];
        this.defaultHandler = new Handler(Any::class, Unit.INSTANCE, (obs) => newEmptyView(this.viewDependency));
    }
    
    public static Handler = class Handler {
        public readonly type: KClass<*>;
        public readonly defaultValue: any;
        public readonly handler:  (a: ObservableProperty<any>) => View;
        public constructor( type: KClass<*>,  defaultValue: any,  handler:  (a: ObservableProperty<any>) => View) {
            this.type = type;
            this.defaultValue = defaultValue;
            this.handler = handler;
        }
    }
    internal _typeCount: number = 0;
    internal get typeCount(): number { return this._typeCount; }
    private set typeCount(value: number) 
    
    private readonly handlers: Array<Handler> = [];
    
    private readonly defaultHandler: Handler = new Handler(Any::class, Unit.INSTANCE, (obs) => newEmptyView(this.viewDependency));
    
    
    public handle(type: KClass<*>, defaultValue: any, action:  (a: ObservableProperty<any>) => View ){
        this.handlers.kotlinCollectionsMutableCollectionPlusAssign(this.handlers, new Handler(type, defaultValue, action));
        return this.typeCount++;
    }
    public handle<T extends any>(defaultValue: T, noinline action:  (a: ObservableProperty<T>) => View ){
        handle(T::class, defaultValue, (obs) => this.action(comLightningkiteKhrysalisObservablesObservablePropertyMap(obs, (it) => it as T)));
    }
    
    internal type(item: any): number{
        kotlinCollectionsIterableForEachIndexed(handlers, (index, handler) => if(handler.type.isInstance(item)){
                return index;
        });
        return this.typeCount;
    }
    internal make(type: number): View{
        const handler = type < this.typeCount ? this.handlers[type] : this.defaultHandler;
        
        const event = new StandardObservableProperty<any>(handler.defaultValue, undefined);
        
        const subview = handler.handler(event);
        
        setAndroidViewViewTag(subview, event);
        setAndroidViewViewLayoutParams(subview, RecyclerView.LayoutParams.constructorkotlinInt, kotlinInt(MATCH_PARENT, WRAP_CONTENT));
        return subview;
    }
}

//! Declares com.lightningkite.khrysalis.observables.binding.bindMulti
export function androidxRecyclerviewWidgetRecyclerViewBindMulti(this_BindMulti: RecyclerView, viewDependency: ViewDependency, data: ObservableProperty<Array<any>>, typeHandlerSetup: (a: RVTypeHandler) => void){
    const typeHandler = also(new RVTypeHandler(viewDependency), typeHandlerSetup);
    
    setAndroidxRecyclerviewWidgetRecyclerViewLayoutManager(this_BindMulti, LinearLayoutManager.constructorandroidcontentContext(getAndroidxRecyclerviewWidgetRecyclerViewContext(this_BindMulti)));
    setAndroidxRecyclerviewWidgetRecyclerViewAdapter(this_BindMulti, new class Anon extends RecyclerView.RecyclerView<> {
            public constructor() {
                super();
                ioReactivexDisposablesDisposableUntil(comLightningkiteKhrysalisObservablesObservablePropertySubscribeBy(data, undefined, undefined, (_) => this.notifyDataSetChanged()), getAndroidViewViewRemoved(this_BindMulti));
            }
            
            
            
            onCreateViewHolder(parent: ViewGroup, viewType: number): RecyclerView.ViewHolder{
                const subview = typeHandler.make(viewType);
                
                return new class Anon extends RecyclerView.RecyclerView {
                    public constructor() {
                        super(subview);
                    }
                }();
            }
            
            getItemViewType(position: number): number{
                return typeHandler.type(kotlinCollectionsListGetOrNull(data.value, position) ?: return typeHandler.typeCount);
            }
            getItemCount(): number{ return data.value.size; }
            
            onBindViewHolder(holder: RecyclerView.ViewHolder, position: number){
                (tryCastClass(getAndroidViewViewTag(holder.itemView), MutableObservableProperty))?.((it) => it.value = data.value[position])(this) ?: ((this_) => console.log("Failed to find property to update"))(this);
            }
    }());
}


//! Declares com.lightningkite.khrysalis.observables.binding.bindMulti
export function androidxRecyclerviewWidgetRecyclerViewBindMulti<T>(this_BindMulti: RecyclerView, data: ObservableProperty<Array<T>>, defaultValue: T, determineType: (a: T) => number, makeView: (a: number, b: ObservableProperty<T>) => View){
    setAndroidxRecyclerviewWidgetRecyclerViewLayoutManager(this_BindMulti, LinearLayoutManager.constructorandroidcontentContext(getAndroidxRecyclerviewWidgetRecyclerViewContext(this_BindMulti)));
    setAndroidxRecyclerviewWidgetRecyclerViewAdapter(this_BindMulti, new class Anon extends RecyclerView.RecyclerView<> {
            public constructor() {
                super();
                ioReactivexDisposablesDisposableUntil(comLightningkiteKhrysalisObservablesObservablePropertySubscribeBy(data, undefined, undefined, (_) => this.notifyDataSetChanged()), getAndroidViewViewRemoved(this_BindMulti));
            }
            
            
            
            getItemViewType(position: number): number{
                return this.determineType(data.value[position]);
            }
            
            onCreateViewHolder(parent: ViewGroup, viewType: number): RecyclerView.ViewHolder{
                const event = new StandardObservableProperty<T>(defaultValue, undefined);
                
                const subview = this.makeView(viewType, event);
                
                setAndroidViewViewTag(subview, event);
                setAndroidViewViewLayoutParams(subview, RecyclerView.LayoutParams.constructorkotlinInt, kotlinInt(MATCH_PARENT, WRAP_CONTENT));
                return new class Anon extends RecyclerView.RecyclerView {
                    public constructor() {
                        super(subview);
                    }
                }();
            }
            
            getItemCount(): number{ return data.value.size; }
            
            onBindViewHolder(holder: RecyclerView.ViewHolder, position: number){
                (tryCastClass(getAndroidViewViewTag(holder.itemView), StandardObservableProperty))?.((it) => it.value = data.value[position])(this) ?: ((this_) => console.log("Failed to find property to update"))(this);
            }
    }());
}


//! Declares com.lightningkite.khrysalis.observables.binding.bindRefresh
export function androidxRecyclerviewWidgetRecyclerViewBindRefresh(this_BindRefresh: RecyclerView, loading: ObservableProperty<Boolean>, refresh: () => void){
    (tryCastClass(getAndroidxRecyclerviewWidgetRecyclerViewParent(this_BindRefresh), SwipeRefreshLayout))?.((this_) => {
            ioReactivexDisposablesDisposableUntil(comLightningkiteKhrysalisObservablesObservablePropertySubscribeBy(loading, undefined, undefined, (value) => this_.post(() => setAndroidxSwiperefreshlayoutWidgetSwipeRefreshLayoutIsRefreshing(this_, value))), getAndroidViewViewRemoved(this_BindRefresh));
            setOnRefreshListener(() => this.refresh());
    })(this);
}


