// Generated by Khrysalis TypeScript converter - this file will be overwritten.
// File: observables/binding/RecyclerView.binding.actual.kt
// Package: com.lightningkite.khrysalis.observables.binding
import { newEmptyView } from './../../views/EmptyView.actual'
import { ObservableProperty } from './../ObservableProperty.shared'
import { ViewDependency } from './../../views/ViewDependency.actual'
import { RVTypeHandler } from './RecyclerView.binding.actual'

//! Declares com.lightningkite.khrysalis.observables.binding.whenScrolledToEnd
export function AndroidxRecyclerviewWidgetRecyclerViewWhenScrolledToEnd(this_WhenScrolledToEnd: RecyclerView, action: () => void){}

//! Declares com.lightningkite.khrysalis.observables.binding.reverseDirection
export function getAndroidxRecyclerviewWidgetRecyclerViewReverseDirection(this_ReverseDirection: RecyclerView): Boolean {}
export function setAndroidxRecyclerviewWidgetRecyclerViewReverseDirection(this_ReverseDirection1: RecyclerView, value: Boolean) {}



//! Declares com.lightningkite.khrysalis.observables.binding.bind
export function AndroidxRecyclerviewWidgetRecyclerViewBind<T>(this_Bind: RecyclerView, data: ObservableProperty<Array<T>>, defaultValue: T, makeView: (a: ObservableProperty<T>) => View){}

//! Declares com.lightningkite.khrysalis.observables.binding.RVTypeHandler
export class RVTypeHandler {
    public readonly viewDependency: ViewDependency;
    public constructor( viewDependency: ViewDependency) {
        this.viewDependency = viewDependency;
        this.typeCount = 0;
        this.handlers = [];
        this.defaultHandler = new Handler(Any::class, Unit.INSTANCE, (obs) => newEmptyView(this.viewDependency));
    }
    
    public static Handler = class Handler {
        public readonly type: KClass<*>;
        public readonly defaultValue: any;
        public readonly handler:  (a: ObservableProperty<any>) => View;
        public constructor( type: KClass<*>,  defaultValue: any,  handler:  (a: ObservableProperty<any>) => View) {
            this.type = type;
            this.defaultValue = defaultValue;
            this.handler = handler;
        }
    }
    internal _typeCount: number = 0;
    private set typeCount(value: number) {}
    
    private readonly handlers: Array<Handler> = [];
    
    private readonly defaultHandler: Handler = new Handler(Any::class, Unit.INSTANCE, (obs) => newEmptyView(this.viewDependency));
    
    
    public handle(type: KClass<*>, defaultValue: any, action:  (a: ObservableProperty<any>) => View ){}
    public handle<T extends any>(defaultValue: T, noinline action:  (a: ObservableProperty<T>) => View ){}
    
    internal type(item: any): number{}
    internal make(type: number): View{}
}

//! Declares com.lightningkite.khrysalis.observables.binding.bindMulti
export function AndroidxRecyclerviewWidgetRecyclerViewBindMulti(this_BindMulti: RecyclerView, viewDependency: ViewDependency, data: ObservableProperty<Array<any>>, typeHandlerSetup: (a: RVTypeHandler) => void){}


//! Declares com.lightningkite.khrysalis.observables.binding.bindMulti
export function AndroidxRecyclerviewWidgetRecyclerViewBindMulti<T>(this_BindMulti: RecyclerView, data: ObservableProperty<Array<T>>, defaultValue: T, determineType: (a: T) => number, makeView: (a: number, b: ObservableProperty<T>) => View){}


//! Declares com.lightningkite.khrysalis.observables.binding.bindRefresh
export function AndroidxRecyclerviewWidgetRecyclerViewBindRefresh(this_BindRefresh: RecyclerView, loading: ObservableProperty<Boolean>, refresh: () => void){}


