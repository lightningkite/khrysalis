// Generated by Khrysalis TypeScript converter - this file will be overwritten.
// File: observables/binding/RecyclerView.binding.actual.kt
// Package: com.lightningkite.khrysalis.observables.binding
// FQImport: com.lightningkite.khrysalis.observables.binding.RVTypeHandler.make.event TS event
// FQImport: androidx.recyclerview.widget.RecyclerView.ViewHolder TS ViewHolder
// FQImport: com.lightningkite.khrysalis.observables.binding.RVTypeHandler.viewDependency TS viewDependency
// FQImport: com.lightningkite.khrysalis.observables.binding.bind.<no name provided>.onBindViewHolder.holder TS holder
// FQImport: android.view.ViewGroup.LayoutParams.MATCH_PARENT TS MATCH_PARENT
// FQImport: androidx.swiperefreshlayout.widget.SwipeRefreshLayout.isRefreshing TS isRefreshing
// FQImport: androidx.recyclerview.widget.LinearLayoutManager.reverseLayout TS reverseLayout
// FQImport: com.lightningkite.khrysalis.rx.until>io.reactivex.disposables.Disposable TS ioReactivexDisposablesDisposableUntil
// FQImport: com.lightningkite.khrysalis.observables.binding.RVTypeHandler.type.<anonymous>.handler TS handler
// FQImport: com.lightningkite.khrysalis.observables.map>com.lightningkite.khrysalis.observables.ObservableProperty<kotlin.Any> TS comLightningkiteKhrysalisObservablesObservablePropertyMap
// FQImport: com.lightningkite.khrysalis.observables.binding.RVTypeHandler.defaultHandler TS defaultHandler
// FQImport: kotlin.Any TS Any
// FQImport: com.lightningkite.khrysalis.observables.binding.RVTypeHandler.make.handler TS handler
// FQImport: com.lightningkite.khrysalis.observables.binding.RVTypeHandler.make.type TS type
// FQImport: com.lightningkite.khrysalis.observables.StandardObservableProperty TS StandardObservableProperty
// FQImport: com.lightningkite.khrysalis.observables.binding.RVTypeHandler.handle.T TS T
// FQImport: com.lightningkite.khrysalis.observables.binding.bindMulti.<no name provided>.onCreateViewHolder.event TS event
// FQImport: com.lightningkite.khrysalis.observables.binding.bindRefresh.refresh TS refresh
// FQImport: com.lightningkite.khrysalis.observables.binding.bind.<no name provided>.notifyDataSetChanged TS notifyDataSetChanged
// FQImport: com.lightningkite.khrysalis.observables.binding.RVTypeHandler.Handler.handler TS handler
// FQImport: com.lightningkite.khrysalis.observables.binding.bind.<no name provided>.onBindViewHolder.<anonymous>.it TS it
// FQImport: androidx.recyclerview.widget.RecyclerView.ViewHolder.itemView TS itemView
// FQImport: com.lightningkite.khrysalis.observables.binding.bindMulti.data TS data
// FQImport: com.lightningkite.khrysalis.observables.binding.bind.defaultValue TS defaultValue
// FQImport: androidx.recyclerview.widget.RecyclerView.parent TS parent
// FQImport: com.lightningkite.khrysalis.observables.binding.bindMulti.viewDependency TS viewDependency
// FQImport: com.lightningkite.khrysalis.observables.binding.whenScrolledToEnd.<no name provided>.onScrolled.<anonymous>.it TS it
// FQImport: androidx.recyclerview.widget.LinearLayoutManager.findLastVisibleItemPosition TS findLastVisibleItemPosition
// FQImport: com.lightningkite.khrysalis.observables.binding.whenScrolledToEnd.action TS action
// FQImport: com.lightningkite.khrysalis.observables.binding.bindRefresh.<anonymous>.<anonymous>.value TS value
// FQImport: com.lightningkite.khrysalis.observables.binding.RVTypeHandler.Handler TS Handler
// FQImport: com.lightningkite.khrysalis.observables.binding.RVTypeHandler.type.<anonymous>.index TS index
// FQImport: androidx.recyclerview.widget.RecyclerView.adapter TS adapter
// FQImport: com.lightningkite.khrysalis.observables.binding.bindMulti.determineType TS determineType
// FQImport: androidx.recyclerview.widget.LinearLayoutManager TS LinearLayoutManager
// FQImport: com.lightningkite.khrysalis.observables.binding.bind.<no name provided>.onCreateViewHolder.event TS event
// FQImport: androidx.recyclerview.widget.RecyclerView.Adapter.itemCount TS itemCount
// FQImport: kotlin.collections.forEachIndexed>kotlin.collections.Iterable<kotlin.Any> TS kotlinCollectionsIterableForEachIndexed
// FQImport: com.lightningkite.khrysalis.observables.binding.RVTypeHandler SKIPPED due to same file
// FQImport: com.lightningkite.khrysalis.observables.binding.RVTypeHandler.Handler.defaultValue TS defaultValue
// FQImport: com.lightningkite.khrysalis.observables.binding.bindMulti.makeView TS makeView
// FQImport: kotlin.Unit TS Unit
// FQImport: com.lightningkite.khrysalis.observables.binding.RVTypeHandler.type.item TS item
// FQImport: com.lightningkite.khrysalis.observables.subscribeBy>com.lightningkite.khrysalis.observables.ObservableProperty<kotlin.Any> TS comLightningkiteKhrysalisObservablesObservablePropertySubscribeBy
// FQImport: com.lightningkite.khrysalis.observables.binding.bindMulti.<no name provided>.onBindViewHolder.holder TS holder
// FQImport: android.view.ViewGroup TS ViewGroup
// FQImport: com.lightningkite.khrysalis.observables.binding.RVTypeHandler.handlers TS handlers
// FQImport: com.lightningkite.khrysalis.observables.binding.RVTypeHandler.handle TS handle
// FQImport: com.lightningkite.khrysalis.observables.binding.RVTypeHandler.make TS make
// FQImport: com.lightningkite.khrysalis.observables.binding.bindMulti.<no name provided>.onCreateViewHolder.viewType TS viewType
// FQImport: com.lightningkite.khrysalis.observables.binding.bind.<no name provided>.onBindViewHolder.position TS position
// FQImport: androidx.recyclerview.widget.RecyclerView.context TS context
// FQImport: com.lightningkite.khrysalis.observables.binding.RVTypeHandler.Handler.type TS type
// FQImport: com.lightningkite.khrysalis.observables.binding.bindMulti.<no name provided>.onBindViewHolder.<anonymous>.it TS it
// FQImport: android.view.View.tag TS tag
// FQImport: com.lightningkite.khrysalis.observables.binding.RVTypeHandler.make.subview TS subview
// FQImport: com.lightningkite.khrysalis.observables.binding.RVTypeHandler.handle.defaultValue TS defaultValue
// FQImport: androidx.swiperefreshlayout.widget.SwipeRefreshLayout TS SwipeRefreshLayout
// FQImport: com.lightningkite.khrysalis.observables.binding.bindMulti.<no name provided>.onBindViewHolder.position TS position
// FQImport: android.view.ViewGroup.LayoutParams.WRAP_CONTENT TS WRAP_CONTENT
// FQImport: com.lightningkite.khrysalis.observables.binding.bindMulti.<no name provided>.onCreateViewHolder.subview TS subview
// FQImport: kotlin.collections.getOrNull>kotlin.collections.List<kotlin.Any> TS kotlinCollectionsListGetOrNull
// FQImport: com.lightningkite.khrysalis.observables.binding.bind.makeView TS makeView
// FQImport: androidx.recyclerview.widget.RecyclerView.addOnScrollListener TS addOnScrollListener
// FQImport: androidx.recyclerview.widget.RecyclerView TS RecyclerView
// FQImport: com.lightningkite.khrysalis.observables.binding.RVTypeHandler TS RVTypeHandler
// FQImport: com.lightningkite.khrysalis.observables.binding.<set-reverseDirection>.value TS value
// FQImport: com.lightningkite.khrysalis.rx.removed>android.view.View TS getAndroidViewViewRemoved
// FQImport: com.lightningkite.khrysalis.observables.binding.RVTypeHandler.handle.type TS type
// FQImport: com.lightningkite.khrysalis.observables.binding.RVTypeHandler.typeCount TS typeCount
// FQImport: com.lightningkite.khrysalis.observables.binding.bind.<no name provided>.onCreateViewHolder.subview TS subview
// FQImport: com.lightningkite.khrysalis.observables.MutableObservableProperty TS MutableObservableProperty
// FQImport: androidx.recyclerview.widget.RecyclerView.layoutManager TS layoutManager
// FQImport: com.lightningkite.khrysalis.views.newEmptyView TS newEmptyView
// FQImport: com.lightningkite.khrysalis.observables.binding.bind.data TS data
// FQImport: com.lightningkite.khrysalis.observables.MutableObservableProperty.value TS value
// FQImport: com.lightningkite.khrysalis.observables.binding.bindMulti.<no name provided>.notifyDataSetChanged TS notifyDataSetChanged
// FQImport: com.lightningkite.khrysalis.observables.binding.bindMulti.typeHandler TS typeHandler
// FQImport: com.lightningkite.khrysalis.observables.binding.bindMulti.typeHandlerSetup TS typeHandlerSetup
// FQImport: com.lightningkite.khrysalis.observables.binding.RVTypeHandler.handle.<anonymous>.<anonymous>.it TS it
// FQImport: android.view.View.layoutParams TS layoutParams
// FQImport: androidx.swiperefreshlayout.widget.SwipeRefreshLayout.setOnRefreshListener TS setOnRefreshListener
// FQImport: androidx.swiperefreshlayout.widget.SwipeRefreshLayout.post TS post
// FQImport: com.lightningkite.khrysalis.observables.binding.bindMulti.<no name provided>.getItemViewType.position TS position
// FQImport: com.lightningkite.khrysalis.observables.binding.bindRefresh.loading TS loading
// FQImport: com.lightningkite.khrysalis.observables.binding.RVTypeHandler.type TS type
// FQImport: com.lightningkite.khrysalis.observables.binding.bind.T TS T
// FQImport: com.lightningkite.khrysalis.observables.binding.RVTypeHandler.handle.action TS action
// FQImport: com.lightningkite.khrysalis.views.ViewDependency TS ViewDependency
// FQImport: kotlin.reflect.KClass TS KClass
// FQImport: com.lightningkite.khrysalis.observables.binding.bindMulti.T TS T
// FQImport: com.lightningkite.khrysalis.observables.binding.RVTypeHandler.handle.<anonymous>.obs TS obs
// FQImport: com.lightningkite.khrysalis.observables.ObservableProperty TS ObservableProperty
// FQImport: kotlin.reflect.KClass.isInstance TS isInstance
// FQImport: com.lightningkite.khrysalis.observables.StandardObservableProperty.value TS value
// FQImport: com.lightningkite.khrysalis.observables.binding.bindMulti.defaultValue TS defaultValue
// FQImport: com.lightningkite.khrysalis.observables.ObservableProperty.value TS value
import { comLightningkiteKhrysalisObservablesObservablePropertySubscribeBy } from './../ObservableProperty.ext.shared'
import { getAndroidViewViewRemoved, ioReactivexDisposablesDisposableUntil } from './../../rx/DisposeCondition.actual'
import { MutableObservableProperty } from './../MutableObservableProperty.shared'
import { newEmptyView } from './../../views/EmptyView.actual'
import { comLightningkiteKhrysalisObservablesObservablePropertyMap } from './../TransformedObservableProperty.shared'
import { StandardObservableProperty } from './../StandardObservableProperty.shared'
import { ObservableProperty } from './../ObservableProperty.shared'
import { ViewDependency } from './../../views/ViewDependency.actual'
import { also, tryCastClass } from 'Kotlin'

//! Declares com.lightningkite.khrysalis.observables.binding.whenScrolledToEnd>androidx.recyclerview.widget.RecyclerView
export function androidxRecyclerviewWidgetRecyclerViewWhenScrolledToEnd(this_: RecyclerView, action: () => void): void{
    this_.addOnScrollListener(new class Anon extends RecyclerView.RecyclerView {
            public constructor() {
                super();
            }
            
            onScrolled(recyclerView: RecyclerView, dx: number, dy: number): void{
                const temp346 = (tryCastClass<LinearLayoutManager>(this_.layoutManager, LinearLayoutManager));
                if(temp346 !== null) ((it) => {
                        if (it.findLastVisibleItemPosition() === ((_it)=>{
                                    if(_it === null) return null;
                                    return _it - 1
                        })(this_.adapter?.itemCount)) {
                            action();
                        }
                })(temp346);
            }
    }());
}

//! Declares com.lightningkite.khrysalis.observables.binding.reverseDirection>androidx.recyclerview.widget.RecyclerView
export function getAndroidxRecyclerviewWidgetRecyclerViewReverseDirection(this_: RecyclerView): boolean { return (tryCastClass<LinearLayoutManager>(this_.layoutManager, LinearLayoutManager))?.reverseLayout ?? false; }
export function setAndroidxRecyclerviewWidgetRecyclerViewReverseDirection(this_: RecyclerView, value: boolean) {
    const temp351 = (tryCastClass<LinearLayoutManager>(this_.layoutManager, LinearLayoutManager));
    if(temp351 !== null) temp351.reverseLayout = value;
}



//! Declares com.lightningkite.khrysalis.observables.binding.bind>androidx.recyclerview.widget.RecyclerView
export function androidxRecyclerviewWidgetRecyclerViewBind<T>(this_: RecyclerView, data: ObservableProperty<Array<T>>, defaultValue: T, makeView: (a: ObservableProperty<T>) => HTMLElement): void{
    this_.layoutManager = LinearLayoutManager.constructorandroidcontentContext(this_.context);
    this_.adapter = new class Anon extends RecyclerView.RecyclerView<> {
        public constructor() {
            super();
            ioReactivexDisposablesDisposableUntil(comLightningkiteKhrysalisObservablesObservablePropertySubscribeBy(data, undefined, undefined, (_) => {
                        this.notifyDataSetChanged()
            }), getAndroidViewViewRemoved(this_));
        }
        
        
        
        onCreateViewHolder(parent: ViewGroup, viewType: number): RecyclerView.ViewHolder{
            const event = new StandardObservableProperty<T>(defaultValue, undefined);
            
            const subview = makeView(event);
            
            subview.tag = event;
            subview.layoutParams = RecyclerView.LayoutParams.constructorkotlinInt, kotlinInt(MATCH_PARENT, WRAP_CONTENT);
            return new class Anon extends RecyclerView.RecyclerView {
                public constructor() {
                    super(subview);
                }
            }();
        }
        
        getItemCount(): number{ return data.value.length; }
        
        onBindViewHolder(holder: RecyclerView.ViewHolder, position: number): void{
            ((_it)=>{
                    if(_it === null) return null;
                    return ((it) => {
                            it.value = data.value[position]
                    })(_it)
            })((tryCastClass<StandardObservableProperty<T>>(holder.itemView.tag, StandardObservableProperty))) ?? ((this_1) => {
                    console.log("Failed to find property to update")
            })(this);
        }
    }();
}

//! Declares com.lightningkite.khrysalis.observables.binding.RVTypeHandler
export class RVTypeHandler {
    public readonly viewDependency: ViewDependency;
    public constructor(viewDependency: ViewDependency) {
        this.viewDependency = viewDependency;
        this.typeCount = 0;
        this.handlers = [];
        this.defaultHandler = new Handler(Any::class, Unit.INSTANCE, (obs) => newEmptyView(this.viewDependency));
    }
    
    public static Handler = class Handler {
        public readonly type: KClass<*>;
        public readonly defaultValue: any;
        public readonly handler:  (a: ObservableProperty<any>) => HTMLElement;
        public constructor(type: KClass<*>, defaultValue: any, handler:  (a: ObservableProperty<any>) => HTMLElement) {
            this.type = type;
            this.defaultValue = defaultValue;
            this.handler = handler;
        }
    }
    internal _typeCount: number;
    internal get typeCount(): number { return this._typeCount; }
    private set typeCount(value: number) 
    
    private readonly handlers: Array<Handler>;
    
    private readonly defaultHandler: Handler;
    
    
    public handle(type: KClass<*>, defaultValue: any, action:  (a: ObservableProperty<any>) => HTMLElement): number{
        this.handlers.kotlinCollectionsMutableCollectionPlusAssign(this.handlers, new Handler(type, defaultValue, action));
        return this.typeCount++;
    }
    public handle<T extends any>(T: any, defaultValue: T, action:  (a: ObservableProperty<T>) => HTMLElement): void{
        this.handle(T::class, defaultValue, (obs) => action(comLightningkiteKhrysalisObservablesObservablePropertyMap(obs, (it) => it as T)));
    }
    
    internal type(item: any): number{
        kotlinCollectionsIterableForEachIndexed(this.handlers, (index, handler) => {
                if (handler.type.isInstance(item)) {
                    return index;
                }
        });
        return this.typeCount;
    }
    internal make(type: number): HTMLElement{
        const handler = type < this.typeCount ? this.handlers[type] : this.defaultHandler;
        
        const event = new StandardObservableProperty<any>(handler.defaultValue, undefined);
        
        const subview = handler.handler(event);
        
        subview.tag = event;
        subview.layoutParams = RecyclerView.LayoutParams.constructorkotlinInt, kotlinInt(MATCH_PARENT, WRAP_CONTENT);
        return subview;
    }
}

//! Declares com.lightningkite.khrysalis.observables.binding.bindMulti>androidx.recyclerview.widget.RecyclerView
export function androidxRecyclerviewWidgetRecyclerViewBindMulti(this_: RecyclerView, viewDependency: ViewDependency, data: ObservableProperty<Array<any>>, typeHandlerSetup: (a: RVTypeHandler) => void): void{
    const typeHandler = also(new RVTypeHandler(viewDependency), typeHandlerSetup);
    
    this_.layoutManager = LinearLayoutManager.constructorandroidcontentContext(this_.context);
    this_.adapter = new class Anon extends RecyclerView.RecyclerView<> {
        public constructor() {
            super();
            ioReactivexDisposablesDisposableUntil(comLightningkiteKhrysalisObservablesObservablePropertySubscribeBy(data, undefined, undefined, (_) => {
                        this.notifyDataSetChanged()
            }), getAndroidViewViewRemoved(this_));
        }
        
        
        
        onCreateViewHolder(parent: ViewGroup, viewType: number): RecyclerView.ViewHolder{
            const subview = typeHandler.make(viewType);
            
            return new class Anon extends RecyclerView.RecyclerView {
                public constructor() {
                    super(subview);
                }
            }();
        }
        
        getItemViewType(position: number): number{
            return typeHandler.type(kotlinCollectionsListGetOrNull(data.value, position) ?? return typeHandler.typeCount);
        }
        getItemCount(): number{ return data.value.length; }
        
        onBindViewHolder(holder: RecyclerView.ViewHolder, position: number): void{
            ((_it)=>{
                    if(_it === null) return null;
                    return ((it) => {
                            it.value = data.value[position]
                    })(_it)
            })((tryCastClass<MutableObservableProperty<any>>(holder.itemView.tag, MutableObservableProperty))) ?? ((this_1) => {
                    console.log("Failed to find property to update")
            })(this);
        }
    }();
}


//! Declares com.lightningkite.khrysalis.observables.binding.bindMulti>androidx.recyclerview.widget.RecyclerView
export function androidxRecyclerviewWidgetRecyclerViewBindMulti<T>(this_: RecyclerView, data: ObservableProperty<Array<T>>, defaultValue: T, determineType: (a: T) => number, makeView: (a: number, b: ObservableProperty<T>) => HTMLElement): void{
    this_.layoutManager = LinearLayoutManager.constructorandroidcontentContext(this_.context);
    this_.adapter = new class Anon extends RecyclerView.RecyclerView<> {
        public constructor() {
            super();
            ioReactivexDisposablesDisposableUntil(comLightningkiteKhrysalisObservablesObservablePropertySubscribeBy(data, undefined, undefined, (_) => {
                        this.notifyDataSetChanged()
            }), getAndroidViewViewRemoved(this_));
        }
        
        
        
        getItemViewType(position: number): number{
            return determineType(data.value[position]);
        }
        
        onCreateViewHolder(parent: ViewGroup, viewType: number): RecyclerView.ViewHolder{
            const event = new StandardObservableProperty<T>(defaultValue, undefined);
            
            const subview = makeView(viewType, event);
            
            subview.tag = event;
            subview.layoutParams = RecyclerView.LayoutParams.constructorkotlinInt, kotlinInt(MATCH_PARENT, WRAP_CONTENT);
            return new class Anon extends RecyclerView.RecyclerView {
                public constructor() {
                    super(subview);
                }
            }();
        }
        
        getItemCount(): number{ return data.value.length; }
        
        onBindViewHolder(holder: RecyclerView.ViewHolder, position: number): void{
            ((_it)=>{
                    if(_it === null) return null;
                    return ((it) => {
                            it.value = data.value[position]
                    })(_it)
            })((tryCastClass<StandardObservableProperty<T>>(holder.itemView.tag, StandardObservableProperty))) ?? ((this_1) => {
                    console.log("Failed to find property to update")
            })(this);
        }
    }();
}


//! Declares com.lightningkite.khrysalis.observables.binding.bindRefresh>androidx.recyclerview.widget.RecyclerView
export function androidxRecyclerviewWidgetRecyclerViewBindRefresh(this_: RecyclerView, loading: ObservableProperty<boolean>, refresh: () => void): void{
    const temp372 = (tryCastClass<SwipeRefreshLayout>(this_.parent, SwipeRefreshLayout));
    if(temp372 !== null) ((this_1) => {
            ioReactivexDisposablesDisposableUntil(comLightningkiteKhrysalisObservablesObservablePropertySubscribeBy(loading, undefined, undefined, (value) => {
                        this_1.post(() => {
                                this_1.isRefreshing = value
                        })
            }), getAndroidViewViewRemoved(this_));
            this_1.setOnRefreshListener(() => {
                    refresh()
            });
    })(temp372);
}


