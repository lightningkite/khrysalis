// Generated by Khrysalis TypeScript converter - this file will be overwritten.
// File: observables/binding/serves.shared.kt
// Package: com.lightningkite.khrysalis.observables.binding
import { MutableObservableProperty } from './../MutableObservableProperty.shared'
import { IoReactivexObservableAddWeak } from './../../rx/RxAddAndRunWeak.shared'
import { IoReactivexDisposablesDisposableUntil } from './../../rx/DisposeCondition.actual'
import { getComLightningkiteKhrysalisObservablesObservablePropertyObservable } from './../ObservableProperty.ext.shared'
import { DisposeCondition } from './../../rx/DisposeCondition.shared'

//! Declares com.lightningkite.khrysalis.observables.binding.serves
export function ComLightningkiteKhrysalisObservablesMutableObservablePropertyServes<T>(this_Serves: MutableObservableProperty<T>, whilePresent: object, other: MutableObservableProperty<T>){
    
    let suppress = false;
    
    
    IoReactivexObservableAddWeak(getComLightningkiteKhrysalisObservablesObservablePropertyObservable(other), whilePresent, (ignored, value) => if (suppress.not()) {
            suppress = true;
            this_Serves.value = value.value;
            suppress = false;
    });
    
    return IoReactivexObservableAddWeak(this_Serves.onChange, whilePresent, (ignored, value) => if (suppress.not()) {
            suppress = true;
            other.value = value.value;
            suppress = false;
    });
}

//! Declares com.lightningkite.khrysalis.observables.binding.serves
export function ComLightningkiteKhrysalisObservablesMutableObservablePropertyServes<T>(this_Serves: MutableObservableProperty<T>, until: DisposeCondition, other: MutableObservableProperty<T>){
    
    let suppress = false;
    
    
    IoReactivexDisposablesDisposableUntil(getComLightningkiteKhrysalisObservablesObservablePropertyObservable(other).subscribe(undefined, (value) => if (suppress.not()) {
                suppress = true;
                this_Serves.value = value.value;
                suppress = false;
    }, undefined), until);
    
    return IoReactivexDisposablesDisposableUntil(this_Serves.onChange.subscribe(undefined, (value) => if (suppress.not()) {
                suppress = true;
                other.value = value.value;
                suppress = false;
    }, undefined), until);
}


