// Generated by Khrysalis TypeScript converter - this file will be overwritten.
// File: observables/binding/ImageView.binding.actual.kt
// Package: com.lightningkite.khrysalis.observables.binding
// FQImport: com.lightningkite.khrysalis.ImageRaw.raw TS raw
// FQImport: com.lightningkite.khrysalis.Image TS Image
// FQImport: com.squareup.picasso.RequestCreator.centerInside TS centerInside
// FQImport: android.widget.ImageView.post TS post
// FQImport: com.lightningkite.khrysalis.ImageReference TS ImageReference
// FQImport: contentResolver TS getAndroidContentContextContentResolver
// FQImport: android.provider.MediaStore.Images.Media.getBitmap TS getBitmap
// FQImport: width TS getAndroidWidgetImageViewWidth
// FQImport: com.lightningkite.khrysalis.observables.binding.bindImage.image TS image
// FQImport: com.lightningkite.khrysalis.net.HttpClient.appContext TS appContext
// FQImport: com.lightningkite.khrysalis.observables.binding.loadImage.<anonymous>.<anonymous>.image TS image
// FQImport: com.lightningkite.khrysalis.ImageReference.uri TS uri
// FQImport: com.squareup.picasso.Picasso TS Picasso
// FQImport: com.lightningkite.khrysalis.observables.subscribeBy TS comLightningkiteKhrysalisObservablesObservablePropertySubscribeBy
// FQImport: android.graphics.BitmapFactory.decodeByteArray TS decodeByteArray
// FQImport: com.lightningkite.khrysalis.observables.binding.loadImage SKIPPED due to same file
// FQImport: com.lightningkite.khrysalis.observables.binding.loadImage.image TS image
// FQImport: kotlin.ByteArray.size TS size
// FQImport: android.widget.ImageView.setImageDrawable TS setImageDrawable
// FQImport: com.lightningkite.khrysalis.rx.until TS ioReactivexDisposablesDisposableUntil
// FQImport: com.squareup.picasso.RequestCreator.resize TS resize
// FQImport: com.squareup.picasso.Picasso.get TS get
// FQImport: android.provider.MediaStore TS MediaStore
// FQImport: height TS getAndroidWidgetImageViewHeight
// FQImport: com.lightningkite.khrysalis.observables.ObservableProperty TS ObservableProperty
// FQImport: com.lightningkite.khrysalis.observables.binding.bindImage.<anonymous>.<anonymous>.it TS it
// FQImport: com.lightningkite.khrysalis.ImageRaw TS ImageRaw
// FQImport: android.widget.ImageView.setImageBitmap TS setImageBitmap
// FQImport: com.lightningkite.khrysalis.ImageBitmap TS ImageBitmap
// FQImport: com.lightningkite.khrysalis.ImageRemoteUrl TS ImageRemoteUrl
// FQImport: com.squareup.picasso.Picasso.load TS load
// FQImport: android.widget.ImageView TS ImageView
// FQImport: android.provider.MediaStore.Images TS Images
// FQImport: com.lightningkite.khrysalis.observables.binding.loadImage TS androidWidgetImageViewLoadImage
// FQImport: android.graphics.BitmapFactory TS BitmapFactory
// FQImport: com.lightningkite.khrysalis.ImageBitmap.bitmap TS bitmap
// FQImport: com.lightningkite.khrysalis.ImageRemoteUrl.url TS url
// FQImport: com.squareup.picasso.RequestCreator.into TS into
// FQImport: com.lightningkite.khrysalis.rx.removed TS getAndroidViewViewRemoved
// FQImport: android.provider.MediaStore.Images.Media TS Media
import { comLightningkiteKhrysalisObservablesObservablePropertySubscribeBy } from './../ObservableProperty.ext.shared'
import { Image, ImageBitmap, ImageRaw, ImageReference, ImageRemoteUrl } from './../../Image.shared'
import { getAndroidViewViewRemoved, ioReactivexDisposablesDisposableUntil } from './../../rx/DisposeCondition.actual'
import { ObservableProperty } from './../ObservableProperty.shared'
import { kotlinCharSequenceIsBlank } from 'khrysalis/dist/kotlin/kotlin.text'

//! Declares com.lightningkite.khrysalis.observables.binding.loadImage
export function androidWidgetImageViewLoadImage(this_LoadImage: ImageView, image: (Image | null)){
    return post(() => {
            image?.((image) => if(image instanceof ImageRaw){
                    this_LoadImage.setImageBitmap(BitmapFactory.decodeByteArray(image.raw, 0, image.raw.size))
                }else if(image instanceof ImageReference){
                    this_LoadImage.setImageBitmap(MediaStore.Images.Media.getBitmap(getAndroidContentContextContentResolver(HttpClient.INSTANCE.appContext), image.uri))
                }else if(image instanceof ImageBitmap){
                    this_LoadImage.setImageBitmap(image.bitmap)
                }else if(image instanceof ImageRemoteUrl){
                    if ( && getAndroidWidgetImageViewWidth(this_LoadImage) > 0 && getAndroidWidgetImageViewHeight(this_LoadImage) > 0) {
                        Picasso.get().load(image.url).resize(getAndroidWidgetImageViewWidth(this_LoadImage) * 2, getAndroidWidgetImageViewHeight(this_LoadImage) * 2).centerInside().into(this_LoadImage);
                    }
            })(this);
            if (image.equals(null)) {
                this_LoadImage.setImageDrawable(null);
            }
    });
}


//! Declares com.lightningkite.khrysalis.observables.binding.bindImage
export function androidWidgetImageViewBindImage(this_BindImage: ImageView, image: ObservableProperty<(Image | null)>){
    return post(() => ioReactivexDisposablesDisposableUntil(comLightningkiteKhrysalisObservablesObservablePropertySubscribeBy(image, undefined, undefined, (it) => androidWidgetImageViewLoadImage(this_BindImage, it)), getAndroidViewViewRemoved(this_BindImage)));
}

