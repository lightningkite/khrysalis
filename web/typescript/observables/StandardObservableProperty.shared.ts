// Generated by Khrysalis TypeScript converter - this file will be overwritten.
// File: observables/StandardObservableProperty.shared.kt
// Package: com.lightningkite.khrysalis.observables
// FQImport: com.lightningkite.khrysalis.observables.StandardObservableProperty.underlyingValue TS underlyingValue
// FQImport: com.lightningkite.khrysalis.observables.StandardObservableProperty.onChange TS onChange
// FQImport: com.lightningkite.khrysalis.observables.StandardObservableProperty.T TS T
// FQImport: io.reactivex.subjects.Subject TS Subject
// FQImport: io.reactivex.subjects.Subject.onNext TS onNext
// FQImport: io.reactivex.subjects.PublishSubject TS PublishSubject
// FQImport: io.reactivex.subjects.PublishSubject.create TS create
// FQImport: com.lightningkite.khrysalis.observables.StandardObservableProperty.value TS value
// FQImport: com.lightningkite.khrysalis.observables.StandardObservableProperty.<set-value>.value TS value
// FQImport: com.lightningkite.khrysalis.boxWrap TS boxWrap
// FQImport: com.lightningkite.khrysalis.observables.MutableObservableProperty TS MutableObservableProperty
// FQImport: com.lightningkite.khrysalis.Box TS Box
import { MutableObservableProperty } from './MutableObservableProperty.shared'

//! Declares com.lightningkite.khrysalis.observables.StandardObservableProperty
export class StandardObservableProperty<T> extends MutableObservableProperty<any> {
    public underlyingValue: T;
    public readonly onChange: Subject<Box<T>>;
    public constructor( underlyingValue: T, override  onChange: Subject<Box<T>> = PublishSubject.create()) {
        super();
        this.underlyingValue = underlyingValue;
        this.onChange = onChange;
    }
    
    //! Declares com.lightningkite.khrysalis.observables.StandardObservableProperty.value
    public get value(): T { return this.underlyingValue; }
    public set value(value: T) {
        this.underlyingValue = value;
        onChange.onNext(boxWrap(value));
    }
    
    
    public update(){
        onChange.onNext(boxWrap(this.value));
    }
}

