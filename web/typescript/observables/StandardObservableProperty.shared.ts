// Generated by Khrysalis TypeScript converter - this file will be overwritten.
// File: observables/StandardObservableProperty.shared.kt
// Package: com.lightningkite.khrysalis.observables
// FQImport: com.lightningkite.khrysalis.observables.StandardObservableProperty.underlyingValue TS underlyingValue
// FQImport: com.lightningkite.khrysalis.observables.StandardObservableProperty.onChange TS onChange
// FQImport: com.lightningkite.khrysalis.observables.StandardObservableProperty.T TS T
// FQImport: com.lightningkite.khrysalis.observables.StandardObservableProperty.value TS value
// FQImport: com.lightningkite.khrysalis.observables.StandardObservableProperty.<set-value>.value TS value
// FQImport: com.lightningkite.khrysalis.observables.MutableObservableProperty TS MutableObservableProperty
import { MutableObservableProperty } from './MutableObservableProperty.shared'
import { Subject } from 'rxjs'

//! Declares com.lightningkite.khrysalis.observables.StandardObservableProperty
export class StandardObservableProperty<T> extends MutableObservableProperty<any> {
    public underlyingValue: T;
    public readonly onChange: Subject<T>;
    public constructor(underlyingValue: T, onChange: Subject<T> = new Subject()) {
        super();
        this.underlyingValue = underlyingValue;
        this.onChange = onChange;
    }
    
    //! Declares com.lightningkite.khrysalis.observables.StandardObservableProperty.value
    public get value(): T { return this.underlyingValue; }
    public set value(value: T) {
        this.underlyingValue = value;
        this.onChange.next(value);
    }
    
    
    public update(): void {
        this.onChange.next(this.value);
    }
}

