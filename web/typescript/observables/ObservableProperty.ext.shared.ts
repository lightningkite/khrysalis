// Generated by Khrysalis TypeScript converter - this file will be overwritten.
// File: observables/ObservableProperty.ext.shared.kt
// Package: com.lightningkite.khrysalis.observables
import { ComLightningkiteKhrysalisObservablesObservablePropertyWithWrite } from './WriteAddedObservableProperty.shared'
import { ObservableProperty } from './ObservableProperty.shared'
import { getComLightningkiteKhrysalisObservablesObservablePropertyObservable } from './ObservableProperty.ext.shared'
import { IoReactivexObservableAddWeak } from './../rx/RxAddAndRunWeak.shared'
import { Box, boxWrap } from './../Box.actual'
import { Observable, SubscriptionLike } from 'rxjs'
import { ComLightningkiteKhrysalisObservablesObservablePropertyMap } from './TransformedObservableProperty.shared'
import { map } from 'rxjs/operators as rxMap'
import { MutableObservableProperty } from './MutableObservableProperty.shared'

//! Declares com.lightningkite.khrysalis.observables.observable
export function getComLightningkiteKhrysalisObservablesObservablePropertyObservable<T>(this_Observable: ObservableProperty<T>): Observable<Box<T>> { return onChange.startWith(boxWrap(this_Observable.value)); }

//! Declares com.lightningkite.khrysalis.observables.observableNN
export function getComLightningkiteKhrysalisObservablesObservablePropertyObservableNN<T>(this_ObservableNN: ObservableProperty<T>): Observable<T> { return rxMap((it) => it.value)(onChange.startWith(boxWrap(this_ObservableNN.value))); }

//! Declares com.lightningkite.khrysalis.observables.onChangeNN
export function getComLightningkiteKhrysalisObservablesObservablePropertyOnChangeNN<T>(this_OnChangeNN: ObservableProperty<T>): Observable<T> { return rxMap((it) => it.value)(onChange); }


//! Declares com.lightningkite.khrysalis.observables.subscribeBy
export function ComLightningkiteKhrysalisObservablesObservablePropertySubscribeBy<T>(this_SubscribeBy: ObservableProperty<T>, noinline onError:  (a: Throwable) => void = (it) => it.printStackTrace(), noinline onComplete:  () => void = () => {}, crossinline onNext:  (a: T) => void = (it) => {}): SubscriptionLike{ return getComLightningkiteKhrysalisObservablesObservablePropertyObservable(this_SubscribeBy).subscribe((boxed) => this.onNext(boxed.value), onError, onComplete); }

//! Declares com.lightningkite.khrysalis.observables.addAndRunWeak
export function ComLightningkiteKhrysalisObservablesObservablePropertyAddAndRunWeak<A extends object, T>(this_AddAndRunWeak: ObservableProperty<T>, referenceA: A, listener:  (a: A, b: T) => void): SubscriptionLike{ return IoReactivexObservableAddWeak(getComLightningkiteKhrysalisObservablesObservablePropertyObservable(this_AddAndRunWeak), referenceA, (a, value) => this.listener(
            a,
            value.value
)); }

//! Declares com.lightningkite.khrysalis.observables.addAndRunWeak
export function ComLightningkiteKhrysalisObservablesObservablePropertyAddAndRunWeak<A extends object, B extends object, T>(this_AddAndRunWeak: ObservableProperty<T>, referenceA: A, referenceB: B, listener:  (a: A, b: B, c: T) => void): SubscriptionLike{ return IoReactivexObservableAddWeak(getComLightningkiteKhrysalisObservablesObservablePropertyObservable(this_AddAndRunWeak), referenceA, referenceB, (a, b, value) => this.listener(
            a,
            b,
            value.value
)); }

//! Declares com.lightningkite.khrysalis.observables.addAndRunWeak
export function ComLightningkiteKhrysalisObservablesObservablePropertyAddAndRunWeak<A extends object, B extends object, C extends object, T>(this_AddAndRunWeak: ObservableProperty<T>, referenceA: A, referenceB: B, referenceC: C, listener:  (a: A, b: B, c: C, d: T) => void): SubscriptionLike{ return IoReactivexObservableAddWeak(getComLightningkiteKhrysalisObservablesObservablePropertyObservable(this_AddAndRunWeak), referenceA, referenceB, referenceC, (a, b, c, value) => this.listener(
            a,
            b,
            c,
            value.value
)); }

//! Declares com.lightningkite.khrysalis.observables.includes
export function includes<E>(collection: MutableObservableProperty<Set<E>>, element: E): MutableObservableProperty<Boolean>{
    return ComLightningkiteKhrysalisObservablesObservablePropertyWithWrite(ComLightningkiteKhrysalisObservablesObservablePropertyMap(collection, (it) => it.contains(element)), (it) => if (it) {
            collection.value = KotlinCollectionsSetPlus(collection.value, element);
        } else {
            collection.value = KotlinCollectionsSetMinus(collection.value, element);
    });
}

