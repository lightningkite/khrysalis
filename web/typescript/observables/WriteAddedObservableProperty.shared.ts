// Generated by Khrysalis TypeScript converter - this file will be overwritten.
// File: observables/WriteAddedObservableProperty.shared.kt
// Package: com.lightningkite.khrysalis.observables
import { ObservableProperty } from './ObservableProperty.shared'
import { WriteAddedObservableProperty } from './WriteAddedObservableProperty.shared'
import { Box } from './../Box.actual'
import { Observable } from 'rxjs'
import { MutableObservableProperty } from './MutableObservableProperty.shared'

//! Declares com.lightningkite.khrysalis.observables.WriteAddedObservableProperty
export class WriteAddedObservableProperty<A> extends MutableObservableProperty<any> {
    public readonly basedOn: ObservableProperty<A>;
    public readonly onWrite:  (a: A) => void;
    public constructor( basedOn: ObservableProperty<A>,  onWrite:  (a: A) => void) {
        super();
        this.basedOn = basedOn;
        this.onWrite = onWrite;
    }
    
    //! Declares com.lightningkite.khrysalis.observables.WriteAddedObservableProperty.value
    public get value(): A { return basedOn.value; }
    public set value(value: A) {
        this.onWrite(value);
    }
    
    //! Declares com.lightningkite.khrysalis.observables.WriteAddedObservableProperty.onChange
    public get onChange(): Observable<Box<A>> { return basedOn.onChange; }
    
    public update(){
        //Do nothing
    }
}

//! Declares com.lightningkite.khrysalis.observables.withWrite
export function ComLightningkiteKhrysalisObservablesObservablePropertyWithWrite<T>(this_WithWrite: ObservableProperty<T>, onWrite:  (a: T) => void): MutableObservableProperty<T>{
    return new WriteAddedObservableProperty<T>(this_WithWrite, onWrite);
}

