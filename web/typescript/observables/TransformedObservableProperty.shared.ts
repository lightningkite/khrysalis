// Generated by Khrysalis TypeScript converter - this file will be overwritten.
// File: observables/TransformedObservableProperty.shared.kt
// Package: com.lightningkite.khrysalis.observables
import { ObservableProperty } from './ObservableProperty.shared'
import { Box, boxWrap } from './../Box.actual'
import { Observable } from 'rxjs'
import { map } from 'rxjs/operators as rxMap'
import { TransformedObservableProperty } from './TransformedObservableProperty.shared'

//! Declares com.lightningkite.khrysalis.observables.TransformedObservableProperty
export class TransformedObservableProperty<A, B> extends ObservableProperty<any> {
    public readonly basedOn: ObservableProperty<A>;
    public readonly read:  (a: A) => B;
    public constructor( basedOn: ObservableProperty<A>,  read:  (a: A) => B) {
        super();
        this.basedOn = basedOn;
        this.read = read;
        this.onChange = rxMap((it) => boxWrap(this.read(it.value)))(basedOn.onChange);
    }
    
    //! Declares com.lightningkite.khrysalis.observables.TransformedObservableProperty.value
    public get value(): B { return {
            return this.read(basedOn.value);
    }; }{
        return this.read(basedOn.value);
    }
    
    public readonly onChange: Observable<Box<B>> = rxMap((it) => boxWrap(this.read(it.value)))(basedOn.onChange);
    
}

//! Declares com.lightningkite.khrysalis.observables.transformed
export function ComLightningkiteKhrysalisObservablesObservablePropertyTransformed<T, B>(this_Transformed: ObservableProperty<T>, read:  (a: T) => B): ObservableProperty<B>{
    return new TransformedObservableProperty<T, B>(this_Transformed, read);
}

//! Declares com.lightningkite.khrysalis.observables.map
export function ComLightningkiteKhrysalisObservablesObservablePropertyMap<T, B>(this_Map: ObservableProperty<T>, read:  (a: T) => B): ObservableProperty<B>{
    return new TransformedObservableProperty<T, B>(this_Map, read);
}

