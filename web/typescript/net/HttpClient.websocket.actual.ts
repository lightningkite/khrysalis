// Generated by Khrysalis TypeScript converter - this file will be overwritten.
// File: net/HttpClient.websocket.actual.kt
// Package: com.lightningkite.khrysalis.net
import { ConnectedWebSocket, WebSocketFrame } from './HttpClient.websocket.actual'
import { Data } from './../bytes/Data.actual'
import { Observable, SubscriptionLike } from 'rxjs'
import { HttpClient } from './HttpClient.actual'

//! Declares com.lightningkite.khrysalis.net.webSocket
export function ComLightningkiteKhrysalisNetHttpClientWebSocket(this_WebSocket: HttpClient, url: string, headers: Map<string, string> = new Map([])): Observable<ConnectedWebSocket>{}

//! Declares com.lightningkite.khrysalis.net.ConnectedWebSocket
export class ConnectedWebSocket extends WebSocketListener implements Observer<WebSocketFrame> {
    public static implementsInterfaceIoReactivexObserver = true;
    public readonly url: string;
    public constructor( url: string) {
        super();
        this.url = url;
        this.underlyingSocket = null;
        this._read = PublishSubject.create<WebSocketFrame>();
        this.ownConnection = PublishSubject.create<ConnectedWebSocket>();
        this.read = ((this_) => this_.IoReactivexObservableThreadCorrectly(_read))(HttpClient.INSTANCE);
    }
    
    internal underlyingSocket: (WebSocket | null) = null;
    
    private readonly _read = PublishSubject.create<WebSocketFrame>();
    
    public readonly ownConnection = PublishSubject.create<ConnectedWebSocket>();
    
    public readonly read: Observable<WebSocketFrame> = ((this_) => this_.IoReactivexObservableThreadCorrectly(_read))(HttpClient.INSTANCE);
    
    public onOpen(webSocket: WebSocket, response: Response){}
    
    public onFailure(webSocket: WebSocket, t: Throwable, response: (Response | null)){}
    
    public onClosing(webSocket: WebSocket, code: number, reason: string){}
    
    public onMessage(webSocket: WebSocket, text: string){}
    
    public onMessage(webSocket: WebSocket, bytes: ByteString){}
    
    public onClosed(webSocket: WebSocket, code: number, reason: string){}
    
    public onComplete(){}
    
    public onSubscribe(d: SubscriptionLike){}
    
    public onNext(t: WebSocketFrame){}
    
    public onError(e: Throwable){}
}

//! Declares com.lightningkite.khrysalis.net.WebSocketFrame
export class WebSocketFrame {
    public readonly binary: (Data | null);
    public readonly text: (string | null);
    public constructor( binary: (Data | null) = null,  text: (string | null) = null) {
        this.binary = binary;
        this.text = text;
    }
    
    public toString(): string{}
}

