// Generated by Khrysalis TypeScript converter - this file will be overwritten.
// File: net/HttpClient.actual.kt
// Package: com.lightningkite.khrysalis.net
import { TimeAlone } from './../time/TimeAlone.actual'
import { DateAlone } from './../time/DateAlone.actual'
import { HttpBody } from './HttpBody.actual'
import { HttpResponse } from './HttpResponse.actual'
import { Observable } from 'rxjs'
import { Image } from './../Image.shared'

//! Declares com.lightningkite.khrysalis.net.HttpClient
export class HttpClient {
    private constructor() {
        this._appContext = null;
        this.ioScheduler = null;
        this.responseScheduler = null;
        this.GET = "GET";
        this.POST = "POST";
        this.PUT = "PUT";
        this.PATCH = "PATCH";
        this.DELETE = "DELETE";
        this.client = OkHttpClient.Builder.constructor().build();
        this.mapper = ObjectMapper.constructor()
        .registerModule(new KotlinModule(undefined, undefined, undefined))
        .registerModule(SimpleModule.constructorkotlinString, comfasterxmljacksoncoreVersion, kotlincollectionsMutableMap, kotlincollectionsMutableList("EnumFix", Version.unknownVersion(), new Map([[getKotlinReflectKClassJava(TimeAlone::class), new class Anon extends StdDeserializer<any> {
                                public constructor() {
                                    super(
                                        getKotlinReflectKClassJava(TimeAlone::class)
                                    );
                                }
                                
                                deserialize(p: JsonParser, ctxt: DeserializationContext): (TimeAlone | null){}
                        }()], [getKotlinReflectKClassJava(DateAlone::class), new class Anon extends StdDeserializer<any> {
                                public constructor() {
                                    super(
                                        getKotlinReflectKClassJava(DateAlone::class)
                                    );
                                }
                                
                                deserialize(p: JsonParser, ctxt: DeserializationContext): (DateAlone | null){}
                }()]]), [new class Anon extends StdSerializer<any> {
                        public constructor() {
                            super(getKotlinReflectKClassJava(Enum::class));
                        }
                        
                        serialize(value: (Enum<*> | null), gen: JsonGenerator, provider: (SerializerProvider | null)){}
                    }(), new class Anon extends StdSerializer<any> {
                        public constructor() {
                            super(getKotlinReflectKClassJava(TimeAlone::class));
                        }
                        
                        serialize(value: (TimeAlone | null), gen: JsonGenerator, provider: (SerializerProvider | null)){}
                    }(), new class Anon extends StdSerializer<any> {
                        public constructor() {
                            super(getKotlinReflectKClassJava(DateAlone::class));
                        }
                        
                        serialize(value: (DateAlone | null), gen: JsonGenerator, provider: (SerializerProvider | null)){}
        }()]))
        .disable(DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES)
        .disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)
        .enable(MapperFeature.ACCEPT_CASE_INSENSITIVE_ENUMS)
        .disable(MapperFeature.AUTO_DETECT_IS_GETTERS)
        .enable(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE)
        .setPropertyNamingStrategy(PropertyNamingStrategy.SNAKE_CASE)
        .setDateFormat(StdDateFormat.constructor().withLenient(true));
        this.immediateMode = false;
    }
    public static INSTANCE = new HttpClient();
    
    
    private _appContext: (Context | null) = null;
    
    //! Declares com.lightningkite.khrysalis.net.HttpClient.appContext
    public get appContext(): Context { return this._appContext!!; }{}
    public set appContext(value: Context) {}
    
    
    public ioScheduler: (Scheduler | null) = null;
    
    public responseScheduler: (Scheduler | null) = null;
    
    IoReactivexSingleThreadCorrectly<T>(this_ThreadCorrectly: Observable<T>): Observable<T>{}
    IoReactivexObservableThreadCorrectly<T>(this_ThreadCorrectly: Observable<T>): Observable<T>{}
    
    public readonly GET = "GET";
    
    public readonly POST = "POST";
    
    public readonly PUT = "PUT";
    
    public readonly PATCH = "PATCH";
    
    public readonly DELETE = "DELETE";
    
    
    public readonly client = OkHttpClient.Builder.constructor().build();
    
    public readonly mapper = ObjectMapper.constructor()
    .registerModule(new KotlinModule(undefined, undefined, undefined))
    .registerModule(SimpleModule.constructorkotlinString, comfasterxmljacksoncoreVersion, kotlincollectionsMutableMap, kotlincollectionsMutableList("EnumFix", Version.unknownVersion(), new Map([[getKotlinReflectKClassJava(TimeAlone::class), new class Anon extends StdDeserializer<any> {
                            public constructor() {
                                super(
                                    getKotlinReflectKClassJava(TimeAlone::class)
                                );
                            }
                            
                            deserialize(p: JsonParser, ctxt: DeserializationContext): (TimeAlone | null){}
                    }()], [getKotlinReflectKClassJava(DateAlone::class), new class Anon extends StdDeserializer<any> {
                            public constructor() {
                                super(
                                    getKotlinReflectKClassJava(DateAlone::class)
                                );
                            }
                            
                            deserialize(p: JsonParser, ctxt: DeserializationContext): (DateAlone | null){}
            }()]]), [new class Anon extends StdSerializer<any> {
                    public constructor() {
                        super(getKotlinReflectKClassJava(Enum::class));
                    }
                    
                    serialize(value: (Enum<*> | null), gen: JsonGenerator, provider: (SerializerProvider | null)){}
                }(), new class Anon extends StdSerializer<any> {
                    public constructor() {
                        super(getKotlinReflectKClassJava(TimeAlone::class));
                    }
                    
                    serialize(value: (TimeAlone | null), gen: JsonGenerator, provider: (SerializerProvider | null)){}
                }(), new class Anon extends StdSerializer<any> {
                    public constructor() {
                        super(getKotlinReflectKClassJava(DateAlone::class));
                    }
                    
                    serialize(value: (DateAlone | null), gen: JsonGenerator, provider: (SerializerProvider | null)){}
    }()]))
    .disable(DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES)
    .disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)
    .enable(MapperFeature.ACCEPT_CASE_INSENSITIVE_ENUMS)
    .disable(MapperFeature.AUTO_DETECT_IS_GETTERS)
    .enable(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE)
    .setPropertyNamingStrategy(PropertyNamingStrategy.SNAKE_CASE)
    .setDateFormat(StdDateFormat.constructor().withLenient(true));
    
    
    call(
        url: string,
        method: string = HttpClient.INSTANCE.GET,
        headers: Map<string, string> = new Map([]),
        body: (HttpBody | null) = null
    ): Observable<HttpResponse>{}
    
    
    
    
    
    
    
    
    //YONDER LIES OLD CODE
    //Don't use these anymore.  Rx is better.
    
    
    
    
    public immediateMode = false;
    
    
    runResult(crossinline action: () => void){}
    
    Okhttp3CallGo(this_Go: Call, callback: Callback){}
    
    call<T extends any>(
        url: string,
        method: string,
        headers: Map<string, string>,
        body: (any | null) = null,
        crossinline onResult:  (code: number, result: (T | null), error: (string | null)) => void
    ){}
    
    callRaw(
        url: string,
        method: string,
        headers: Map<string, string>,
        body: (any | null) = null,
        crossinline onResult:  (code: number, result: (string | null), error: (string | null)) => void
    ){}
    
    callWithoutResult(
        url: string,
        method: string,
        headers: Map<string, string>,
        body: (any | null) = null,
        crossinline onResult:  (code: number, error: (string | null)) => void
    ){}
    
    uploadImageWithoutResult(
        url: string,
        method: string,
        headers: Map<string, string>,
        fieldName: string,
        image: Image,
        maxSize: number = 10_000_000,
        additionalFields: Map<string, string> = new Map([]),
        crossinline onResult:  (code: number, error: (string | null)) => void
    ){}
    
    
    uploadImage<T extends any>(
        url: string,
        method: string,
        headers: Map<string, string>,
        fieldName: string,
        image: Image,
        maxSize: number = 10_000_000,
        additionalFields: Map<string, string> = new Map([]),
        crossinline onResult:  (code: number, result: (T | null), error: (string | null)) => void
    ){}
}


