// Generated by Khrysalis TypeScript converter - this file will be overwritten.
// File: views/SelectDateMonthCVD.shared.kt
// Package: com.lightningkite.khrysalis.views
import { StandardObservableProperty } from './../observables/StandardObservableProperty.shared'
import { MutableObservableProperty } from './../observables/MutableObservableProperty.shared'
import { DateAlone } from './../time/DateAlone.actual'
import { MonthCVD } from './MonthCVD.shared'

//! Declares com.lightningkite.khrysalis.views.SelectDateMonthCVD
export class SelectDateMonthCVD extends MonthCVD {
    constructor() { super(); }
    public generateAccessibilityView(): (View | null){ return null; }
    
    public selected: MutableObservableProperty<(DateAlone | null)> = new StandardObservableProperty(null, undefined);
    
    
    
    
    public readonly selectedDayPaint: Paint = Paint.constructor();
    
    public readonly selectedPaint: Paint = Paint.constructor();
    
    
    public drawDay(
        canvas: Canvas,
        showingMonth: DateAlone,
        day: DateAlone,
        displayMetrics: DisplayMetrics,
        outer: RectF,
        inner: RectF
    ){
        if(day.equals(selected.value)){
            CalendarDrawing.INSTANCE.dayBackground(canvas, inner, this.selectedPaint);
            CalendarDrawing.INSTANCE.day(canvas, showingMonth, day, inner, this.selectedDayPaint);
        }else {
            CalendarDrawing.INSTANCE.day(canvas, showingMonth, day, inner, this.dayPaint);
        };
    }
    
    public measure(width: number, height: number, displayMetrics: DisplayMetrics){
        .measure(width, height, displayMetrics);
        setAndroidGraphicsPaintTextSize(selectedDayPaint, getAndroidGraphicsPaintTextSize(dayPaint));
    }
    
    public onTap(day: DateAlone){
        selected.value = day;
    }
}

