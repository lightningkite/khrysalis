// Generated by Khrysalis TypeScript converter - this file will be overwritten.
// File: views/Strings.shared.kt
// Package: com.lightningkite.khrysalis.views
import { ComLightningkiteKhrysalisAndroidActivityAccessGetString, ViewDependency } from './ViewDependency.actual'
import { ComLightningkiteKhrysalisViewsViewStringToDebugString, ViewString, ViewStringComplex, ViewStringList, ViewStringRaw, ViewStringResource, ViewStringTemplate } from './Strings.shared'
import { KotlinStringFormatList } from './../String.extensions.actual'
import { checkIsInterface, tryCastInterface } from 'khrysalis/dist/Kotlin'
import { StringResource } from './ResourceTypes.actual'

//! Declares com.lightningkite.khrysalis.views.ViewString
export interface ViewString {
    
    get(dependency: ViewDependency): string
}
export class ViewStringDefaults {
    public static get(this_Get: ViewString, dependency: ViewDependency){ return ; }
}

//! Declares com.lightningkite.khrysalis.views.ViewStringRaw
export class ViewStringRaw implements ViewString {
    public static implementsInterfaceComLightningkiteKhrysalisViewsViewString = true;
    public readonly string: string;
    public constructor( string: string) {
        this.string = string;
    }
    
    public get(dependency: ViewDependency): string{ return this.string; }
}

//! Declares com.lightningkite.khrysalis.views.ViewStringResource
export class ViewStringResource implements ViewString {
    public static implementsInterfaceComLightningkiteKhrysalisViewsViewString = true;
    public readonly resource: StringResource;
    public constructor( resource: StringResource) {
        this.resource = resource;
    }
    
    public get(dependency: ViewDependency): string{ return ComLightningkiteKhrysalisAndroidActivityAccessGetString(dependency, this.resource); }
}

//! Declares com.lightningkite.khrysalis.views.ViewStringTemplate
export class ViewStringTemplate implements ViewString {
    public static implementsInterfaceComLightningkiteKhrysalisViewsViewString = true;
    public readonly template: ViewString;
    public readonly arguments: Array<any>;
    public constructor( template: ViewString,  arguments: Array<any>) {
        this.template = template;
        this.arguments = arguments;
    }
    
    public get(dependency: ViewDependency): string{
        const templateResolved = template.get(dependency);
        
        const fixedArguments = arguments.map((it) => (tryCastInterface(it, "ComLightningkiteKhrysalisViewsViewString"))?.get(dependency) ?: it);
        
        return KotlinStringFormatList(templateResolved, fixedArguments);
    }
}

//! Declares com.lightningkite.khrysalis.views.ViewStringComplex
export class ViewStringComplex implements ViewString {
    public static implementsInterfaceComLightningkiteKhrysalisViewsViewString = true;
    public readonly getter:  (a: ViewDependency) => string;
    public constructor( getter:  (a: ViewDependency) => string) {
        this.getter = getter;
    }
    
    public get(dependency: ViewDependency): string{ return this.getter(dependency); }
}

//! Declares com.lightningkite.khrysalis.views.ViewStringList
export class ViewStringList implements ViewString {
    public static implementsInterfaceComLightningkiteKhrysalisViewsViewString = true;
    public readonly parts: Array<ViewString>;
    public readonly separator: string;
    public constructor( parts: Array<ViewString>,  separator: string = `\n`) {
        this.parts = parts;
        this.separator = separator;
    }
    
    public get(dependency: ViewDependency): string{
        return KotlinCollectionsIterableJoinToString(parts, this.separator, undefined, undefined, undefined, undefined, (it) => it.get(dependency));
    }
}

//! Declares com.lightningkite.khrysalis.views.joinToViewString
export function KotlinCollectionsListJoinToViewString(this_JoinToViewString: Array< ViewString>, separator: string = `\n`): ViewString{
    if(this_JoinToViewString.size === 1){
        return this_JoinToViewString[0];
    }
    return new ViewStringList(this_JoinToViewString, separator);
}

//! Declares com.lightningkite.khrysalis.views.toDebugString
export function ComLightningkiteKhrysalisViewsViewStringToDebugString(this_ToDebugString: ViewString): string{
    const thing = this_ToDebugString;
    
    if(thing instanceof ViewStringRaw){
        return thing.string
    }else if(thing instanceof ViewStringResource){
        return thing.resource.toString()
    }else if(thing instanceof ViewStringTemplate){
        return ComLightningkiteKhrysalisViewsViewStringToDebugString(thing.template) + "(" + KotlinCollectionsIterableJoinToString(thing.arguments, undefined, undefined, undefined, undefined, undefined, (it) => if(checkIsInterface(it, "ComLightningkiteKhrysalisViewsViewString"))
                return ComLightningkiteKhrysalisViewsViewStringToDebugString(it)
                else
        return `${it}`) + ")"
    }else if(thing instanceof ViewStringList){
        return KotlinCollectionsIterableJoinToString(thing.parts, thing.separator, undefined, undefined, undefined, undefined, (it) => ComLightningkiteKhrysalisViewsViewStringToDebugString(it))
    }else if(thing instanceof ViewStringComplex){
        return `<Complex string ${thing}>`
    }else {
        return "Unknown"
    };
}

