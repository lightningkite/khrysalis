// Generated by Khrysalis TypeScript converter - this file will be overwritten.
// File: views/draw/Canvas.actual.kt
// Package: com.lightningkite.khrysalis.views.draw
// FQImport: com.lightningkite.khrysalis.views.draw.drawText.x TS x
// FQImport: com.lightningkite.khrysalis.views.draw.textHeight TS getAndroidGraphicsPaintTextHeight
// FQImport: com.lightningkite.khrysalis.views.draw.drawText.textWidth TS textWidth
// FQImport: com.lightningkite.khrysalis.views.draw.drawText.paint TS paint
// FQImport: com.lightningkite.khrysalis.views.draw.drawBitmap.bitmap TS bitmap
// FQImport: com.lightningkite.khrysalis.views.draw.drawBitmap.top TS top
// FQImport: com.lightningkite.khrysalis.views.draw.drawTextCentered.textWidth TS textWidth
// FQImport: android.graphics.Canvas.drawBitmap TS drawBitmap
// FQImport: com.lightningkite.khrysalis.views.draw.drawTextCentered.centerY TS centerY
// FQImport: com.lightningkite.khrysalis.views.geometry.Align TS Align
// FQImport: com.lightningkite.khrysalis.views.geometry.Align.fill TS fill
// FQImport: android.graphics.Bitmap TS Bitmap
// FQImport: com.lightningkite.khrysalis.views.draw.tempRect SKIPPED due to same file
// FQImport: com.lightningkite.khrysalis.views.draw.tempRect TS getTempRect
// FQImport: android.graphics.RectF.top TS top
// FQImport: fontMetrics TS getAndroidGraphicsPaintFontMetrics
// FQImport: android.graphics.RectF.right TS right
// FQImport: com.lightningkite.khrysalis.views.geometry.AlignPair.horizontal TS horizontal
// FQImport: android.graphics.Paint.measureText TS measureText
// FQImport: com.lightningkite.khrysalis.views.geometry.Align.start TS start
// FQImport: android.graphics.RectF TS RectF
// FQImport: android.graphics.Paint.FontMetrics.descent TS descent
// FQImport: android.graphics.Canvas.drawText TS drawText
// FQImport: com.lightningkite.khrysalis.views.draw.drawTextCentered.textHeightOffset TS textHeightOffset
// FQImport: com.lightningkite.khrysalis.views.geometry.AlignPair TS AlignPair
// FQImport: com.lightningkite.khrysalis.views.draw.drawBitmap.right TS right
// FQImport: android.graphics.RectF.bottom TS bottom
// FQImport: com.lightningkite.khrysalis.views.geometry.Align.center TS center
// FQImport: android.graphics.Paint.FontMetrics.ascent TS ascent
// FQImport: com.lightningkite.khrysalis.views.draw.drawTextCentered.<anonymous>.it TS it
// FQImport: com.lightningkite.khrysalis.views.draw.drawText.text TS text
// FQImport: com.lightningkite.khrysalis.views.draw.drawBitmap.left TS left
// FQImport: com.lightningkite.khrysalis.views.geometry.AlignPair.vertical TS vertical
// FQImport: com.lightningkite.khrysalis.views.draw.drawTextCentered.paint TS paint
// FQImport: com.lightningkite.khrysalis.views.draw.drawText.y TS y
// FQImport: com.lightningkite.khrysalis.views.draw.drawText.<anonymous>.it TS it
// FQImport: com.lightningkite.khrysalis.views.draw.drawTextCentered.text TS text
// FQImport: android.graphics.Canvas TS Canvas
// FQImport: com.lightningkite.khrysalis.views.draw.drawText.gravity TS gravity
// FQImport: com.lightningkite.khrysalis.views.geometry.Align.end TS end
// FQImport: com.lightningkite.khrysalis.views.draw.drawTextCentered.centerX TS centerX
// FQImport: com.lightningkite.khrysalis.views.draw.drawBitmap.bottom TS bottom
// FQImport: android.graphics.Paint TS Paint
// FQImport: android.graphics.RectF.left TS left
import { Align, AlignPair } from './../geometry/Align.shared'
import { getAndroidGraphicsPaintTextHeight } from './Paint.actual'

//! Declares com.lightningkite.khrysalis.views.draw.drawTextCentered
export function androidGraphicsCanvasDrawTextCentered(this_: Canvas, text: string, centerX: number, centerY: number, paint: Paint): void{
    const textWidth = paint.measureText(text);
    
    const textHeightOffset = ((it) => it.ascent + it.descent)(getAndroidGraphicsPaintFontMetrics(paint)) / 2;
    
    this_.drawText(text, centerX - textWidth / 2, centerY - textHeightOffset, paint);
}
//! Declares com.lightningkite.khrysalis.views.draw.drawText
export function androidGraphicsCanvasDrawText(this_: Canvas, text: string, x: number, y: number, gravity: AlignPair, paint: Paint): void{
    const textWidth = paint.measureText(text);
    
    const textHeight = getAndroidGraphicsPaintTextHeight(paint);
    
    this_.drawText(text, (() => {switch(gravity.horizontal) {
                    case Align.start:
                    return x
                    break;
                    case Align.fill:
                    case Align.center:
                    return x - textWidth / 2
                    break;
                    case Align.end:
                    return x - textWidth
                    break;
                }
        })(), (() => {switch(gravity.vertical) {
                    case Align.start:
                    return y - getAndroidGraphicsPaintFontMetrics(paint).ascent
                    break;
                    case Align.fill:
                    case Align.center:
                    return y - ((it) => it.ascent + it.descent)(getAndroidGraphicsPaintFontMetrics(paint)) / 2
                    break;
                    case Align.end:
                    return y - getAndroidGraphicsPaintFontMetrics(paint).descent
                    break;
                }
    })(), paint);
}


//! Declares com.lightningkite.khrysalis.views.draw.tempRect
export let _tempRect: RectF = RectF.constructor();
export function getTempRect(): RectF { return _tempRect; }
export function setTempRect(value: RectF) { _tempRect = value; }

//! Declares com.lightningkite.khrysalis.views.draw.drawBitmap
export function androidGraphicsCanvasDrawBitmap(this_: Canvas, bitmap: Bitmap, left: number, top: number, right: number, bottom: number): void{
    getTempRect().left = left;
    getTempRect().top = top;
    getTempRect().right = right;
    getTempRect().bottom = bottom;
    this_.drawBitmap(bitmap, null, getTempRect(), null);
}


/*

CUSTOM DRAWING

- Custom view w/ touch interaction
- Calendar view custom callback - perhaps override on both sides, and it'd be OK?

MonthView - Can take custom renderer and touch handler
CalendarView - Can take MonthView generator, show specific months

*/

