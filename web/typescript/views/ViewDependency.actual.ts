// Generated by Khrysalis TypeScript converter - this file will be overwritten.
// File: views/ViewDependency.actual.kt
// Package: com.lightningkite.khrysalis.views
// FQImport: com.lightningkite.khrysalis.ImageReference TS ImageReference
// FQImport: androidx.core.content.FileProvider TS FileProvider
// FQImport: com.lightningkite.khrysalis.views.requestImagesGallery.callback TS callback
// FQImport: com.lightningkite.khrysalis.views.openUrl SKIPPED due to same file
// FQImport: com.lightningkite.khrysalis.views.downloadDrawable.width TS width
// FQImport: kotlin.ranges.coerceAtLeast TS kotlinIntCoerceAtLeast
// FQImport: com.lightningkite.khrysalis.views.requestImageCamera.<anonymous>.<anonymous>.code TS code
// FQImport: com.lightningkite.khrysalis.views.StringResource TS StringResource
// FQImport: com.lightningkite.khrysalis.views.requestImageGallery.<anonymous>.<anonymous>.uri TS uri
// FQImport: android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI TS EXTERNAL_CONTENT_URI
// FQImport: com.lightningkite.khrysalis.views.setSizeDrawable.scale TS scale
// FQImport: com.lightningkite.khrysalis.views.downloadDrawable.url TS url
// FQImport: android.provider.CalendarContract.Events TS Events
// FQImport: com.lightningkite.khrysalis.views.openEvent.location TS location
// FQImport: android.provider.CalendarContract.EXTRA_EVENT_END_TIME TS EXTRA_EVENT_END_TIME
// FQImport: java.io.File.createTempFile TS createTempFile
// FQImport: android.provider.CalendarContract.Events.DESCRIPTION TS DESCRIPTION
// FQImport: android.content.Intent.ACTION_GET_CONTENT TS ACTION_GET_CONTENT
// FQImport: kotlin.collections.joinToString TS kotlinCollectionsIterableJoinToString
// FQImport: com.lightningkite.khrysalis.views.openMap.zoom TS zoom
// FQImport: com.lightningkite.khrysalis.views.getColor.resource TS resource
// FQImport: android.Manifest TS Manifest
// FQImport: kotlin.ranges.until TS kotlinIntUntil
// FQImport: android.content.Intent TS Intent
// FQImport: android.content.pm.PackageManager.queryIntentActivities TS queryIntentActivities
// FQImport: com.lightningkite.khrysalis.views.openUrl.intent TS intent
// FQImport: android.Manifest.permission TS permission
// FQImport: com.lightningkite.khrysalis.views.openIosStore.numberId TS numberId
// FQImport: com.lightningkite.khrysalis.ImageRemoteUrl.url TS url
// FQImport: com.lightningkite.khrysalis.views.requestImageCamera.<anonymous>.it TS it
// FQImport: com.lightningkite.khrysalis.views.openEvent.start TS start
// FQImport: android.provider.CalendarContract.Events.EVENT_LOCATION TS EVENT_LOCATION
// FQImport: com.lightningkite.khrysalis.views.requestImageCamera.fileProviderAuthority TS fileProviderAuthority
// FQImport: com.lightningkite.khrysalis.views.requestImageGallery.<anonymous>.<anonymous>.result TS result
// FQImport: com.lightningkite.khrysalis.views.requestImagesGallery.<anonymous>.chooserIntent TS chooserIntent
// FQImport: com.lightningkite.khrysalis.location.GeoCoordinate.longitude TS longitude
// FQImport: com.lightningkite.khrysalis.views.setSizeDrawable.width TS width
// FQImport: com.lightningkite.khrysalis.views.openMap.label TS label
// FQImport: uri TS getAndroidContentClipDataItemUri
// FQImport: android.content.Intent.createChooser TS createChooser
// FQImport: android.content.pm.PackageManager TS PackageManager
// FQImport: android.graphics.Bitmap TS Bitmap
// FQImport: android.content.res.Resources.getColor TS getColor
// FQImport: com.lightningkite.khrysalis.views.openEvent.description TS description
// FQImport: com.squareup.picasso.Picasso TS Picasso
// FQImport: com.lightningkite.khrysalis.views.checkedDrawable.checked TS checked
// FQImport: com.lightningkite.khrysalis.views.share.message TS message
// FQImport: android.provider.CalendarContract TS CalendarContract
// FQImport: kotlin.collections.listOfNotNull TS listOfNotNull
// FQImport: com.lightningkite.khrysalis.views.requestImagesGallery.<anonymous>.<anonymous>.<anonymous>.<anonymous>.index TS index
// FQImport: com.lightningkite.khrysalis.views.requestImagesGallery.<anonymous>.getIntent TS getIntent
// FQImport: android.net.Uri.parse TS parse
// FQImport: com.lightningkite.khrysalis.views.requestImagesGallery.<anonymous>.<anonymous>.<anonymous>.it TS it
// FQImport: com.lightningkite.khrysalis.views.openAndroidAppOrStore.intent TS intent
// FQImport: android.graphics.drawable.StateListDrawable.addState TS addState
// FQImport: android.R.attr TS attr
// FQImport: com.lightningkite.khrysalis.views.openUrl.url TS url
// FQImport: com.lightningkite.khrysalis.android.ActivityAccess.requestPermission TS requestPermission
// FQImport: android.content.Intent.setType TS setType
// FQImport: com.lightningkite.khrysalis.views.requestImageGallery.<anonymous>.it TS it
// FQImport: com.lightningkite.khrysalis.views.requestImageCamera.<anonymous>.intent TS intent
// FQImport: android.graphics.drawable.StateListDrawable TS StateListDrawable
// FQImport: android.provider.MediaStore TS MediaStore
// FQImport: itemCount TS getAndroidContentClipDataItemCount
// FQImport: com.lightningkite.khrysalis.views.requestImageGallery.<anonymous>.pickIntent TS pickIntent
// FQImport: com.squareup.picasso.Picasso.load TS load
// FQImport: android.provider.MediaStore.Images TS Images
// FQImport: android.content.Intent.EXTRA_INITIAL_INTENTS TS EXTRA_INITIAL_INTENTS
// FQImport: android.content.Intent.ACTION_INSERT TS ACTION_INSERT
// FQImport: com.lightningkite.khrysalis.views.openUrl.mgr TS mgr
// FQImport: android.util.DisplayMetrics.density TS density
// FQImport: android.provider.CalendarContract.Events.TITLE TS TITLE
// FQImport: kotlin.arrayOf TS arrayOf
// FQImport: packageName TS getAndroidContentContextPackageName
// FQImport: resources TS getAndroidContentContextResources
// FQImport: clipData TS getAndroidContentIntentClipData
// FQImport: packageManager TS getAndroidContentContextPackageManager
// FQImport: time TS getJavaUtilDateTime
// FQImport: com.lightningkite.khrysalis.views.openAndroidAppOrStore.mgr TS mgr
// FQImport: kotlin.takeUnless TS kotlinAnyTakeUnless
// FQImport: com.lightningkite.khrysalis.android.ActivityAccess TS ActivityAccess
// FQImport: com.lightningkite.khrysalis.views.downloadDrawable.height TS height
// FQImport: com.squareup.picasso.RequestCreator.centerCrop TS centerCrop
// FQImport: type TS setAndroidContentIntentType
// FQImport: com.squareup.picasso.Target TS Target
// FQImport: com.lightningkite.khrysalis.ImageReference.uri TS uri
// FQImport: com.lightningkite.khrysalis.views.requestImagesGallery.<anonymous>.<anonymous>.code TS code
// FQImport: android.provider.CalendarContract.EXTRA_EVENT_BEGIN_TIME TS EXTRA_EVENT_BEGIN_TIME
// FQImport: com.lightningkite.khrysalis.views.ColorResource TS ColorResource
// FQImport: android.graphics.drawable.BitmapDrawable TS BitmapDrawable
// FQImport: android.R.attr.state_checked TS state_checked
// FQImport: com.lightningkite.khrysalis.views.setSizeDrawable.drawable TS drawable
// FQImport: data TS setAndroidContentIntentData
// FQImport: com.lightningkite.khrysalis.views.requestImagesGallery.<anonymous>.<anonymous>.result TS result
// FQImport: com.lightningkite.khrysalis.views.requestImageGallery.<anonymous>.getIntent TS getIntent
// FQImport: androidx.core.content.FileProvider.getUriForFile TS getUriForFile
// FQImport: com.lightningkite.khrysalis.location.GeoCoordinate.latitude TS latitude
// FQImport: com.lightningkite.khrysalis.android.ActivityAccess.context TS context
// FQImport: android.Manifest.permission.READ_EXTERNAL_STORAGE TS READ_EXTERNAL_STORAGE
// FQImport: kotlin.Exception TS Exception
// FQImport: android.util.DisplayMetrics TS DisplayMetrics
// FQImport: android.content.Intent.EXTRA_ALLOW_MULTIPLE TS EXTRA_ALLOW_MULTIPLE
// FQImport: android.app.Activity.RESULT_OK TS RESULT_OK
// FQImport: android.content.Context.getString TS getString
// FQImport: com.lightningkite.khrysalis.views.requestImagesGallery.<anonymous>.hasPermission TS hasPermission
// FQImport: android.content.pm.PackageManager.MATCH_DEFAULT_ONLY TS MATCH_DEFAULT_ONLY
// FQImport: com.squareup.picasso.RequestCreator.resize TS resize
// FQImport: android.provider.MediaStore.EXTRA_OUTPUT TS EXTRA_OUTPUT
// FQImport: android.content.Intent.ACTION_VIEW TS ACTION_VIEW
// FQImport: android.content.Intent.ACTION_SEND TS ACTION_SEND
// FQImport: com.lightningkite.khrysalis.views.share.<anonymous>.it TS it
// FQImport: com.lightningkite.khrysalis.views.checkedDrawable.normal TS normal
// FQImport: com.lightningkite.khrysalis.views.requestImageCamera.file TS file
// FQImport: android.content.Intent.putExtra TS putExtra
// FQImport: android.graphics.drawable.LayerDrawable TS LayerDrawable
// FQImport: android.Manifest.permission.CAMERA TS CAMERA
// FQImport: android.app.Activity TS Activity
// FQImport: com.lightningkite.khrysalis.views.openMap.coordinate TS coordinate
// FQImport: com.squareup.picasso.RequestCreator.into TS into
// FQImport: android.content.Intent.EXTRA_TEXT TS EXTRA_TEXT
// FQImport: com.lightningkite.khrysalis.views.requestImagesGallery.<anonymous>.<anonymous>.<anonymous>.clipData TS clipData
// FQImport: com.lightningkite.khrysalis.views.downloadDrawable.<no name provided>.onBitmapLoaded.bitmap TS bitmap
// FQImport: com.lightningkite.khrysalis.views.openAndroidAppOrStore.packageName TS packageName
// FQImport: com.lightningkite.khrysalis.views.requestImagesGallery.<anonymous>.pickIntent TS pickIntent
// FQImport: android.content.Context.startActivity TS startActivity
// FQImport: android.provider.MediaStore.Images.Media TS Media
// FQImport: java.io.File TS File
// FQImport: java.util.Date TS Date
// FQImport: com.lightningkite.khrysalis.Image TS Image
// FQImport: kotlin.Boolean TS Boolean
// FQImport: com.lightningkite.khrysalis.views.openUrl TS comLightningkiteKhrysalisAndroidActivityAccessOpenUrl
// FQImport: com.lightningkite.khrysalis.views.requestImageGallery.<anonymous>.chooserIntent TS chooserIntent
// FQImport: com.lightningkite.khrysalis.views.requestImageGallery.<anonymous>.<anonymous>.code TS code
// FQImport: com.squareup.picasso.Picasso.LoadedFrom TS LoadedFrom
// FQImport: com.lightningkite.khrysalis.views.requestImageCamera.front TS front
// FQImport: com.lightningkite.khrysalis.views.downloadDrawable.<anonymous>.it TS it
// FQImport: com.lightningkite.khrysalis.views.requestImageGallery.callback TS callback
// FQImport: android.graphics.drawable.Drawable TS Drawable
// FQImport: com.lightningkite.khrysalis.views.openUrl.list TS list
// FQImport: com.lightningkite.khrysalis.views.openEvent.title TS title
// FQImport: com.lightningkite.khrysalis.views.openEvent.end TS end
// FQImport: android.provider.MediaStore.ACTION_IMAGE_CAPTURE TS ACTION_IMAGE_CAPTURE
// FQImport: cacheDir TS getAndroidContentContextCacheDir
// FQImport: android.content.ClipData.getItemAt TS getItemAt
// FQImport: com.lightningkite.khrysalis.Uri TS Uri
// FQImport: kotlin.collections.MutableList.size TS size
// FQImport: android.content.pm.PackageManager.getLaunchIntentForPackage TS getLaunchIntentForPackage
// FQImport: com.lightningkite.khrysalis.views.share.i TS i
// FQImport: android.content.Intent.ACTION_PICK TS ACTION_PICK
// FQImport: com.lightningkite.khrysalis.views.downloadDrawable.onResult TS onResult
// FQImport: android.content.Intent.EXTRA_STREAM TS EXTRA_STREAM
// FQImport: com.lightningkite.khrysalis.views.share.image TS image
// FQImport: android.provider.CalendarContract.Events.CONTENT_URI TS CONTENT_URI
// FQImport: com.lightningkite.khrysalis.views.setSizeDrawable.height TS height
// FQImport: com.lightningkite.khrysalis.views.share.shareTitle TS shareTitle
// FQImport: android.net.Uri.encode TS encode
// FQImport: com.lightningkite.khrysalis.views.ViewDependency TS ViewDependency
// FQImport: com.squareup.picasso.Picasso.get TS get
// FQImport: kotlin.intArrayOf TS intArrayOf
// FQImport: com.lightningkite.khrysalis.location.GeoCoordinate TS GeoCoordinate
// FQImport: com.lightningkite.khrysalis.views.requestImageCamera.<anonymous>.<anonymous>.result TS result
// FQImport: data TS getAndroidContentIntentData
// FQImport: com.lightningkite.khrysalis.views.getString.resource TS resource
// FQImport: com.lightningkite.khrysalis.views.ViewDependency SKIPPED due to same file
// FQImport: com.lightningkite.khrysalis.ImageRemoteUrl TS ImageRemoteUrl
// FQImport: android TS android
// FQImport: com.lightningkite.khrysalis.views.requestImageCamera.callback TS callback
// FQImport: displayMetrics TS getAndroidContentResResourcesDisplayMetrics
// FQImport: java.io.File.mkdirs TS mkdirs
// FQImport: android.R TS R
// FQImport: com.lightningkite.khrysalis.views.android.startIntent TS comLightningkiteKhrysalisAndroidActivityAccessStartIntent
import { ColorResource, StringResource } from './ResourceTypes.actual'
import { Image, ImageReference, ImageRemoteUrl } from './../Image.shared'
import { GeoCoordinate } from './../location/GeoCoordinate.shared'
import { also } from 'khrysalis/dist/Kotlin'

//! Declares com.lightningkite.khrysalis.views.ViewDependency
export type ViewDependency = ActivityAccess;
//! Declares com.lightningkite.khrysalis.views.ViewDependency
export let ViewDependency = ActivityAccess;


//! Declares com.lightningkite.khrysalis.views.getString
export function comLightningkiteKhrysalisAndroidActivityAccessGetString(this_GetString: ViewDependency, resource: StringResource): string{ return context.getString(resource); }
//! Declares com.lightningkite.khrysalis.views.getColor
export function comLightningkiteKhrysalisAndroidActivityAccessGetColor(this_GetColor: ViewDependency, resource: ColorResource): number{ return getAndroidContentContextResources(context).getColor(resource); }
//! Declares com.lightningkite.khrysalis.views.displayMetrics
export function getComLightningkiteKhrysalisAndroidActivityAccessDisplayMetrics(this_DisplayMetrics: ViewDependency): DisplayMetrics { return getAndroidContentResResourcesDisplayMetrics(getAndroidContentContextResources(context)); }


//! Declares com.lightningkite.khrysalis.views.share
export function comLightningkiteKhrysalisAndroidActivityAccessShare(this_Share: ViewDependency, shareTitle: string, message: (string | null) = null, url: (string | null) = null, image: (Image | null) = null){
    const i = Intent.constructorkotlinString(Intent.ACTION_SEND);
    
    setAndroidContentIntentType(i, "text/plain");
    kotlinAnyTakeUnless(kotlinCollectionsIterableJoinToString(listOfNotNull(message), `\n`, undefined, undefined, undefined, undefined, undefined), (it) => it === null)?.((it) => i.putExtra(Intent.EXTRA_TEXT, it))(this);
    if (!(image.equals(null))) {
        return if(image instanceof ImageReference){
            i.setType("image/jpeg");
            return i.putExtra(Intent.EXTRA_STREAM, image.uri);
        }else if(image instanceof ImageRemoteUrl){
            i.setType("image/jpeg");
            return i.putExtra(Intent.EXTRA_STREAM, Uri.parse(image.url));
        };
    }
    context.startActivity(Intent.createChooser(i, shareTitle));
}

//! Declares com.lightningkite.khrysalis.views.openUrl
export function comLightningkiteKhrysalisAndroidActivityAccessOpenUrl(this_OpenUrl: ViewDependency, url: string): Boolean{
    const mgr = getAndroidContentContextPackageManager(context);
    
    const intent = also(Intent.constructorkotlinString(Intent.ACTION_VIEW), (this_) => setAndroidContentIntentData(this_, Uri.parse(url)));
    
    const list = mgr.queryIntentActivities(intent, PackageManager.MATCH_DEFAULT_ONLY);
    
    return (() => {if (list.size > 0) {
                comLightningkiteKhrysalisAndroidActivityAccessStartIntent(intent, undefined, undefined);
                return true;
            } else {
                return false;
    }})();
}

//! Declares com.lightningkite.khrysalis.views.openAndroidAppOrStore
export function comLightningkiteKhrysalisAndroidActivityAccessOpenAndroidAppOrStore(this_OpenAndroidAppOrStore: ViewDependency, packageName: string){
    const mgr = getAndroidContentContextPackageManager(context);
    
    const intent = mgr.getLaunchIntentForPackage(packageName);
    
    return if (!(intent.equals(null))) {
        comLightningkiteKhrysalisAndroidActivityAccessStartIntent(intent, undefined, undefined);
    } else {
        return comLightningkiteKhrysalisAndroidActivityAccessOpenUrl(`market://details?id=${packageName}`);
    }
}

//! Declares com.lightningkite.khrysalis.views.openIosStore
export function comLightningkiteKhrysalisAndroidActivityAccessOpenIosStore(this_OpenIosStore: ViewDependency, numberId: string){
    return comLightningkiteKhrysalisAndroidActivityAccessOpenUrl(`https://apps.apple.com/us/app/taxbot/id${numberId}`);
}

//! Declares com.lightningkite.khrysalis.views.openMap
export function comLightningkiteKhrysalisAndroidActivityAccessOpenMap(this_OpenMap: ViewDependency, coordinate: GeoCoordinate, label: (string | null) = null, zoom: (number | null) = null){
    comLightningkiteKhrysalisAndroidActivityAccessStartIntent(also(Intent.constructorkotlinString(Intent.ACTION_VIEW), (this_) => if (label === null) {
                if (zoom === null) {
                    setAndroidContentIntentData(this_, Uri.parse(`geo:${coordinate.latitude},${coordinate.longitude}`));
                } else {
                    setAndroidContentIntentData(this_, Uri.parse(`geo:${coordinate.latitude},${coordinate.longitude}?z=${zoom}`));
                }
            } else {
                if (zoom === null) {
                    setAndroidContentIntentData(this_, Uri.parse(`geo:${coordinate.latitude},${coordinate.longitude}?q=${Uri.encode(label)}`));
                } else {
                    setAndroidContentIntentData(this_, Uri.parse(`geo:${coordinate.latitude},${coordinate.longitude}?q=${Uri.encode(label)}&z=${zoom}`));
                }
    }), undefined, undefined);
}

//! Declares com.lightningkite.khrysalis.views.openEvent
export function comLightningkiteKhrysalisAndroidActivityAccessOpenEvent(this_OpenEvent: ViewDependency, title: string, description: string, location: string, start: Date, end: Date){
    comLightningkiteKhrysalisAndroidActivityAccessStartIntent(also(Intent.constructorkotlinString(Intent.ACTION_INSERT), (this_) => {
                setAndroidContentIntentData(this_, CalendarContract.Events.CONTENT_URI);
                putExtra(CalendarContract.Events.TITLE, title);
                putExtra(CalendarContract.Events.DESCRIPTION, description);
                putExtra(CalendarContract.EXTRA_EVENT_BEGIN_TIME, getJavaUtilDateTime(start));
                putExtra(CalendarContract.EXTRA_EVENT_END_TIME, getJavaUtilDateTime(end));
                putExtra(CalendarContract.Events.EVENT_LOCATION, location);
    }), undefined, undefined);
}

//! Declares com.lightningkite.khrysalis.views.requestImagesGallery
export function comLightningkiteKhrysalisAndroidActivityAccessRequestImagesGallery(this_RequestImagesGallery: ViewDependency, callback: (a: Array<Uri>) => void){
    requestPermission(Manifest.permission.READ_EXTERNAL_STORAGE, (hasPermission) => if (hasPermission) {
            const getIntent = Intent.constructorkotlinString(Intent.ACTION_GET_CONTENT);
            
            setAndroidContentIntentType(getIntent, "image/*");
            getIntent.putExtra(Intent.EXTRA_ALLOW_MULTIPLE, true);
            
            const pickIntent = Intent.constructorkotlinString, androidnetUri(Intent.ACTION_PICK, MediaStore.Images.Media.EXTERNAL_CONTENT_URI);
            
            setAndroidContentIntentType(pickIntent, "image/*");
            
            const chooserIntent = Intent.createChooser(getIntent, "Select Image");
            
            chooserIntent.putExtra(Intent.EXTRA_INITIAL_INTENTS, arrayOf(pickIntent));
            
            comLightningkiteKhrysalisAndroidActivityAccessStartIntent(this_RequestImagesGallery, chooserIntent, undefined, (code, result) => if (code === Activity.RESULT_OK) {
                    result?.getAndroidContentIntentClipData(this)?.((clipData) => this.callback((kotlinIntUntil(0, getAndroidContentClipDataItemCount(clipData))).map((index) => getAndroidContentClipDataItemUri(clipData.getItemAt(index)))))(this) ?: result?.getAndroidContentIntentData(this)?.((it) => this.callback([it]))(this);
            });
    });
}

//! Declares com.lightningkite.khrysalis.views.requestImageGallery
export function comLightningkiteKhrysalisAndroidActivityAccessRequestImageGallery(this_RequestImageGallery: ViewDependency, callback: (a: Uri) => void){
    requestPermission(Manifest.permission.READ_EXTERNAL_STORAGE, (it) => if (it) {
            const getIntent = Intent.constructorkotlinString(Intent.ACTION_GET_CONTENT);
            
            setAndroidContentIntentType(getIntent, "image/*");
            
            const pickIntent = Intent.constructorkotlinString, androidnetUri(Intent.ACTION_PICK, MediaStore.Images.Media.EXTERNAL_CONTENT_URI);
            
            setAndroidContentIntentType(pickIntent, "image/*");
            
            const chooserIntent = Intent.createChooser(getIntent, "Select Image");
            
            chooserIntent.putExtra(Intent.EXTRA_INITIAL_INTENTS, arrayOf(pickIntent));
            
            comLightningkiteKhrysalisAndroidActivityAccessStartIntent(this_RequestImageGallery, chooserIntent, undefined, (code, result) => {
                    const uri = result?.getAndroidContentIntentData(this);
                    
                    if (code === Activity.RESULT_OK && !(uri.equals(null))) {
                        this.callback(uri);
                    }
            });
    });
}

//! Declares com.lightningkite.khrysalis.views.requestImageCamera
export function comLightningkiteKhrysalisAndroidActivityAccessRequestImageCamera(this_RequestImageCamera: ViewDependency, front: Boolean = false, callback: (a: Uri) => void){
    const fileProviderAuthority = getAndroidContentContextPackageName(context) + ".fileprovider";
    
    const file = ((it) => FileProvider.getUriForFile(this_RequestImageCamera.context, fileProviderAuthority, it))(((it) => File.createTempFile("image", ".jpg", it))(also(File.constructorjavaioFile, kotlinString(getAndroidContentContextCacheDir(context), "images"), (it) => it.mkdirs())));
    
    requestPermission(Manifest.permission.CAMERA, (it) => if (it) {
            const intent = Intent.constructorkotlinString(MediaStore.ACTION_IMAGE_CAPTURE);
            
            intent.putExtra(MediaStore.EXTRA_OUTPUT, file);
            //TODO:Test this on an older device. This works on newest, but we need to make sure it works/doesn't crash a newer one.
            if (front) {
                //                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP_MR1) {
                    
                    intent.putExtra("android.intent.extras.LENS_FACING_FRONT", 1);
                //                }else{
                    intent.putExtra("android.intent.extras.CAMERA_FACING", 1);
                    
                //                }
                return intent.putExtra("android.intent.extra.USE_FRONT_CAMERA", true);
            }
            comLightningkiteKhrysalisAndroidActivityAccessStartIntent(intent, undefined, (code, result) => code === Activity.RESULT_OK ? this.callback(result?.getAndroidContentIntentData(this) ?: file) : );
    });
}


//! Declares com.lightningkite.khrysalis.views.downloadDrawable
export function comLightningkiteKhrysalisAndroidActivityAccessDownloadDrawable(this_DownloadDrawable: ViewDependency, url: string, width: (number | null) = null, height: (number | null) = null, onResult: (a: (Drawable | null)) => void){
    ((it) => width === null || height === null ? it : it.resize(kotlinIntCoerceAtLeast(width, 100), kotlinIntCoerceAtLeast(height, 100)).centerCrop())(Picasso.get()
    .load(url))
    .into(new class Anon implements Target {
            public static implementsInterfaceComSquareupPicassoTarget = true;
            public constructor() {
            }
            
            onPrepareLoad(placeHolderDrawable: (Drawable | null)){}
            
            onBitmapFailed(e: (Exception | null), errorDrawable: (Drawable | null)){
                this.onResult(null);
            }
            
            onBitmapLoaded(bitmap: (Bitmap | null), from: (Picasso.LoadedFrom | null)){
                this.onResult(BitmapDrawable.constructorandroidgraphicsBitmap(bitmap));
            }
    }());
}

//! Declares com.lightningkite.khrysalis.views.checkedDrawable
export function comLightningkiteKhrysalisAndroidActivityAccessCheckedDrawable(this_CheckedDrawable: ViewDependency, checked: Drawable, normal: Drawable){ return also(StateListDrawable.constructor(), (this_) => {
            addState(intArrayOf(android.R.attr.state_checked), checked);
            addState(intArrayOf(undefined), normal);
}); }

//! Declares com.lightningkite.khrysalis.views.setSizeDrawable
export function comLightningkiteKhrysalisAndroidActivityAccessSetSizeDrawable(this_SetSizeDrawable: ViewDependency, drawable: Drawable, width: number, height: number): Drawable{
    const scale = getAndroidContentResResourcesDisplayMetrics(getAndroidContentContextResources(context)).density;
    
    return new class Anon extends LayerDrawable {
        public constructor() {
            super(arrayOf(drawable));
        }
        
        getIntrinsicWidth(): number{ return Math.floor((width * scale)); }
        getIntrinsicHeight(): number{ return Math.floor((height * scale)); }
    }();
}

