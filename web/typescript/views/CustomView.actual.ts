// Generated by Khrysalis TypeScript converter - this file will be overwritten.
// File: views/CustomView.actual.kt
// Package: com.lightningkite.khrysalis.views
// FQImport: com.lightningkite.khrysalis.views.CustomViewDelegate.onTouchUp TS onTouchUp
// FQImport: java.util.HashMap TS HashMap
// FQImport: com.lightningkite.khrysalis.views.CustomViewDelegate.customView TS customView
// FQImport: android.content.Context.ACCESSIBILITY_SERVICE TS ACCESSIBILITY_SERVICE
// FQImport: com.lightningkite.khrysalis.R.styleable TS styleable
// FQImport: android.util.AttributeSet TS AttributeSet
// FQImport: android.view.MotionEvent.getPointerId TS getPointerId
// FQImport: com.lightningkite.khrysalis.views.CustomView.onMeasure.height TS height
// FQImport: android.view.View.MeasureSpec.getSize TS getSize
// FQImport: com.lightningkite.khrysalis.views.CustomView.<init>.a TS a
// FQImport: java.lang.ClassNotFoundException TS ClassNotFoundException
// FQImport: android.view.accessibility.AccessibilityManager TS AccessibilityManager
// FQImport: com.lightningkite.khrysalis.R.styleable.CustomView_delegateClass TS CustomView_delegateClass
// FQImport: height TS getComLightningkiteKhrysalisViewsCustomViewHeight
// FQImport: android.view.MotionEvent.ACTION_POINTER_UP TS ACTION_POINTER_UP
// FQImport: com.lightningkite.khrysalis.R.styleable.CustomView TS CustomView
// FQImport: com.lightningkite.khrysalis.views.CustomViewDelegate.generateAccessibilityView TS generateAccessibilityView
// FQImport: android.view.MotionEvent.ACTION_POINTER_DOWN TS ACTION_POINTER_DOWN
// FQImport: android.view.MotionEvent.getX TS getX
// FQImport: android.widget.FrameLayout.onTouchEvent TS onTouchEvent
// FQImport: com.lightningkite.khrysalis.views.CustomView.setMeasuredDimension TS setMeasuredDimension
// FQImport: com.lightningkite.khrysalis.views.CustomView.<set-delegate>.<anonymous>.it TS it
// FQImport: android.view.ViewGroup.LayoutParams.MATCH_PARENT TS MATCH_PARENT
// FQImport: android.view.MotionEvent.ACTION_MOVE TS ACTION_MOVE
// FQImport: com.lightningkite.khrysalis.views.CustomView.<init>.<anonymous>.<anonymous>.it TS it
// FQImport: theme TS getAndroidContentContextTheme
// FQImport: kotlin.math.min TS min
// FQImport: android.content.Context.getSystemService TS getSystemService
// FQImport: isEnabled TS getAndroidViewAccessibilityAccessibilityManagerIsEnabled
// FQImport: com.lightningkite.khrysalis.views.CustomViewDelegate.sizeThatFitsWidth TS sizeThatFitsWidth
// FQImport: actionIndex TS getAndroidViewMotionEventActionIndex
// FQImport: com.lightningkite.khrysalis.views.CustomView.onMeasure.widthSize TS widthSize
// FQImport: kotlin.ranges.until TS kotlinIntUntil
// FQImport: android.content.res.TypedArray.getString TS getString
// FQImport: com.lightningkite.khrysalis.views.CustomViewDelegate.onTouchMove TS onTouchMove
// FQImport: com.lightningkite.khrysalis.views.CustomView.onTouchEvent.takenCareOf TS takenCareOf
// FQImport: com.lightningkite.khrysalis.views.CustomView.onDraw.canvas TS canvas
// FQImport: com.lightningkite.khrysalis.views.CustomViewDelegate.draw TS draw
// FQImport: com.lightningkite.khrysalis.views.CustomView.onMeasure.heightSize TS heightSize
// FQImport: com.lightningkite.khrysalis.views.CustomView.accessibilityView TS accessibilityView
// FQImport: java.util.HashMap.remove TS remove
// FQImport: java.lang.Class.newInstance TS newInstance
// FQImport: context TS getComLightningkiteKhrysalisViewsCustomViewContext
// FQImport: com.lightningkite.khrysalis.views.CustomViewDelegate.sizeThatFitsHeight TS sizeThatFitsHeight
// FQImport: kotlin.Boolean TS Boolean
// FQImport: com.lightningkite.khrysalis.views.CustomView.touches TS touches
// FQImport: com.lightningkite.khrysalis.views.CustomView.Touch.x TS x
// FQImport: android.view.View.MeasureSpec TS MeasureSpec
// FQImport: kotlin.jvm.java TS getKotlinReflectKClassJava
// FQImport: android.view.MotionEvent.getY TS getY
// FQImport: com.lightningkite.khrysalis.views.CustomView.onTouchEvent.pointerId TS pointerId
// FQImport: com.lightningkite.khrysalis.views.CustomView.<init>.defStyleAttr TS defStyleAttr
// FQImport: com.lightningkite.khrysalis.views.CustomView.addView TS addView
// FQImport: pointerCount TS getAndroidViewMotionEventPointerCount
// FQImport: com.lightningkite.khrysalis.views.CustomView.onMeasure.heightMeasureSpec TS heightMeasureSpec
// FQImport: actionMasked TS getAndroidViewMotionEventActionMasked
// FQImport: com.lightningkite.khrysalis.views.CustomView.onTouchEvent.touch TS touch
// FQImport: com.lightningkite.khrysalis.R TS R
// FQImport: com.lightningkite.khrysalis.views.CustomView.<init>.<anonymous>.delegateClassName TS delegateClassName
// FQImport: android.widget.FrameLayout.onDraw TS onDraw
// FQImport: android.view.MotionEvent TS MotionEvent
// FQImport: com.lightningkite.khrysalis.views.CustomViewDelegate.onTouchDown TS onTouchDown
// FQImport: android.view.View.MeasureSpec.EXACTLY TS EXACTLY
// FQImport: com.lightningkite.khrysalis.views.CustomViewDelegate TS CustomViewDelegate
// FQImport: com.lightningkite.khrysalis.views.CustomView.<set-delegate>.value TS value
// FQImport: com.lightningkite.khrysalis.views.CustomView.Touch.id TS id
// FQImport: java.lang.ClassLoader.loadClass TS loadClass
// FQImport: com.lightningkite.khrysalis.views.CustomView.onMeasure.widthMode TS widthMode
// FQImport: android.view.View TS View
// FQImport: com.lightningkite.khrysalis.views.CustomView.onTouchEvent.event TS event
// FQImport: width TS getComLightningkiteKhrysalisViewsCustomViewWidth
// FQImport: android.view.MotionEvent.ACTION_DOWN TS ACTION_DOWN
// FQImport: com.lightningkite.khrysalis.views.CustomView.delegate TS delegate
// FQImport: android.content.Context TS Context
// FQImport: com.lightningkite.khrysalis.views.CustomView.<init>.context TS context
// FQImport: com.lightningkite.khrysalis.views.CustomView.onMeasure.widthMeasureSpec TS widthMeasureSpec
// FQImport: com.lightningkite.khrysalis.views.CustomView.<init>.attrs TS attrs
// FQImport: com.lightningkite.khrysalis.views.CustomView.metrics TS metrics
// FQImport: com.lightningkite.khrysalis.views.CustomView.onMeasure.heightMode TS heightMode
// FQImport: com.lightningkite.khrysalis.views.CustomView.onMeasure.width TS width
// FQImport: classLoader TS getJavaLangClassClassLoader
// FQImport: displayMetrics TS getAndroidContentResResourcesDisplayMetrics
// FQImport: com.lightningkite.khrysalis.views.CustomView.Touch.y TS y
// FQImport: android.graphics.Canvas TS Canvas
// FQImport: android.widget.FrameLayout TS FrameLayout
// FQImport: android.view.MotionEvent.ACTION_CANCEL TS ACTION_CANCEL
// FQImport: android.view.View.MeasureSpec.getMode TS getMode
// FQImport: android.content.res.Resources.Theme.obtainStyledAttributes TS obtainStyledAttributes
// FQImport: com.lightningkite.khrysalis.views.CustomView.onTouchEvent.pointerIndex TS pointerIndex
// FQImport: android.view.MotionEvent.ACTION_UP TS ACTION_UP
// FQImport: com.lightningkite.khrysalis.views.CustomView.Touch TS Touch
// FQImport: resources TS getAndroidContentContextResources
import { CustomViewDelegate } from './CustomViewDelegate.shared'

//! Declares com.lightningkite.khrysalis.views.CustomView
export class CustomView extends FrameLayout {
    public constructor(context: Context, attrs: (AttributeSet | null) = null, defStyleAttr: number = 0) {
        super(context, attrs, defStyleAttr);
        this.delegate = null;
        const a = getAndroidContentContextTheme(context).obtainStyledAttributes(attrs, R.styleable.CustomView, defStyleAttr, 0);
        ;
        const temp634 = a.getString(R.styleable.CustomView_delegateClass);
        if(temp634 !== null) ((delegateClassName) => {
                this.delegate = try {
                    return ((it) => it as CustomViewDelegate)(getJavaLangClassClassLoader(getKotlinReflectKClassJava(context::class))!!
                        .loadClass(delegateClassName)
                    .newInstance());
                } catch(e: ClassNotFoundException){
                    return ((it) => it as CustomViewDelegate)(getJavaLangClassClassLoader(getKotlinReflectKClassJava(this::class))!!
                        .loadClass(delegateClassName)
                    .newInstance());
                }
        })(temp634);
        this.accessibilityView = null;
        this.touches = HashMap.constructor<number, Touch>();
        this.metrics = getAndroidContentResResourcesDisplayMetrics(getAndroidContentContextResources(context));
    }
    
    
    public _delegate: (CustomViewDelegate | null) = null;
    public get delegate(): (CustomViewDelegate | null) { return this._delegate; }
    public set delegate(value: (CustomViewDelegate | null)) {
        const temp640 = this._delegate;
        if(temp640 !== null) ((it) => {
                it.customView = null
        })(temp640);
        if(!(value.equals(null))) {
            value.customView = this;
        }
        this._delegate = value;
        
        if (getAndroidViewAccessibilityAccessibilityManagerIsEnabled((getComLightningkiteKhrysalisViewsCustomViewContext(this).getSystemService(Context.ACCESSIBILITY_SERVICE) as AccessibilityManager))) {
            this.accessibilityView = this.delegate?.generateAccessibilityView();
            const temp642 = this.accessibilityView;
            if(temp642 !== null) ((it) => {
                    this.addView(it, FrameLayout.LayoutParams.constructorkotlinInt, kotlinInt(MATCH_PARENT, MATCH_PARENT))
            })(temp642);
        }
    }
    
    
    
    
    public accessibilityView: (View | null) = null;
    
    
    private static Touch = class Touch {
        public x: number;
        public y: number;
        public id: number;
        public constructor(x: number, y: number, id: number) {
            this.x = x;
            this.y = y;
            this.id = id;
        }
        public hashCode(): number {
            let hash = 17;
            hash = 31 * hash + Math.floor(this.x);
            hash = 31 * hash + Math.floor(this.y);
            hash = 31 * hash + this.id;
            return hash;
        }
        public equals(other: any): boolean { return other instanceof Touch && this.x === other.x && this.y === other.y && this.id === other.id }
        public toString(): string { return `Touch(x = ${this.x}, y = ${this.y}, id = ${this.id})` }
        public copy(x: number = this.x, y: number = this.y, id: number = this.id) { return new Touch(x, y, id); }
    }
    
    private readonly touches = HashMap.constructor<number, Touch>();
    
    
    public onTouchEvent(event: MotionEvent): Boolean{
        if (!(this.accessibilityView.equals(null))) return .onTouchEvent(event)
        let takenCareOf = false;
        
        switch(getAndroidViewMotionEventActionMasked(event)) {
            case MotionEvent.ACTION_DOWN:
            case MotionEvent.ACTION_POINTER_DOWN:
            const pointerId = event.getPointerId(getAndroidViewMotionEventActionIndex(event));
            
            const touch = new Touch(event.getX(getAndroidViewMotionEventActionIndex(event)), event.getY(getAndroidViewMotionEventActionIndex(event)), pointerId);
            
            const array653 = this.touches;
            const index654 = pointerId;
            kotlinCollectionsMutableMapSet(index654, touch)
            takenCareOf = (this.delegate?.onTouchDown(touch.id, touch.x, touch.y, getComLightningkiteKhrysalisViewsCustomViewWidth(this), getComLightningkiteKhrysalisViewsCustomViewHeight(this)) ?: false) || takenCareOf
            break;
            case MotionEvent.ACTION_MOVE:
            for (const pointerIndex of kotlinIntUntil(0, getAndroidViewMotionEventPointerCount(event))) {
                const pointerId = event.getPointerId(pointerIndex);
                
                const touch = this.touches.get(pointerId);
                
                if (!(touch.equals(null))) {
                    touch.x = event.getX(pointerIndex);
                    touch.y = event.getY(pointerIndex);
                    takenCareOf = (this.delegate?.onTouchMove(touch.id, touch.x, touch.y, getComLightningkiteKhrysalisViewsCustomViewWidth(this), getComLightningkiteKhrysalisViewsCustomViewHeight(this)) ?: false) || takenCareOf;
                }
            }
            break;
            case MotionEvent.ACTION_CANCEL:
            const pointerId = event.getPointerId(getAndroidViewMotionEventActionIndex(event));
            
            const touch = this.touches.remove(pointerId);
            
            break;
            case MotionEvent.ACTION_UP:
            case MotionEvent.ACTION_POINTER_UP:
            const pointerId = event.getPointerId(getAndroidViewMotionEventActionIndex(event));
            
            const touch = this.touches.remove(pointerId);
            
            if (!(touch.equals(null))) {
                takenCareOf = (this.delegate?.onTouchUp(touch.id, touch.x, touch.y, getComLightningkiteKhrysalisViewsCustomViewWidth(this), getComLightningkiteKhrysalisViewsCustomViewHeight(this)) ?: false) || takenCareOf;
            }
            break;
        }
        
        return takenCareOf;
    }
    
    private readonly metrics = getAndroidContentResResourcesDisplayMetrics(getAndroidContentContextResources(context));
    
    public onDraw(canvas: Canvas): void{
        .onDraw(canvas);
        if (this.accessibilityView.equals(null)) {
            this.delegate?.draw(canvas, getComLightningkiteKhrysalisViewsCustomViewWidth(this), getComLightningkiteKhrysalisViewsCustomViewHeight(this), this.metrics);
        }
    }
    public onMeasure(widthMeasureSpec: number, heightMeasureSpec: number): void{
        const widthMode = MeasureSpec.getMode(widthMeasureSpec);
        
        const widthSize = MeasureSpec.getSize(widthMeasureSpec);
        
        const heightMode = MeasureSpec.getMode(heightMeasureSpec);
        
        const heightSize = MeasureSpec.getSize(heightMeasureSpec);
        
        const width = (() => {switch(widthMode) {
                    case MeasureSpec.EXACTLY:
                    return widthSize
                    break;
                    default:
                    return min(((_it)=>{
                                if(_it === null) return null;
                                return Math.floor(_it)
                    })(this.delegate?.sizeThatFitsWidth(widthSize, heightSize)) ?: widthSize, widthSize)
                    break;
                }
        })();
        
        const height = (() => {switch(heightMode) {
                    case MeasureSpec.EXACTLY:
                    return heightSize
                    break;
                    default:
                    return min(((_it)=>{
                                if(_it === null) return null;
                                return Math.floor(_it)
                    })(this.delegate?.sizeThatFitsHeight(width, heightSize)) ?: heightSize, heightSize)
                    break;
                }
        })();
        
        this.setMeasuredDimension(width, height);
    }
}

