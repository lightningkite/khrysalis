// Generated by Khrysalis TypeScript converter - this file will be overwritten.
// File: views/CustomView.actual.kt
// Package: com.lightningkite.khrysalis.views
import { CustomViewDelegate } from './CustomViewDelegate.shared'

//! Declares com.lightningkite.khrysalis.views.CustomView
export class CustomView extends FrameLayout {
    public constructor(context: Context, attrs: (AttributeSet | null) = null, defStyleAttr: number = 0) {
        super(context, attrs, defStyleAttr);
        this.delegate = null;
        const a = getAndroidContentContextTheme(context).obtainStyledAttributes(attrs, R.styleable.CustomView, defStyleAttr, 0);
        ;
        a.getString(R.styleable.CustomView_delegateClass)?.((delegateClassName) => this.delegate = try {
                return ((it) => it as CustomViewDelegate)(getJavaLangClassClassLoader(getKotlinReflectKClassJava(context::class))!!
                    .loadClass(delegateClassName)
                .newInstance());
            } catch(e:ClassNotFoundException){
                return ((it) => it as CustomViewDelegate)(getJavaLangClassClassLoader(getKotlinReflectKClassJava(this::class))!!
                    .loadClass(delegateClassName)
                .newInstance());
        })(this);
        this.accessibilityView = null;
        this.touches = HashMap.constructor<number, Touch>();
        this.metrics = getAndroidContentResResourcesDisplayMetrics(getAndroidContentContextResources(context));
    }
    
    
    public _delegate: (CustomViewDelegate | null) = null;
    public set delegate(value: (CustomViewDelegate | null)) {}
    
    
    
    
    public accessibilityView: (View | null) = null;
    
    
    private static Touch = class Touch {
        public x: number;
        public y: number;
        public id: number;
        public constructor( x: number,  y: number,  id: number) {
            this.x = x;
            this.y = y;
            this.id = id;
        }
        public hashCode(): number {
            let hash = 17;
            hash = 31 * hash + Math.floor(this.x);
            hash = 31 * hash + Math.floor(this.y);
            hash = 31 * hash + this.id;
            return hash;
        }
        public equals(other: any): boolean { return other instanceof Touch && this.x === other.x && this.y === other.y && this.id === other.id }
        public toString(): string { return `Touch(x = ${this.x}, y = ${this.y}, id = ${this.id})` }
        public copy(x: number = this.x, y: number = this.y, id: number = this.id) { return new Touch(x, y, id); }
    }
    
    private readonly touches = HashMap.constructor<number, Touch>();
    
    
    public onTouchEvent(event: MotionEvent): Boolean{}
    
    private readonly metrics = getAndroidContentResResourcesDisplayMetrics(getAndroidContentContextResources(context));
    
    public onDraw(canvas: Canvas){}
    public onMeasure(widthMeasureSpec: number, heightMeasureSpec: number){}
}

