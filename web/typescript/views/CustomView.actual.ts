// Generated by Khrysalis TypeScript converter - this file will be overwritten.
// File: views/CustomView.actual.kt
// Package: com.lightningkite.khrysalis.views
// FQImport: com.lightningkite.khrysalis.views.CustomViewDelegate.onTouchUp TS onTouchUp
// FQImport: java.util.HashMap TS HashMap
// FQImport: com.lightningkite.khrysalis.views.CustomViewDelegate.customView TS customView
// FQImport: android.content.Context.ACCESSIBILITY_SERVICE TS ACCESSIBILITY_SERVICE
// FQImport: com.lightningkite.khrysalis.R.styleable TS styleable
// FQImport: android.util.AttributeSet TS AttributeSet
// FQImport: android.view.MotionEvent.getPointerId TS getPointerId
// FQImport: com.lightningkite.khrysalis.views.CustomView.onMeasure.height TS height
// FQImport: android.view.View.MeasureSpec.getSize TS getSize
// FQImport: com.lightningkite.khrysalis.views.CustomView.<init>.a TS a
// FQImport: java.lang.ClassNotFoundException TS ClassNotFoundException
// FQImport: android.view.accessibility.AccessibilityManager TS AccessibilityManager
// FQImport: android.view.accessibility.AccessibilityManager.isEnabled TS isEnabled
// FQImport: com.lightningkite.khrysalis.R.styleable.CustomView_delegateClass TS CustomView_delegateClass
// FQImport: com.lightningkite.khrysalis.views.CustomView.context TS context
// FQImport: android.view.MotionEvent.ACTION_POINTER_UP TS ACTION_POINTER_UP
// FQImport: com.lightningkite.khrysalis.R.styleable.CustomView TS CustomView
// FQImport: com.lightningkite.khrysalis.views.CustomViewDelegate.generateAccessibilityView TS generateAccessibilityView
// FQImport: android.view.MotionEvent.ACTION_POINTER_DOWN TS ACTION_POINTER_DOWN
// FQImport: android.view.MotionEvent.getX TS getX
// FQImport: android.widget.FrameLayout.onTouchEvent TS onTouchEvent
// FQImport: com.lightningkite.khrysalis.views.CustomView.setMeasuredDimension TS setMeasuredDimension
// FQImport: com.lightningkite.khrysalis.views.CustomView.<set-delegate>.<anonymous>.it TS it
// FQImport: android.view.ViewGroup.LayoutParams.MATCH_PARENT TS MATCH_PARENT
// FQImport: android.view.MotionEvent.ACTION_MOVE TS ACTION_MOVE
// FQImport: com.lightningkite.khrysalis.views.CustomView.<init>.<anonymous>.<anonymous>.it TS it
// FQImport: android.content.Context.getSystemService TS getSystemService
// FQImport: android.view.MotionEvent.actionIndex TS actionIndex
// FQImport: com.lightningkite.khrysalis.views.CustomViewDelegate.sizeThatFitsWidth TS sizeThatFitsWidth
// FQImport: com.lightningkite.khrysalis.views.CustomView.onMeasure.widthSize TS widthSize
// FQImport: android.content.res.TypedArray.getString TS getString
// FQImport: android.view.MotionEvent.pointerCount TS pointerCount
// FQImport: kotlin.ranges.until>kotlin.Int TS kotlinIntUntil
// FQImport: com.lightningkite.khrysalis.views.CustomViewDelegate.onTouchMove TS onTouchMove
// FQImport: com.lightningkite.khrysalis.views.CustomView.onTouchEvent.takenCareOf TS takenCareOf
// FQImport: com.lightningkite.khrysalis.views.CustomView.onDraw.canvas TS canvas
// FQImport: com.lightningkite.khrysalis.views.CustomViewDelegate.draw TS draw
// FQImport: com.lightningkite.khrysalis.views.CustomView.onMeasure.heightSize TS heightSize
// FQImport: com.lightningkite.khrysalis.views.CustomView.accessibilityView TS accessibilityView
// FQImport: com.lightningkite.khrysalis.views.CustomView.height TS height
// FQImport: java.util.HashMap.remove TS remove
// FQImport: kotlin.jvm.java>kotlin.reflect.KClass<kotlin.Any> TS getKotlinReflectKClassJava
// FQImport: java.lang.Class.newInstance TS newInstance
// FQImport: com.lightningkite.khrysalis.views.CustomViewDelegate.sizeThatFitsHeight TS sizeThatFitsHeight
// FQImport: java.lang.Class.classLoader TS classLoader
// FQImport: com.lightningkite.khrysalis.views.CustomView.touches TS touches
// FQImport: com.lightningkite.khrysalis.views.CustomView.Touch.x TS x
// FQImport: android.view.View.MeasureSpec TS MeasureSpec
// FQImport: android.view.MotionEvent.getY TS getY
// FQImport: com.lightningkite.khrysalis.views.CustomView.onTouchEvent.pointerId TS pointerId
// FQImport: android.content.Context.theme TS theme
// FQImport: com.lightningkite.khrysalis.views.CustomView.<init>.defStyleAttr TS defStyleAttr
// FQImport: com.lightningkite.khrysalis.views.CustomView.addView TS addView
// FQImport: com.lightningkite.khrysalis.views.CustomView.onMeasure.heightMeasureSpec TS heightMeasureSpec
// FQImport: com.lightningkite.khrysalis.views.CustomView.onTouchEvent.touch TS touch
// FQImport: com.lightningkite.khrysalis.R TS R
// FQImport: com.lightningkite.khrysalis.views.CustomView.<init>.<anonymous>.delegateClassName TS delegateClassName
// FQImport: android.widget.FrameLayout.onDraw TS onDraw
// FQImport: android.view.MotionEvent TS MotionEvent
// FQImport: com.lightningkite.khrysalis.views.CustomViewDelegate.onTouchDown TS onTouchDown
// FQImport: android.view.View.MeasureSpec.EXACTLY TS EXACTLY
// FQImport: com.lightningkite.khrysalis.views.CustomViewDelegate TS CustomViewDelegate
// FQImport: com.lightningkite.khrysalis.views.CustomView.<set-delegate>.value TS value
// FQImport: com.lightningkite.khrysalis.views.CustomView.Touch.id TS id
// FQImport: java.lang.ClassLoader.loadClass TS loadClass
// FQImport: com.lightningkite.khrysalis.views.CustomView.onMeasure.widthMode TS widthMode
// FQImport: com.lightningkite.khrysalis.views.CustomView.onTouchEvent.event TS event
// FQImport: android.view.MotionEvent.ACTION_DOWN TS ACTION_DOWN
// FQImport: com.lightningkite.khrysalis.views.CustomView.delegate TS delegate
// FQImport: android.content.Context TS Context
// FQImport: com.lightningkite.khrysalis.views.CustomView.<init>.context TS context
// FQImport: com.lightningkite.khrysalis.views.CustomView.onMeasure.widthMeasureSpec TS widthMeasureSpec
// FQImport: com.lightningkite.khrysalis.views.CustomView.<init>.attrs TS attrs
// FQImport: android.view.MotionEvent.actionMasked TS actionMasked
// FQImport: com.lightningkite.khrysalis.views.CustomView.metrics TS metrics
// FQImport: com.lightningkite.khrysalis.views.CustomView.width TS width
// FQImport: com.lightningkite.khrysalis.views.CustomView.onMeasure.heightMode TS heightMode
// FQImport: com.lightningkite.khrysalis.views.CustomView.onMeasure.width TS width
// FQImport: com.lightningkite.khrysalis.views.CustomView.Touch.y TS y
// FQImport: android.content.Context.resources TS resources
// FQImport: android.widget.FrameLayout TS FrameLayout
// FQImport: android.view.MotionEvent.ACTION_CANCEL TS ACTION_CANCEL
// FQImport: android.view.View.MeasureSpec.getMode TS getMode
// FQImport: android.content.res.Resources.Theme.obtainStyledAttributes TS obtainStyledAttributes
// FQImport: android.content.res.Resources.displayMetrics TS displayMetrics
// FQImport: com.lightningkite.khrysalis.views.CustomView.onTouchEvent.pointerIndex TS pointerIndex
// FQImport: android.view.MotionEvent.ACTION_UP TS ACTION_UP
// FQImport: com.lightningkite.khrysalis.views.CustomView.Touch TS Touch
import { CustomViewDelegate } from './CustomViewDelegate.shared'

//! Declares com.lightningkite.khrysalis.views.CustomView
export class CustomView extends FrameLayout {
    public constructor(context: Context, attrs: (AttributeSet | null) = null, defStyleAttr: number = 0) {
        super(context, attrs, defStyleAttr);
        this.delegate = null;
        const a = context.theme.obtainStyledAttributes(attrs, R.styleable.CustomView, defStyleAttr, 0);
        ;
        const temp402 = a.getString(R.styleable.CustomView_delegateClass);
        if(temp402 !== null) ((delegateClassName) => {
                this.delegate = (() => {
                        try {
                            return ((it) => it as CustomViewDelegate)(getKotlinReflectKClassJava(context::class).classLoader!!
                                .loadClass(delegateClassName)
                            .newInstance());
                        } catch (_e) { let e = _e as ClassNotFoundException; return ((it) => it as CustomViewDelegate)(getKotlinReflectKClassJava(this::class).classLoader!!
                                .loadClass(delegateClassName)
                        .newInstance())}
                })()
        })(temp402);
        this.accessibilityView = null;
        this.touches = HashMap.constructor<number, Touch>();
        this.metrics = context.resources.displayMetrics;
    }
    
    
    public _delegate: (CustomViewDelegate | null);
    public get delegate(): (CustomViewDelegate | null) { return this._delegate; }
    public set delegate(value: (CustomViewDelegate | null)) {
        const temp408 = this._delegate;
        if(temp408 !== null) ((it) => {
                it.customView = null
        })(temp408);
        if (!(value.equals(null))) {
            value.customView = this;
        }
        this._delegate = value;
        
        if ((this.context.getSystemService(Context.ACCESSIBILITY_SERVICE) as AccessibilityManager).isEnabled) {
            this.accessibilityView = this.delegate?.generateAccessibilityView();
            const temp410 = this.accessibilityView;
            if(temp410 !== null) ((it) => {
                    this.addView(it, FrameLayout.LayoutParams.constructorkotlinInt, kotlinInt(MATCH_PARENT, MATCH_PARENT))
            })(temp410);
        }
    }
    
    
    
    
    public accessibilityView: (HTMLElement | null);
    
    
    private static Touch = class Touch {
        public x: number;
        public y: number;
        public id: number;
        public constructor(x: number, y: number, id: number) {
            this.x = x;
            this.y = y;
            this.id = id;
        }
        public hashCode(): number {
            let hash = 17;
            hash = 31 * hash + Math.floor(this.x);
            hash = 31 * hash + Math.floor(this.y);
            hash = 31 * hash + this.id;
            return hash;
        }
        public equals(other: any): boolean { return other instanceof Touch && this.x === other.x && this.y === other.y && this.id === other.id }
        public toString(): string { return `Touch(x = ${this.x}, y = ${this.y}, id = ${this.id})` }
        public copy(x: number = this.x, y: number = this.y, id: number = this.id) { return new Touch(x, y, id); }
    }
    
    private readonly touches;
    
    
    public onTouchEvent(event: MotionEvent): boolean{
        if (!(this.accessibilityView.equals(null))) return super.onTouchEvent(event);
        let takenCareOf = false;
        
        switch(event.actionMasked) {
            case MotionEvent.ACTION_DOWN:
            case MotionEvent.ACTION_POINTER_DOWN:
            const pointerId = event.getPointerId(event.actionIndex);
            
            const touch = new Touch(event.getX(event.actionIndex), event.getY(event.actionIndex), pointerId);
            
            const array421 = this.touches;
            const index422 = pointerId;
            kotlinCollectionsMutableMapSet(index422, touch)
            takenCareOf = (this.delegate?.onTouchDown(touch.id, touch.x, touch.y, this.width, this.height) ?? false) || takenCareOf
            break;
            case MotionEvent.ACTION_MOVE:
            for (const pointerIndex of kotlinIntUntil(0, event.pointerCount)) {
                const pointerId = event.getPointerId(pointerIndex);
                
                const touch = this.touches.get(pointerId);
                
                if (!(touch.equals(null))) {
                    touch.x = event.getX(pointerIndex);
                    touch.y = event.getY(pointerIndex);
                    takenCareOf = (this.delegate?.onTouchMove(touch.id, touch.x, touch.y, this.width, this.height) ?? false) || takenCareOf;
                }
            }
            break;
            case MotionEvent.ACTION_CANCEL:
            const pointerId = event.getPointerId(event.actionIndex);
            
            const touch = this.touches.remove(pointerId);
            
            break;
            case MotionEvent.ACTION_UP:
            case MotionEvent.ACTION_POINTER_UP:
            const pointerId = event.getPointerId(event.actionIndex);
            
            const touch = this.touches.remove(pointerId);
            
            if (!(touch.equals(null))) {
                takenCareOf = (this.delegate?.onTouchUp(touch.id, touch.x, touch.y, this.width, this.height) ?? false) || takenCareOf;
            }
            break;
        }
        
        return takenCareOf;
    }
    
    private readonly metrics;
    
    public onDraw(canvas: CanvasRenderingContext2D): void{
        super.onDraw(canvas);
        if (this.accessibilityView.equals(null)) {
            this.delegate?.draw(canvas, this.width, this.height, this.metrics);
        }
    }
    public onMeasure(widthMeasureSpec: number, heightMeasureSpec: number): void{
        const widthMode = MeasureSpec.getMode(widthMeasureSpec);
        
        const widthSize = MeasureSpec.getSize(widthMeasureSpec);
        
        const heightMode = MeasureSpec.getMode(heightMeasureSpec);
        
        const heightSize = MeasureSpec.getSize(heightMeasureSpec);
        
        const width = (() => {switch(widthMode) {
                    case MeasureSpec.EXACTLY:
                    return widthSize
                    break;
                    default:
                    return Math.min(((_it)=>{
                                if(_it === null) return null;
                                return Math.floor(_it)
                    })(this.delegate?.sizeThatFitsWidth(widthSize, heightSize)) ?? widthSize, widthSize)
                    break;
                }
        })();
        
        const height = (() => {switch(heightMode) {
                    case MeasureSpec.EXACTLY:
                    return heightSize
                    break;
                    default:
                    return Math.min(((_it)=>{
                                if(_it === null) return null;
                                return Math.floor(_it)
                    })(this.delegate?.sizeThatFitsHeight(width, heightSize)) ?? heightSize, heightSize)
                    break;
                }
        })();
        
        this.setMeasuredDimension(width, height);
    }
}

