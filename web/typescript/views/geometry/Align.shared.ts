// Generated by Khrysalis TypeScript converter - this file will be overwritten.
// File: views/geometry/Align.shared.kt
// Package: com.lightningkite.khrysalis.views.geometry
// FQImport: com.lightningkite.khrysalis.views.geometry.Align.fill TS fill
// FQImport: com.lightningkite.khrysalis.views.geometry.AlignPair TS AlignPair
// FQImport: com.lightningkite.khrysalis.views.geometry.Align.center TS center
// FQImport: com.lightningkite.khrysalis.views.geometry.AlignPair SKIPPED due to same file
// FQImport: com.lightningkite.khrysalis.views.geometry.Align.end TS end
// FQImport: com.lightningkite.khrysalis.views.geometry.Align SKIPPED due to same file
// FQImport: com.lightningkite.khrysalis.views.geometry.Align.start TS start
// FQImport: com.lightningkite.khrysalis.views.geometry.Align TS Align

//! Declares com.lightningkite.khrysalis.views.geometry.Align
export class Align {
    constructor(name: string) { this.name = name; }
    
    public static start = new Align("start");
    public static center = new Align("center");
    public static end = new Align("end");
    public static fill = new Align("fill");
    
    private static _values: Array<Align> = [Align.start, Align.center, Align.end, Align.fill];
    public static values(): Array<Align> { return Align._values; }
    public readonly name: string;
    public static valueOf(name: string): Align { return (Align as any)[name]; }
    public toString(): string { return this.name }
}

//! Declares com.lightningkite.khrysalis.views.geometry.AlignPair
export class AlignPair {
    public readonly horizontal: Align;
    public readonly vertical: Align;
    public constructor( horizontal: Align,  vertical: Align) {
        this.horizontal = horizontal;
        this.vertical = vertical;
    }
    public hashCode(): number {
        let hash = 17;
        hash = 31 * hash + this.horizontal.hashCode();
        hash = 31 * hash + this.vertical.hashCode();
        return hash;
    }
    public equals(other: any): boolean { return other instanceof AlignPair && this.horizontal.equals(other.horizontal) && this.vertical.equals(other.vertical) }
    public toString(): string { return `AlignPair(horizontal = ${this.horizontal}, vertical = ${this.vertical})` }
    public copy(horizontal: Align = this.horizontal, vertical: Align = this.vertical) { return new AlignPair(horizontal, vertical); }
    
    
    public static Companion = class Companion {
        private constructor() {
            this.center = new AlignPair(Align.center, Align.center);
            this.fill = new AlignPair(Align.fill, Align.fill);
            this.topLeft = new AlignPair(Align.start, Align.start);
            this.topCenter = new AlignPair(Align.center, Align.start);
            this.topFill = new AlignPair(Align.fill, Align.start);
            this.topRight = new AlignPair(Align.end, Align.start);
            this.centerLeft = new AlignPair(Align.start, Align.center);
            this.centerCenter = new AlignPair(Align.center, Align.center);
            this.centerFill = new AlignPair(Align.fill, Align.center);
            this.centerRight = new AlignPair(Align.end, Align.center);
            this.fillLeft = new AlignPair(Align.start, Align.fill);
            this.fillCenter = new AlignPair(Align.center, Align.fill);
            this.fillFill = new AlignPair(Align.fill, Align.fill);
            this.fillRight = new AlignPair(Align.end, Align.fill);
            this.bottomLeft = new AlignPair(Align.start, Align.end);
            this.bottomCenter = new AlignPair(Align.center, Align.end);
            this.bottomFill = new AlignPair(Align.fill, Align.end);
            this.bottomRight = new AlignPair(Align.end, Align.end);
        }
        public static INSTANCE = new Companion();
        
        public readonly center = new AlignPair(Align.center, Align.center);
        
        public readonly fill = new AlignPair(Align.fill, Align.fill);
        
        
        public readonly topLeft = new AlignPair(Align.start, Align.start);
        
        public readonly topCenter = new AlignPair(Align.center, Align.start);
        
        public readonly topFill = new AlignPair(Align.fill, Align.start);
        
        public readonly topRight = new AlignPair(Align.end, Align.start);
        
        public readonly centerLeft = new AlignPair(Align.start, Align.center);
        
        public readonly centerCenter = new AlignPair(Align.center, Align.center);
        
        public readonly centerFill = new AlignPair(Align.fill, Align.center);
        
        public readonly centerRight = new AlignPair(Align.end, Align.center);
        
        public readonly fillLeft = new AlignPair(Align.start, Align.fill);
        
        public readonly fillCenter = new AlignPair(Align.center, Align.fill);
        
        public readonly fillFill = new AlignPair(Align.fill, Align.fill);
        
        public readonly fillRight = new AlignPair(Align.end, Align.fill);
        
        public readonly bottomLeft = new AlignPair(Align.start, Align.end);
        
        public readonly bottomCenter = new AlignPair(Align.center, Align.end);
        
        public readonly bottomFill = new AlignPair(Align.fill, Align.end);
        
        public readonly bottomRight = new AlignPair(Align.end, Align.end);
        
    }
    
}

