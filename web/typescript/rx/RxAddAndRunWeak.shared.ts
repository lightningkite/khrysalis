// Generated by Khrysalis TypeScript converter - this file will be overwritten.
// File: rx/RxAddAndRunWeak.shared.kt
// Package: com.lightningkite.khrysalis.rx
import { IoReactivexDisposablesDisposableSolvePrivateDisposal } from './RxAddAndRunWeak.shared'
import { Observable, SubscriptionLike } from 'rxjs'
import { IoReactivexDisposablesDisposableUntil, getAndroidViewViewRemoved } from './DisposeCondition.actual'

//! Declares com.lightningkite.khrysalis.rx.solvePrivateDisposal
export function IoReactivexDisposablesDisposableSolvePrivateDisposal(this_SolvePrivateDisposal: SubscriptionLike, items: Array<any>){
    for (const item of items) {
        if(item instanceof View){
            return IoReactivexDisposablesDisposableUntil(this_SolvePrivateDisposal, getAndroidViewViewRemoved(item));
        }
    }
}

//! Declares com.lightningkite.khrysalis.rx.add
export function IoReactivexObservableAdd<Element extends any>(this_Add: Observable<Element>, listener:  (a: Element) => Boolean): SubscriptionLike{
    let disposable: (SubscriptionLike | null) = null;
    
    const disp = this_Add.subscribe(undefined, (item) => if (this.listener(item)) {
            disposable?.this.unsubscribe();
    }, undefined);
    
    disposable = disp;
    return disp;
}

//! Declares com.lightningkite.khrysalis.rx.addWeak
export function IoReactivexObservableAddWeak<A extends object, Element extends any>(this_AddWeak: Observable<Element>, referenceA: A, listener:  (a: A, b: Element) => void): SubscriptionLike{
    let disposable: (SubscriptionLike | null) = null;
    
    const weakA: (A | null);
    
    const disp = this_AddWeak.subscribe(undefined, (item) => {
            const a = weakA;
            
            if (!(a.equals(null))) {
                this.listener(a, item);
            } else {
                disposable?.this.unsubscribe();
            }
    }, undefined);
    
    disposable = disp;
    IoReactivexDisposablesDisposableSolvePrivateDisposal(disp, [referenceA]);
    return disp;
}

//! Declares com.lightningkite.khrysalis.rx.addWeak
export function IoReactivexObservableAddWeak<A extends object, B extends object, Element extends any>(this_AddWeak: Observable<Element>, referenceA: A, referenceB: B, listener:  (a: A, b: B, c: Element) => void): SubscriptionLike{
    let disposable: (SubscriptionLike | null) = null;
    
    const weakA: (A | null);
    
    const weakB: (B | null);
    
    const disp = this_AddWeak.subscribe(undefined, (item) => {
            const a = weakA;
            
            const b = weakB;
            
            if (!(a.equals(null)) && !(b.equals(null))) {
                this.listener(a, b, item);
            } else {
                disposable?.this.unsubscribe();
            }
    }, undefined);
    
    disposable = disp;
    IoReactivexDisposablesDisposableSolvePrivateDisposal(disp, [referenceA, referenceB]);
    return disp;
}


//! Declares com.lightningkite.khrysalis.rx.addWeak
export function IoReactivexObservableAddWeak<A extends object, B extends object, C extends object, Element extends any>(this_AddWeak: Observable<Element>, referenceA: A, referenceB: B, referenceC: C, listener:  (a: A, b: B, c: C, d: Element) => void): SubscriptionLike{
    let disposable: (SubscriptionLike | null) = null;
    
    const weakA: (A | null);
    
    const weakB: (B | null);
    
    const weakC: (C | null);
    
    const disp = this_AddWeak.subscribe(undefined, (item) => {
            const a = weakA;
            
            const b = weakB;
            
            const c = weakC;
            
            if (!(a.equals(null)) && !(b.equals(null)) && !(c.equals(null))) {
                this.listener(a, b, c, item);
            } else {
                disposable?.this.unsubscribe();
            }
    }, undefined);
    
    IoReactivexDisposablesDisposableSolvePrivateDisposal(disp, [referenceA, referenceB, referenceC]);
    disposable = disp;
    return disp;
}

