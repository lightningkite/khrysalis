// Generated by Khrysalis TypeScript converter - this file will be overwritten.
// File: bytes/ByteBuffer.actual.kt
// Package: com.lightningkite.khrysalis.bytes
import { Data } from './Data.actual'

//! Declares com.lightningkite.khrysalis.bytes.buffer
export function KotlinByteArrayBuffer(this_Buffer: Data): ByteBuffer{}

//! Declares com.lightningkite.khrysalis.bytes.data
export function JavaNioByteBufferData(this_Data: ByteBuffer): Data{}

//! Declares com.lightningkite.khrysalis.bytes.getUtf8
export function JavaNioByteBufferGetUtf8(this_GetUtf8: ByteBuffer): string{}

//! Declares com.lightningkite.khrysalis.bytes.getUtf8
export function JavaNioByteBufferGetUtf8(this_GetUtf8: ByteBuffer, index: number): string{}

//! Declares com.lightningkite.khrysalis.bytes.putUtf8
export function JavaNioByteBufferPutUtf8(this_PutUtf8: ByteBuffer, string: string): ByteBuffer{}

//! Declares com.lightningkite.khrysalis.bytes.putUtf8
export function JavaNioByteBufferPutUtf8(this_PutUtf8: ByteBuffer, index: number, string: string): ByteBuffer{}

//! Declares com.lightningkite.khrysalis.bytes.getSetSizeUtf8
export function JavaNioByteBufferGetSetSizeUtf8(this_GetSetSizeUtf8: ByteBuffer, length: number): string{}

//! Declares com.lightningkite.khrysalis.bytes.getSetSizeUtf8
export function JavaNioByteBufferGetSetSizeUtf8(this_GetSetSizeUtf8: ByteBuffer, length: number, index: number): string{}

//! Declares com.lightningkite.khrysalis.bytes.putSetSizeUtf8
export function JavaNioByteBufferPutSetSizeUtf8(this_PutSetSizeUtf8: ByteBuffer, length: number, string: string): ByteBuffer{}

//! Declares com.lightningkite.khrysalis.bytes.putSetSizeUtf8
export function JavaNioByteBufferPutSetSizeUtf8(this_PutSetSizeUtf8: ByteBuffer, length: number, index: number, string: string): ByteBuffer{}

/* SHARED DECLARATIONS

class ByteBuffer : Comparable<ByteBuffer> {
    
    open fun put(src: ByteBuffer): ByteBuffer
    
    open fun put(
        src: Data, offset: Int,
        length: Int
    ): ByteBuffer
    
    fun put(src: Data): ByteBuffer
    
    fun hasArray(): Boolean
    
    fun array(): Data
    
    fun arrayOffset(): Int
    
    fun position(newPosition: Int): Buffer
    
    fun limit(newLimit: Int): Buffer
    
    fun mark(): Buffer
    
    fun reset(): Buffer
    
    fun clear(): Buffer
    
    fun flip(): Buffer
    
    fun rewind(): Buffer
    
    fun compact(): ByteBuffer
    
    fun order(): ByteOrder
    
    fun order(bo: ByteOrder): ByteBuffer
    
    fun get(): Byte
    fun put(b: Byte): ByteBuffer
    
    operator fun get(i: Int): Byte
    fun put(i: Int, b: Byte): ByteBuffer
    
    fun getShort(): Short
    fun putShort(i: Short): ByteBuffer
    
    fun getShort(i: Int): Short
    fun putShort(i: Int, i1: Short): ByteBuffer
    
    fun getInt(): Int
    fun putInt(i: Int): ByteBuffer
    
    fun getInt(i: Int): Int
    fun putInt(i: Int, i1: Int): ByteBuffer
    
    fun getLong(): Long
    fun putLong(l: Long): ByteBuffer
    
    fun getLong(i: Int): Long
    fun putLong(i: Int, l: Long): ByteBuffer
    
    fun getFloat(): Float
    fun putFloat(v: Float): ByteBuffer
    
    fun getFloat(i: Int): Float
    fun putFloat(i: Int, v: Float): ByteBuffer
    
    fun getDouble(): Double
    fun putDouble(v: Double): ByteBuffer
    
    fun getDouble(i: Int): Double
    fun putDouble(i: Int, v: Double): ByteBuffer
    
    companion object {
        fun allocateDirect(capacity: Int): ByteBuffer {}
        
        fun allocate(capacity: Int): ByteBuffer {}
        
        fun wrap(
            array: Data,
            offset: Int,
            length: Int
        ): ByteBuffer {}
        
        fun wrap(array: Data): ByteBuffer {}
    }
}

enum class ByteOrder {
    BIG_ENDIAN,
    LITTLE_ENDIAN
}

*/


