// Generated by Khrysalis TypeScript converter - this file will be overwritten.
// File: location/GeoCoordinate.actual.kt
// Package: com.lightningkite.khrysalis.location
// FQImport: longitude TS setAndroidLocationLocationLongitude
// FQImport: com.lightningkite.khrysalis.location.distanceToMiles.loc2 TS loc2
// FQImport: android.location.Location TS Location
// FQImport: android.location.Location.distanceTo TS distanceTo
// FQImport: latitude TS setAndroidLocationLocationLatitude
// FQImport: com.lightningkite.khrysalis.location.GeoCoordinate.longitude TS longitude
// FQImport: com.lightningkite.khrysalis.location.GeoCoordinate TS GeoCoordinate
// FQImport: com.lightningkite.khrysalis.location.distanceToMiles.other TS other
// FQImport: com.lightningkite.khrysalis.location.GeoCoordinate.latitude TS latitude
// FQImport: com.lightningkite.khrysalis.location.distanceToMiles.loc1 TS loc1
import { GeoCoordinate } from './GeoCoordinate.shared'

//! Declares com.lightningkite.khrysalis.location.distanceToMiles
export function comLightningkiteKhrysalisLocationGeoCoordinateDistanceToMiles(this_DistanceToMiles: GeoCoordinate, other: GeoCoordinate): number{
    const loc1 = Location.constructorkotlinString("");
    
    setAndroidLocationLocationLatitude(loc1, this_DistanceToMiles.latitude);
    setAndroidLocationLocationLongitude(loc1, this_DistanceToMiles.longitude);
    const loc2 = Location.constructorkotlinString("");
    
    setAndroidLocationLocationLatitude(loc2, other.latitude);
    setAndroidLocationLocationLongitude(loc2, other.longitude);
    
    //meters to miles
    return loc1.distanceTo(loc2) / 1609.34;
}

