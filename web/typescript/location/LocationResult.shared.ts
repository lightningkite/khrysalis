// Generated by Khrysalis TypeScript converter - this file will be overwritten.
// File: location/LocationResult.shared.kt
// Package: com.lightningkite.khrysalis.location
// FQImport: com.lightningkite.khrysalis.location.GeoCoordinate TS GeoCoordinate
import { GeoCoordinate } from './GeoCoordinate.shared'

//! Declares com.lightningkite.khrysalis.location.LocationResult
export class LocationResult {
    public readonly coordinate: GeoCoordinate;
    public readonly accuracyMeters: number;
    public readonly altitudeMeters: number;
    public readonly altitudeAccuracyMeters: number;
    public readonly headingFromNorth: number;
    public readonly speedMetersPerSecond: number;
    public constructor( coordinate: GeoCoordinate = new GeoCoordinate(0.0, 0.0),  accuracyMeters: number = 100.0,  altitudeMeters: number = 0.0,  altitudeAccuracyMeters: number = 100.0,  headingFromNorth: number = 0.0,  speedMetersPerSecond: number = 0.0) {
        this.coordinate = coordinate;
        this.accuracyMeters = accuracyMeters;
        this.altitudeMeters = altitudeMeters;
        this.altitudeAccuracyMeters = altitudeAccuracyMeters;
        this.headingFromNorth = headingFromNorth;
        this.speedMetersPerSecond = speedMetersPerSecond;
    }
    public hashCode(): number {
        let hash = 17;
        hash = 31 * hash + this.coordinate.hashCode();
        hash = 31 * hash + Math.floor(this.accuracyMeters);
        hash = 31 * hash + Math.floor(this.altitudeMeters);
        hash = 31 * hash + Math.floor(this.altitudeAccuracyMeters);
        hash = 31 * hash + Math.floor(this.headingFromNorth);
        hash = 31 * hash + Math.floor(this.speedMetersPerSecond);
        return hash;
    }
    public equals(other: any): boolean { return other instanceof LocationResult && this.coordinate.equals(other.coordinate) && this.accuracyMeters === other.accuracyMeters && this.altitudeMeters === other.altitudeMeters && this.altitudeAccuracyMeters === other.altitudeAccuracyMeters && this.headingFromNorth === other.headingFromNorth && this.speedMetersPerSecond === other.speedMetersPerSecond }
    public toString(): string { return `LocationResult(coordinate = ${this.coordinate}, accuracyMeters = ${this.accuracyMeters}, altitudeMeters = ${this.altitudeMeters}, altitudeAccuracyMeters = ${this.altitudeAccuracyMeters}, headingFromNorth = ${this.headingFromNorth}, speedMetersPerSecond = ${this.speedMetersPerSecond})` }
    public copy(coordinate: GeoCoordinate = this.coordinate, accuracyMeters: number = this.accuracyMeters, altitudeMeters: number = this.altitudeMeters, altitudeAccuracyMeters: number = this.altitudeAccuracyMeters, headingFromNorth: number = this.headingFromNorth, speedMetersPerSecond: number = this.speedMetersPerSecond) { return new LocationResult(coordinate, accuracyMeters, altitudeMeters, altitudeAccuracyMeters, headingFromNorth, speedMetersPerSecond); }
}

