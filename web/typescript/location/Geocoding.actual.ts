// Generated by Khrysalis TypeScript converter - this file will be overwritten.
// File: location/Geocoding.actual.kt
// Package: com.lightningkite.khrysalis.location
// FQImport: java.lang.Thread TS Thread
// FQImport: com.lightningkite.khrysalis.post TS post
// FQImport: com.lightningkite.khrysalis.location.GeoCoordinate.longitude TS longitude
// FQImport: android.location.Geocoder.getFromLocationName TS getFromLocationName
// FQImport: com.lightningkite.khrysalis.views.ViewDependency TS ViewDependency
// FQImport: com.lightningkite.khrysalis.location.GeoCoordinate TS GeoCoordinate
// FQImport: com.lightningkite.khrysalis.location.geocode.address TS address
// FQImport: android.location.Geocoder TS Geocoder
// FQImport: com.lightningkite.khrysalis.location.GeoAddress TS GeoAddress
// FQImport: com.lightningkite.khrysalis.location.geocode.coordinate TS coordinate
// FQImport: com.lightningkite.khrysalis.location.geocode.onResult TS onResult
// FQImport: java.lang.Thread.start TS start
// FQImport: android.location.Geocoder.getFromLocation TS getFromLocation
// FQImport: com.lightningkite.khrysalis.location.toKhrysalis TS androidLocationAddressToKhrysalis
// FQImport: com.lightningkite.khrysalis.location.geocode.<anonymous>.result TS result
// FQImport: com.lightningkite.khrysalis.location.geocode.<anonymous>.<anonymous>.<anonymous>.it TS it
// FQImport: com.lightningkite.khrysalis.location.GeoCoordinate.latitude TS latitude
// FQImport: com.lightningkite.khrysalis.android.ActivityAccess.context TS context
import { GeoCoordinate } from './GeoCoordinate.shared'
import { GeoAddress } from './GeoAddress.shared'
import { ViewDependency } from './../views/ViewDependency.actual'
import { post } from './../delay.actual'

//! Declares com.lightningkite.khrysalis.location.geocode
export function comLightningkiteKhrysalisAndroidActivityAccessGeocode(this_Geocode: ViewDependency, coordinate: GeoCoordinate, onResult: (a: Array<GeoAddress>) => void){
    (() => {if(coordinate.latitude === 0.0 && coordinate.longitude === 0.0){
                this.onResult([]);
                return;
    }})()
    Thread.constructorkotlinFunction(() => {
            const result = Geocoder.constructorandroidcontentContext(this_Geocode.context)
            .getFromLocation(coordinate.latitude, coordinate.longitude, 1);
            
            post(() => this.onResult(result.map((it) => androidLocationAddressToKhrysalis(it))));
    }).start();
}

//! Declares com.lightningkite.khrysalis.location.geocode
export function comLightningkiteKhrysalisAndroidActivityAccessGeocode(this_Geocode: ViewDependency, address: string, onResult: (a: Array<GeoAddress>) => void){
    (() => {if(address === ""){
                this.onResult([]);
                return;
    }})()
    Thread.constructorkotlinFunction(() => {
            const result = Geocoder.constructorandroidcontentContext(this_Geocode.context)
            .getFromLocationName(address, 1);
            
            post(() => this.onResult(result.map((it) => androidLocationAddressToKhrysalis(it))));
    }).start();
}

