// Generated by Khrysalis TypeScript converter - this file will be overwritten.
// File: bluetooth/BleServer.actual.kt
// Package: com.lightningkite.khrysalis.bluetooth

//! Declares com.lightningkite.khrysalis.bluetooth.RequestId
export type RequestId = number;
//! Declares com.lightningkite.khrysalis.bluetooth.RequestId
export let RequestId = Number;

//! Declares com.lightningkite.khrysalis.bluetooth.BleResponseStatus
export class BleResponseStatus {
    public readonly value: number;
    private constructor(name: string, value: number) {
        this.name = name;
        this.value = value;
    }
    //CBATTError.Code in iOS
    public static success = new BleResponseStatus("success", 0);
    
    public static invalidHandle = new BleResponseStatus("invalidHandle", 1);
    
    public static readNotPermitted = new BleResponseStatus("readNotPermitted", 2);
    
    public static writeNotPermitted = new BleResponseStatus("writeNotPermitted", 3);
    
    public static invalidPdu = new BleResponseStatus("invalidPdu", 4);
    
    public static insufficientAuthentication = new BleResponseStatus("insufficientAuthentication", 5);
    
    public static requestNotSupported = new BleResponseStatus("requestNotSupported", 6);
    
    public static invalidOffset = new BleResponseStatus("invalidOffset", 7);
    
    public static insufficientAuthorization = new BleResponseStatus("insufficientAuthorization", 8);
    
    public static prepareQueueFull = new BleResponseStatus("prepareQueueFull", 9);
    
    public static attributeNotFound = new BleResponseStatus("attributeNotFound", 10);
    
    public static attributeNotLong = new BleResponseStatus("attributeNotLong", 11);
    
    public static insufficientEncryptionKeySize = new BleResponseStatus("insufficientEncryptionKeySize", 12);
    
    public static invalidAttributeValueLength = new BleResponseStatus("invalidAttributeValueLength", 13);
    
    public static unlikelyError = new BleResponseStatus("unlikelyError", 14);
    
    public static insufficientEncryption = new BleResponseStatus("insufficientEncryption", 15);
    
    public static unsupportedGroupType = new BleResponseStatus("unsupportedGroupType", 16);
    
    public static insufficientResources = new BleResponseStatus("insufficientResources", 17);
    
    private static _values: Array<BleResponseStatus> = [BleResponseStatus.success, BleResponseStatus.invalidHandle, BleResponseStatus.readNotPermitted, BleResponseStatus.writeNotPermitted, BleResponseStatus.invalidPdu, BleResponseStatus.insufficientAuthentication, BleResponseStatus.requestNotSupported, BleResponseStatus.invalidOffset, BleResponseStatus.insufficientAuthorization, BleResponseStatus.prepareQueueFull, BleResponseStatus.attributeNotFound, BleResponseStatus.attributeNotLong, BleResponseStatus.insufficientEncryptionKeySize, BleResponseStatus.invalidAttributeValueLength, BleResponseStatus.unlikelyError, BleResponseStatus.insufficientEncryption, BleResponseStatus.unsupportedGroupType, BleResponseStatus.insufficientResources];
    public static values(): Array<BleResponseStatus> { return BleResponseStatus._values; }
    public readonly name: string;
    public static valueOf(name: string): BleResponseStatus { return (BleResponseStatus as any)[name]; }
    public toString(): string { return this.name }
}

