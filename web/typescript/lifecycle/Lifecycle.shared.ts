// Generated by Khrysalis TypeScript converter - this file will be overwritten.
// File: lifecycle/Lifecycle.shared.kt
// Package: com.lightningkite.khrysalis.lifecycle
import { ComLightningkiteKhrysalisObservablesObservablePropertyAddAndRunWeak, getComLightningkiteKhrysalisObservablesObservablePropertyObservableNN } from './../observables/ObservableProperty.ext.shared'
import { StandardObservableProperty } from './../observables/StandardObservableProperty.shared'
import { Lifecycle, OnceObservableProperty } from './Lifecycle.shared'
import { ComLightningkiteKhrysalisObservablesObservablePropertyCombine } from './../observables/CombineObservableProperty.shared'
import { Box } from './../Box.actual'
import { Observable, SubscriptionLike } from 'rxjs'
import { ObservableProperty } from './../observables/ObservableProperty.shared'

//! Declares com.lightningkite.khrysalis.lifecycle.Lifecycle
export type Lifecycle = ObservableProperty<Boolean>;
//! Declares com.lightningkite.khrysalis.lifecycle.Lifecycle
export let Lifecycle = ObservableProperty;


//! Declares com.lightningkite.khrysalis.lifecycle.and
export function ComLightningkiteKhrysalisObservablesObservablePropertyAnd(this_And: ObservableProperty< Boolean>, other: ObservableProperty< Boolean>): Lifecycle{ return ComLightningkiteKhrysalisObservablesObservablePropertyCombine(this_And, other, (a, b) => a && b); }
//! Declares com.lightningkite.khrysalis.lifecycle.openCloseBinding
export function ComLightningkiteKhrysalisObservablesObservablePropertyOpenCloseBinding<A extends object>(this_OpenCloseBinding: ObservableProperty< Boolean>, target: A, open:  (a: A) => void, close:  (a: A) => void){
    let lastValue = this_OpenCloseBinding.value;
    
    if(this_OpenCloseBinding.value){
        this.open(target);
    }
    return ComLightningkiteKhrysalisObservablesObservablePropertyAddAndRunWeak(this_OpenCloseBinding, target, (target, value) => {
            if(lastValue && value.not()) {
                this.close(target);
            }
            if(lastValue.not() && value){
                this.open(target);
            }
            lastValue = value;
    });
}
//! Declares com.lightningkite.khrysalis.lifecycle.openCloseBinding
export function ComLightningkiteKhrysalisObservablesObservablePropertyOpenCloseBinding(this_OpenCloseBinding: ObservableProperty< Boolean>, open:  () => void, close:  () => void){
    let lastValue = this_OpenCloseBinding.value;
    
    if(this_OpenCloseBinding.value){
        this.open();
    }
    const everlasting = getComLightningkiteKhrysalisObservablesObservablePropertyObservableNN(this_OpenCloseBinding).subscribe(undefined, (value) => {
            if(lastValue && value.not()) {
                this.close();
            }
            if(lastValue.not() && value){
                this.open();
            }
            lastValue = value;
    }, undefined);
    
}

//! Declares com.lightningkite.khrysalis.lifecycle.once
export function ComLightningkiteKhrysalisObservablesObservablePropertyOnce(this_Once: ObservableProperty< Boolean>): ObservableProperty<Boolean>{ return new OnceObservableProperty(this_Once); }

//! Declares com.lightningkite.khrysalis.lifecycle.OnceObservableProperty
class OnceObservableProperty extends ObservableProperty<any> {
    public readonly basedOn: ObservableProperty<Boolean>;
    public constructor( basedOn: ObservableProperty<Boolean>) {
        super();
        this.basedOn = basedOn;
    }
    
    //! Declares com.lightningkite.khrysalis.lifecycle.OnceObservableProperty.value
    public get value(): Boolean { return basedOn.value; }
    
    //! Declares com.lightningkite.khrysalis.lifecycle.OnceObservableProperty.onChange
    public get onChange(): Observable<Box<Boolean>> { return basedOn.onChange.take(1); }
    
    
}

//! Declares com.lightningkite.khrysalis.lifecycle.closeWhenOff
export function ComLightningkiteKhrysalisObservablesObservablePropertyCloseWhenOff(this_CloseWhenOff: ObservableProperty< Boolean>, closeable: SubscriptionLike){
    let listener: (SubscriptionLike | null) = null;
    
    listener = getComLightningkiteKhrysalisObservablesObservablePropertyObservableNN(this_CloseWhenOff).subscribe((it) => if(it.not()) {
            closeable.unsubscribe();
            listener?.this.unsubscribe();
    }, undefined, undefined);
}

//! Declares com.lightningkite.khrysalis.lifecycle.appInForeground
export const _appInForeground = new StandardObservableProperty(false, undefined);
export function getAppInForeground(): StandardObservableProperty<Boolean> { return _appInForeground; }


