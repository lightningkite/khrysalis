// Generated by Khrysalis TypeScript converter - this file will be overwritten.
// File: time/TimeAlone.actual.kt
// Package: com.lightningkite.khrysalis.time
// FQImport: java.util.Date TS Date
// FQImport: com.lightningkite.khrysalis.time.dateAlone TS getJavaUtilDateDateAlone
// FQImport: com.lightningkite.khrysalis.time.plus.result TS result
// FQImport: com.lightningkite.khrysalis.time.TimeInterval TS TimeInterval
// FQImport: com.lightningkite.khrysalis.time.TimeInterval.milliseconds TS milliseconds
// FQImport: java.text.SimpleDateFormat TS SimpleDateFormat
// FQImport: com.lightningkite.khrysalis.time.minus.rhs TS rhs
// FQImport: com.lightningkite.khrysalis.time.TimeAlone TS TimeAlone
// FQImport: com.lightningkite.khrysalis.time.TimeAlone.second TS second
// FQImport: java.text.SimpleDateFormat.format TS format
// FQImport: com.lightningkite.khrysalis.time.plus.rhs TS rhs
// FQImport: com.lightningkite.khrysalis.time.timeAlone TS getJavaUtilDateTimeAlone
// FQImport: kotlin.text.toIntOrNull TS kotlinStringToIntOrNull
// FQImport: com.lightningkite.khrysalis.time.TimeAlone SKIPPED due to same file
// FQImport: com.lightningkite.khrysalis.time.TimeAlone.<set-hoursInDay>.value TS value
// FQImport: com.lightningkite.khrysalis.time.minus.result TS result
// FQImport: kotlin.text.substringBefore TS kotlinStringSubstringBefore
// FQImport: com.lightningkite.khrysalis.time.TimeAlone.Companion.iso.string TS string
// FQImport: com.lightningkite.khrysalis.time.TimeAlone.hour TS hour
// FQImport: com.lightningkite.khrysalis.time.TimeAlone.minute TS minute
// FQImport: com.lightningkite.khrysalis.time.dateFrom TS dateFrom
// FQImport: kotlin.text.substringAfter TS kotlinStringSubstringAfter
// FQImport: com.lightningkite.khrysalis.time.TimeAlone.<set-secondsInDay>.value TS value
import { TimeInterval } from './TimeInterval.actual'
import { dateFrom, getJavaUtilDateDateAlone, getJavaUtilDateTimeAlone } from './Date.actual'
import { kotlinStringSubstringAfter, kotlinStringSubstringBefore } from './../kotlin/kotlin.text'

//! Declares com.lightningkite.khrysalis.time.TimeAlone
export class TimeAlone {
    public hour: number;
    public minute: number;
    public second: number;
    public constructor( hour: number,  minute: number,  second: number) {
        this.hour = hour;
        this.minute = minute;
        this.second = second;
    }
    public hashCode(): number {
        let hash = 17;
        hash = 31 * hash + this.hour;
        hash = 31 * hash + this.minute;
        hash = 31 * hash + this.second;
        return hash;
    }
    public equals(other: any): boolean { return other instanceof TimeAlone && this.hour === other.hour && this.minute === other.minute && this.second === other.second }
    public toString(): string { return `TimeAlone(hour = ${this.hour}, minute = ${this.minute}, second = ${this.second})` }
    public copy(hour: number = this.hour, minute: number = this.minute, second: number = this.second) { return new TimeAlone(hour, minute, second); }
    
    public static Companion = class Companion {
        private constructor() {
            this.min = new TimeAlone(0, 0, 0);
            this.midnight = TimeAlone.Companion.INSTANCE.min;
            this.noon = new TimeAlone(12, 0, 0);
            this.max = new TimeAlone(23, 59, 59);
        }
        public static INSTANCE = new Companion();
        
        public now(): TimeAlone{ return getJavaUtilDateTimeAlone(Date.constructor()); }
        public iso(string: string): (TimeAlone | null){
            return new TimeAlone(kotlinStringToIntOrNull(kotlinStringSubstringBefore(string, ":", "")) ?: return null, kotlinStringToIntOrNull(kotlinStringSubstringBefore(kotlinStringSubstringAfter(string, ":", ""), ":", "")) ?: return null, kotlinStringToIntOrNull(kotlinStringSubstringAfter(kotlinStringSubstringAfter(string, ":", ""), ":", "")) ?: 0);
        }
        
        public readonly min = new TimeAlone(0, 0, 0);
        
        public readonly midnight = TimeAlone.Companion.INSTANCE.min;
        
        public readonly noon = new TimeAlone(12, 0, 0);
        
        public readonly max = new TimeAlone(23, 59, 59);
        
    }
    
    //! Declares com.lightningkite.khrysalis.time.TimeAlone.comparable
    public get comparable(): number { return this.hour * 60 * 60 + this.minute * 60 + this.second; }
    
    //! Declares com.lightningkite.khrysalis.time.TimeAlone.secondsInDay
    public get secondsInDay(): number { return this.hour * 60 * 60 + this.minute * 60 + this.second; }
    public set secondsInDay(value: number) {
        this.hour = value / 60 / 60;
        this.minute = value / 60 % 60;
        this.second = value % 60;
    }
    
    //! Declares com.lightningkite.khrysalis.time.TimeAlone.hoursInDay
    public get hoursInDay(): number { return this.hour + this.minute / 60f + this.second / 3600f + 0.5f / 3600f; }
    public set hoursInDay(value: number) {
        this.hour = Math.floor(value);
        this.minute = Math.floor((value * 60f)) % 60;
        this.second = Math.floor((value * 3600f)) % 60;
    }
    
}

//! Declares com.lightningkite.khrysalis.time.iso8601
export function comLightningkiteKhrysalisTimeTimeAloneIso8601(this_Iso8601: TimeAlone): string{ return SimpleDateFormat.constructorkotlinString("HH:mm:ss").format(dateFrom(getJavaUtilDateDateAlone(Date.constructor()), this_Iso8601, undefined)); }

//! Declares com.lightningkite.khrysalis.time.minus
export function comLightningkiteKhrysalisTimeTimeAloneMinus(this_Minus: TimeAlone, rhs: TimeAlone): TimeAlone{
    const result = (this_Minus.hour * 60 * 60 + this_Minus.minute * 60 + this_Minus.second) - (rhs.hour * 60 * 60 + rhs.minute * 60 + rhs.second);
    
    return (() => {if (result < 0) {
                return new TimeAlone(0, 0, 0);
            } else {
                return new TimeAlone(result / 60 / 60, result / 60 % 60, result % 60);
    }})();
}

//! Declares com.lightningkite.khrysalis.time.plus
export function comLightningkiteKhrysalisTimeTimeAlonePlus(this_Plus: TimeAlone, rhs: TimeAlone): TimeAlone{
    const result = (this_Plus.hour * 60 * 60 + this_Plus.minute * 60 + this_Plus.second) + (rhs.hour * 60 * 60 + rhs.minute * 60 + rhs.second);
    
    return new TimeAlone(result / 60 / 60, result / 60 % 60, result % 60);
}

//! Declares com.lightningkite.khrysalis.time.minus
export function comLightningkiteKhrysalisTimeTimeAloneMinus(this_Minus: TimeAlone, rhs: TimeInterval): TimeAlone{
    const result = (this_Minus.hour * 60 * 60 + this_Minus.minute * 60 + this_Minus.second) - rhs.milliseconds / 1000;
    
    return (() => {if (result < 0) {
                return new TimeAlone(0, 0, 0);
            } else {
                return new TimeAlone(result / 60 / 60, result / 60 % 60, result % 60);
    }})();
}

//! Declares com.lightningkite.khrysalis.time.plus
export function comLightningkiteKhrysalisTimeTimeAlonePlus(this_Plus: TimeAlone, rhs: TimeInterval): TimeAlone{
    const result = (this_Plus.hour * 60 * 60 + this_Plus.minute * 60 + this_Plus.second) + rhs.milliseconds / 1000;
    
    return new TimeAlone(result / 60 / 60, result / 60 % 60, result % 60);
}

