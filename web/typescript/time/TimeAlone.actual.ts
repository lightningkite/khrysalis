// Generated by Khrysalis TypeScript converter - this file will be overwritten.
// File: time/TimeAlone.actual.kt
// Package: com.lightningkite.khrysalis.time
import { TimeAlone } from './TimeAlone.actual'
import { TimeInterval } from './TimeInterval.actual'

//! Declares com.lightningkite.khrysalis.time.TimeAlone
export class TimeAlone {
    public hour: number;
    public minute: number;
    public second: number;
    public constructor( hour: number,  minute: number,  second: number) {
        this.hour = hour;
        this.minute = minute;
        this.second = second;
    }
    public hashCode(): number {
        let hash = 17;
        hash = 31 * hash + this.hour;
        hash = 31 * hash + this.minute;
        hash = 31 * hash + this.second;
        return hash;
    }
    public equals(other: any): boolean { return other instanceof TimeAlone && this.hour === other.hour && this.minute === other.minute && this.second === other.second }
    public toString(): string { return `TimeAlone(hour = ${this.hour}, minute = ${this.minute}, second = ${this.second})` }
    public copy(hour: number = this.hour, minute: number = this.minute, second: number = this.second) { return new TimeAlone(hour, minute, second); }
    
    public static Companion = class Companion {
        private constructor() {
            this.min = new TimeAlone(0, 0, 0);
            this.midnight = TimeAlone.Companion.INSTANCE.min;
            this.noon = new TimeAlone(12, 0, 0);
            this.max = new TimeAlone(23, 59, 59);
        }
        public static INSTANCE = new Companion();
        
        public now(): TimeAlone{}
        public iso(string: string): (TimeAlone | null){}
        
        public readonly min = new TimeAlone(0, 0, 0);
        
        public readonly midnight = TimeAlone.Companion.INSTANCE.min;
        
        public readonly noon = new TimeAlone(12, 0, 0);
        
        public readonly max = new TimeAlone(23, 59, 59);
        
    }
    
    //! Declares com.lightningkite.khrysalis.time.TimeAlone.comparable
    public get comparable(): number { return this.hour * 60 * 60 + this.minute * 60 + this.second; }{}
    
    //! Declares com.lightningkite.khrysalis.time.TimeAlone.secondsInDay
    public get secondsInDay(): number { return this.hour * 60 * 60 + this.minute * 60 + this.second; }{}
    public set secondsInDay(value: number) {}
    
    //! Declares com.lightningkite.khrysalis.time.TimeAlone.hoursInDay
    public get hoursInDay(): number { return this.hour + this.minute / 60f + this.second / 3600f + 0.5f / 3600f; }{}
    public set hoursInDay(value: number) {}
    
}

//! Declares com.lightningkite.khrysalis.time.iso8601
export function ComLightningkiteKhrysalisTimeTimeAloneIso8601(this_Iso8601: TimeAlone): string{}

//! Declares com.lightningkite.khrysalis.time.minus
export function ComLightningkiteKhrysalisTimeTimeAloneMinus(this_Minus: TimeAlone, rhs: TimeAlone): TimeAlone{}

//! Declares com.lightningkite.khrysalis.time.plus
export function ComLightningkiteKhrysalisTimeTimeAlonePlus(this_Plus: TimeAlone, rhs: TimeAlone): TimeAlone{}

//! Declares com.lightningkite.khrysalis.time.minus
export function ComLightningkiteKhrysalisTimeTimeAloneMinus(this_Minus: TimeAlone, rhs: TimeInterval): TimeAlone{}

//! Declares com.lightningkite.khrysalis.time.plus
export function ComLightningkiteKhrysalisTimeTimeAlonePlus(this_Plus: TimeAlone, rhs: TimeInterval): TimeAlone{}

