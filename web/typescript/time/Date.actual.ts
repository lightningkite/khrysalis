// Generated by Khrysalis TypeScript converter - this file will be overwritten.
// File: time/Date.actual.kt
// Package: com.lightningkite.khrysalis.time
// FQImport: com.lightningkite.khrysalis.time.addYearAd TS javaUtilDateAddYearAd
// FQImport: com.lightningkite.khrysalis.time.TimeInterval.milliseconds TS milliseconds
// FQImport: com.lightningkite.khrysalis.time.secondOfMinute.<anonymous>.it TS it
// FQImport: com.lightningkite.khrysalis.time.addDayOfWeek.<anonymous>.it TS it
// FQImport: com.lightningkite.khrysalis.time.dateFrom.<anonymous>.it TS it
// FQImport: com.lightningkite.khrysalis.time.useDate.result TS result
// FQImport: com.lightningkite.khrysalis.time.minuteOfHour TS javaUtilDateMinuteOfHour
// FQImport: com.lightningkite.khrysalis.time.yearAd TS getJavaUtilDateYearAd
// FQImport: com.lightningkite.khrysalis.time.secondOfMinute TS javaUtilDateSecondOfMinute
// FQImport: com.lightningkite.khrysalis.time.addDayOfWeek.value TS value
// FQImport: com.lightningkite.khrysalis.time.<get-secondOfMinute>.<anonymous>.it TS it
// FQImport: com.lightningkite.khrysalis.time.minuteOfHour.existing TS existing
// FQImport: com.lightningkite.khrysalis.time.sameYear.other TS other
// FQImport: com.lightningkite.khrysalis.time.addMonthOfYear.<anonymous>.it TS it
// FQImport: com.lightningkite.khrysalis.time.datePool SKIPPED due to same file
// FQImport: com.lightningkite.khrysalis.time.dateFrom.dateAlone TS dateAlone
// FQImport: com.lightningkite.khrysalis.time.TimeAlone.second TS second
// FQImport: com.lightningkite.khrysalis.time.datePool TS getDatePool
// FQImport: com.lightningkite.khrysalis.time.yearAd.existing TS existing
// FQImport: com.lightningkite.khrysalis.time.DateAlone.day TS day
// FQImport: java.lang.IllegalStateException TS IllegalStateException
// FQImport: com.lightningkite.khrysalis.time.useCalendar SKIPPED due to same file
// FQImport: com.lightningkite.khrysalis.time.setMinuteOfHour.value TS value
// FQImport: java.util.Calendar.HOUR_OF_DAY TS HOUR_OF_DAY
// FQImport: com.lightningkite.khrysalis.time.setAddMinuteOfHour.value TS value
// FQImport: com.lightningkite.khrysalis.time.format.rawTimeStyle TS rawTimeStyle
// FQImport: com.lightningkite.khrysalis.time.setAddMonthOfYear.value TS value
// FQImport: java.util.concurrent.ConcurrentLinkedQueue.offer TS offer
// FQImport: com.lightningkite.khrysalis.time.minuteOfHour.<anonymous>.it TS it
// FQImport: java.text.DateFormat.getDateInstance TS getDateInstance
// FQImport: com.lightningkite.khrysalis.time.addSecondOfMinute SKIPPED due to same file
// FQImport: com.lightningkite.khrysalis.time.hourOfDay SKIPPED due to same file
// FQImport: com.lightningkite.khrysalis.time.addSecondOfMinute.existing TS existing
// FQImport: com.lightningkite.khrysalis.time.calendarPool SKIPPED due to same file
// FQImport: java.util.Calendar TS Calendar
// FQImport: com.lightningkite.khrysalis.time.plus.interval TS interval
// FQImport: com.lightningkite.khrysalis.time.dayOfWeek TS javaUtilDateDayOfWeek
// FQImport: com.lightningkite.khrysalis.time.TimeAlone TS TimeAlone
// FQImport: com.lightningkite.khrysalis.time.addMinuteOfHour.value TS value
// FQImport: com.lightningkite.khrysalis.time.addMinuteOfHour.<anonymous>.it TS it
// FQImport: com.lightningkite.khrysalis.time.dateFromIso.iso8601 TS iso8601
// FQImport: com.lightningkite.khrysalis.time.ClockPartSize TS ClockPartSize
// FQImport: com.lightningkite.khrysalis.time.addHourOfDay.existing TS existing
// FQImport: com.lightningkite.khrysalis.time.addSecondOfMinute TS javaUtilDateAddSecondOfMinute
// FQImport: java.util.Calendar.get TS get
// FQImport: timeZone TS setJavaTextSimpleDateFormatTimeZone
// FQImport: com.lightningkite.khrysalis.time.<get-dayOfWeek>.<anonymous>.it TS it
// FQImport: com.lightningkite.khrysalis.time.set.timeAlone TS timeAlone
// FQImport: java.text.DateFormat.LONG TS LONG
// FQImport: com.lightningkite.khrysalis.time.setMonthOfYear.value TS value
// FQImport: com.lightningkite.khrysalis.time.addMonthOfYear.value TS value
// FQImport: com.lightningkite.khrysalis.time.format.dateStyle TS dateStyle
// FQImport: com.lightningkite.khrysalis.time.format.format TS format
// FQImport: com.lightningkite.khrysalis.time.calendarPool TS getCalendarPool
// FQImport: com.lightningkite.khrysalis.time.<get-timeAlone>.<anonymous>.cal TS cal
// FQImport: com.lightningkite.khrysalis.time.dayOfWeek.value TS value
// FQImport: com.lightningkite.khrysalis.time.monthOfYear.<anonymous>.it TS it
// FQImport: java.util.Calendar.set TS set
// FQImport: com.lightningkite.khrysalis.time.TimeInterval TS TimeInterval
// FQImport: java.util.Calendar.SECOND TS SECOND
// FQImport: com.lightningkite.khrysalis.time.addHourOfDay.<anonymous>.it TS it
// FQImport: com.lightningkite.khrysalis.time.format.rawDateStyle TS rawDateStyle
// FQImport: java.util.concurrent.ConcurrentLinkedQueue.poll TS poll
// FQImport: com.lightningkite.khrysalis.time.useDate.T TS T
// FQImport: com.lightningkite.khrysalis.time.addYearAd.value TS value
// FQImport: com.lightningkite.khrysalis.time.addHourOfDay.value TS value
// FQImport: com.lightningkite.khrysalis.time.secondOfMinute.existing TS existing
// FQImport: java.text.DateFormat TS DateFormat
// FQImport: java.util.Calendar.DAY_OF_MONTH TS DAY_OF_MONTH
// FQImport: timeInMillis TS setJavaUtilCalendarTimeInMillis
// FQImport: com.lightningkite.khrysalis.time.minuteOfHour SKIPPED due to same file
// FQImport: com.lightningkite.khrysalis.time.TimeAlone.hour TS hour
// FQImport: com.lightningkite.khrysalis.time.useDate.action TS action
// FQImport: java.util.Calendar.getInstance TS getInstance
// FQImport: java.text.DateFormat.format TS format
// FQImport: com.lightningkite.khrysalis.time.minuteOfHour.value TS value
// FQImport: com.lightningkite.khrysalis.time.addMonthOfYear.existing TS existing
// FQImport: com.lightningkite.khrysalis.time.yearAd TS javaUtilDateYearAd
// FQImport: java.util.Calendar.MINUTE TS MINUTE
// FQImport: com.lightningkite.khrysalis.time.ClockPartSize.Long TS Long
// FQImport: com.lightningkite.khrysalis.time.addDayOfWeek.existing TS existing
// FQImport: timeInMillis TS getJavaUtilCalendarTimeInMillis
// FQImport: java.text.DateFormat.FULL TS FULL
// FQImport: time TS getJavaUtilDateTime
// FQImport: com.lightningkite.khrysalis.time.DateAlone.month TS month
// FQImport: com.lightningkite.khrysalis.time.addDayOfMonth.existing TS existing
// FQImport: com.lightningkite.khrysalis.time.hourOfDay TS javaUtilDateHourOfDay
// FQImport: com.lightningkite.khrysalis.time.<get-dateAlone>.<anonymous>.cal TS cal
// FQImport: com.lightningkite.khrysalis.time.addYearAd.existing TS existing
// FQImport: com.lightningkite.khrysalis.time.monthOfYear.value TS value
// FQImport: com.lightningkite.khrysalis.time.<get-yearAd>.<anonymous>.it TS it
// FQImport: com.lightningkite.khrysalis.time.dayOfMonth.<anonymous>.it TS it
// FQImport: java.text.DateFormat.SHORT TS SHORT
// FQImport: com.lightningkite.khrysalis.time.useCalendar.cal TS cal
// FQImport: com.lightningkite.khrysalis.time.ClockPartSize.Short TS Short
// FQImport: com.lightningkite.khrysalis.time.addHourOfDay SKIPPED due to same file
// FQImport: com.lightningkite.khrysalis.time.addDayOfMonth.value TS value
// FQImport: com.lightningkite.khrysalis.time.hourOfDay.value TS value
// FQImport: com.lightningkite.khrysalis.time.dayOfMonth TS getJavaUtilDateDayOfMonth
// FQImport: time TS setJavaUtilDateTime
// FQImport: com.lightningkite.khrysalis.time.addHourOfDay TS javaUtilDateAddHourOfDay
// FQImport: java.text.DateFormat.getTimeInstance TS getTimeInstance
// FQImport: com.lightningkite.khrysalis.time.setAddHourOfDay.value TS value
// FQImport: com.lightningkite.khrysalis.time.ClockPartSize.Full TS Full
// FQImport: com.lightningkite.khrysalis.time.monthOfYear TS getJavaUtilDateMonthOfYear
// FQImport: com.lightningkite.khrysalis.time.addMinuteOfHour TS javaUtilDateAddMinuteOfHour
// FQImport: com.lightningkite.khrysalis.time.DateAlone TS DateAlone
// FQImport: java.util.Calendar.add TS add
// FQImport: com.lightningkite.khrysalis.time.useDate.cal TS cal
// FQImport: com.lightningkite.khrysalis.time.addMonthOfYear TS javaUtilDateAddMonthOfYear
// FQImport: java.text.DateFormat.getDateTimeInstance TS getDateTimeInstance
// FQImport: com.lightningkite.khrysalis.time.useCalendar.T TS T
// FQImport: com.lightningkite.khrysalis.time.addYearAd.<anonymous>.it TS it
// FQImport: com.lightningkite.khrysalis.time.addDayOfMonth.<anonymous>.it TS it
// FQImport: com.lightningkite.khrysalis.time.DateAlone.year TS year
// FQImport: com.lightningkite.khrysalis.time.dayOfWeek.<anonymous>.it TS it
// FQImport: java.util.concurrent.ConcurrentLinkedQueue TS ConcurrentLinkedQueue
// FQImport: com.lightningkite.khrysalis.time.TimeAlone.minute TS minute
// FQImport: com.lightningkite.khrysalis.time.monthOfYear TS javaUtilDateMonthOfYear
// FQImport: com.lightningkite.khrysalis.time.setAddSecondOfMinute.value TS value
// FQImport: com.lightningkite.khrysalis.time.addMinuteOfHour.existing TS existing
// FQImport: java.util.Date TS Date
// FQImport: com.lightningkite.khrysalis.time.sameDay.other TS other
// FQImport: kotlin.Boolean TS Boolean
// FQImport: com.lightningkite.khrysalis.time.addDayOfMonth TS javaUtilDateAddDayOfMonth
// FQImport: com.lightningkite.khrysalis.time.<get-dayOfMonth>.<anonymous>.it TS it
// FQImport: com.lightningkite.khrysalis.time.setAddYearAd.value TS value
// FQImport: java.text.DateFormat.MEDIUM TS MEDIUM
// FQImport: com.lightningkite.khrysalis.time.setDayOfMonth.value TS value
// FQImport: com.lightningkite.khrysalis.time.monthOfYear.existing TS existing
// FQImport: com.fasterxml.jackson.databind.util.StdDateFormat TS StdDateFormat
// FQImport: com.lightningkite.khrysalis.time.sameMonth.other TS other
// FQImport: com.lightningkite.khrysalis.time.setAddDayOfWeek.value TS value
// FQImport: java.text.SimpleDateFormat.format TS format
// FQImport: com.lightningkite.khrysalis.time.useCalendar TS useCalendar
// FQImport: com.lightningkite.khrysalis.time.dayOfMonth.value TS value
// FQImport: com.lightningkite.khrysalis.time.secondOfMinute.value TS value
// FQImport: com.lightningkite.khrysalis.time.setDayOfWeek.value TS value
// FQImport: com.lightningkite.khrysalis.time.ClockPartSize.None TS None
// FQImport: com.lightningkite.khrysalis.time.yearAd.value TS value
// FQImport: com.lightningkite.khrysalis.time.hourOfDay.<anonymous>.it TS it
// FQImport: com.lightningkite.khrysalis.time.secondOfMinute SKIPPED due to same file
// FQImport: com.lightningkite.khrysalis.time.dayOfMonth TS javaUtilDateDayOfMonth
// FQImport: com.lightningkite.khrysalis.time.minus.interval TS interval
// FQImport: com.lightningkite.khrysalis.time.setAddDayOfMonth.value TS value
// FQImport: com.lightningkite.khrysalis.time.setHourOfDay.value TS value
// FQImport: com.lightningkite.khrysalis.time.useCalendar.result TS result
// FQImport: com.lightningkite.khrysalis.time.dayOfWeek.existing TS existing
// FQImport: com.lightningkite.khrysalis.time.yearAd.<anonymous>.it TS it
// FQImport: com.lightningkite.khrysalis.time.<get-monthOfYear>.<anonymous>.it TS it
// FQImport: com.lightningkite.khrysalis.time.addDayOfWeek TS javaUtilDateAddDayOfWeek
// FQImport: com.lightningkite.khrysalis.time.setSecondOfMinute.value TS value
// FQImport: com.lightningkite.khrysalis.time.useCalendar.action TS action
// FQImport: com.lightningkite.khrysalis.time.set.date TS date
// FQImport: java.text.SimpleDateFormat TS SimpleDateFormat
// FQImport: java.util.Calendar.DAY_OF_WEEK TS DAY_OF_WEEK
// FQImport: com.lightningkite.khrysalis.time.addSecondOfMinute.<anonymous>.it TS it
// FQImport: com.lightningkite.khrysalis.time.ClockPartSize.Medium TS Medium
// FQImport: com.fasterxml.jackson.databind.util.StdDateFormat.withLenient TS withLenient
// FQImport: com.lightningkite.khrysalis.time.dayOfMonth.existing TS existing
// FQImport: java.util.Calendar.YEAR TS YEAR
// FQImport: com.lightningkite.khrysalis.time.addSecondOfMinute.value TS value
// FQImport: com.lightningkite.khrysalis.time.dateFrom.existing TS existing
// FQImport: java.util.TimeZone TS TimeZone
// FQImport: java.util.Calendar.MONTH TS MONTH
// FQImport: com.fasterxml.jackson.databind.util.StdDateFormat.parse TS parse
// FQImport: com.lightningkite.khrysalis.time.<get-minuteOfHour>.<anonymous>.it TS it
// FQImport: com.lightningkite.khrysalis.time.hourOfDay.existing TS existing
// FQImport: com.lightningkite.khrysalis.time.setYearAd.value TS value
// FQImport: com.lightningkite.khrysalis.time.set.<anonymous>.it TS it
// FQImport: com.lightningkite.khrysalis.time.format.timeStyle TS timeStyle
// FQImport: java.util.TimeZone.getTimeZone TS getTimeZone
// FQImport: com.lightningkite.khrysalis.time.set.dateAlone TS dateAlone
// FQImport: com.lightningkite.khrysalis.time.addMinuteOfHour SKIPPED due to same file
// FQImport: com.lightningkite.khrysalis.time.dateFrom.timeAlone TS timeAlone
// FQImport: com.lightningkite.khrysalis.time.<get-hourOfDay>.<anonymous>.it TS it
import { TimeAlone } from './TimeAlone.actual'
import { DateAlone, getJavaUtilDateDayOfMonth, getJavaUtilDateMonthOfYear, getJavaUtilDateYearAd, javaUtilDateAddDayOfMonth, javaUtilDateAddDayOfWeek, javaUtilDateAddMonthOfYear, javaUtilDateAddYearAd, javaUtilDateDayOfMonth, javaUtilDateDayOfWeek, javaUtilDateMonthOfYear, javaUtilDateYearAd } from './DateAlone.actual'
import { TimeInterval } from './TimeInterval.actual'
import { also } from 'khrysalis/dist/Kotlin'
import { ClockPartSize } from './ClockPartSize.shared'

//! Declares com.lightningkite.khrysalis.time.calendarPool
export const _calendarPool = ConcurrentLinkedQueue.constructor<Calendar>();
export function getCalendarPool(): ConcurrentLinkedQueue<Calendar> { return _calendarPool; }

//! Declares com.lightningkite.khrysalis.time.useCalendar
export function useCalendar<T>(action: (a: Calendar) => T): T{
    const cal = getCalendarPool().poll() ?: Calendar.getInstance();
    
    const result = this.action(cal);
    
    getCalendarPool().offer(cal);
    return result;
}

//! Declares com.lightningkite.khrysalis.time.datePool
export const _datePool = ConcurrentLinkedQueue.constructor<Date>();
export function getDatePool(): ConcurrentLinkedQueue<Date> { return _datePool; }

//! Declares com.lightningkite.khrysalis.time.useDate
export function useDate<T>(action: (a: Date) => T): T{
    const cal = getDatePool().poll() ?: Date.constructor();
    
    const result = this.action(cal);
    
    getDatePool().offer(cal);
    return result;
}


//! Declares com.lightningkite.khrysalis.time.plus
export function javaUtilDatePlus(this_: Date, interval: TimeInterval): Date{ return Date.constructorkotlinLong(getJavaUtilDateTime(this_) + interval.milliseconds); }


//! Declares com.lightningkite.khrysalis.time.minus
export function javaUtilDateMinus(this_: Date, interval: TimeInterval): Date{ return Date.constructorkotlinLong(getJavaUtilDateTime(this_) - interval.milliseconds); }


//! Declares com.lightningkite.khrysalis.time.dayOfWeek
export function getJavaUtilDateDayOfWeek(this_: Date): number { return useCalendar((it) => {
            setJavaUtilCalendarTimeInMillis(it, getJavaUtilDateTime(this_));; return it.get(Calendar.DAY_OF_WEEK);
}); }

//! Declares com.lightningkite.khrysalis.time.dayOfMonth
export function getJavaUtilDateDayOfMonth(this_: Date): number { return useCalendar((it) => {
            setJavaUtilCalendarTimeInMillis(it, getJavaUtilDateTime(this_));; return it.get(Calendar.DAY_OF_MONTH);
}); }

//! Declares com.lightningkite.khrysalis.time.monthOfYear
export function getJavaUtilDateMonthOfYear(this_: Date): number { return useCalendar((it) => {
            setJavaUtilCalendarTimeInMillis(it, getJavaUtilDateTime(this_));; return it.get(Calendar.MONTH) + 1;
}); }

//! Declares com.lightningkite.khrysalis.time.yearAd
export function getJavaUtilDateYearAd(this_: Date): number { return useCalendar((it) => {
            setJavaUtilCalendarTimeInMillis(it, getJavaUtilDateTime(this_));; return it.get(Calendar.YEAR);
}); }

//! Declares com.lightningkite.khrysalis.time.hourOfDay
export function getJavaUtilDateHourOfDay(this_: Date): number { return useCalendar((it) => {
            setJavaUtilCalendarTimeInMillis(it, getJavaUtilDateTime(this_));; return it.get(Calendar.HOUR_OF_DAY);
}); }

//! Declares com.lightningkite.khrysalis.time.minuteOfHour
export function getJavaUtilDateMinuteOfHour(this_: Date): number { return useCalendar((it) => {
            setJavaUtilCalendarTimeInMillis(it, getJavaUtilDateTime(this_));; return it.get(Calendar.MINUTE);
}); }

//! Declares com.lightningkite.khrysalis.time.secondOfMinute
export function getJavaUtilDateSecondOfMinute(this_: Date): number { return useCalendar((it) => {
            setJavaUtilCalendarTimeInMillis(it, getJavaUtilDateTime(this_));; return it.get(Calendar.SECOND);
}); }


//! Declares com.lightningkite.khrysalis.time.dateAlone
export function getJavaUtilDateDateAlone(this_: Date): DateAlone { return {
        return useCalendar((cal) => {
                setJavaUtilCalendarTimeInMillis(cal, getJavaUtilDateTime(this_));
                return new DateAlone(cal.get(Calendar.YEAR), cal.get(Calendar.MONTH) + 1, cal.get(Calendar.DAY_OF_MONTH));
        });
}; }{
    return useCalendar((cal) => {
            setJavaUtilCalendarTimeInMillis(cal, getJavaUtilDateTime(this_));
            return new DateAlone(cal.get(Calendar.YEAR), cal.get(Calendar.MONTH) + 1, cal.get(Calendar.DAY_OF_MONTH));
    });
}

//! Declares com.lightningkite.khrysalis.time.timeAlone
export function getJavaUtilDateTimeAlone(this_: Date): TimeAlone { return {
        return useCalendar((cal) => {
                setJavaUtilCalendarTimeInMillis(cal, getJavaUtilDateTime(this_));
                return new TimeAlone(cal.get(Calendar.HOUR_OF_DAY), cal.get(Calendar.MINUTE), cal.get(Calendar.SECOND));
        });
}; }{
    return useCalendar((cal) => {
            setJavaUtilCalendarTimeInMillis(cal, getJavaUtilDateTime(this_));
            return new TimeAlone(cal.get(Calendar.HOUR_OF_DAY), cal.get(Calendar.MINUTE), cal.get(Calendar.SECOND));
    });
}


//! Declares com.lightningkite.khrysalis.time.sameDay
export function javaUtilDateSameDay(this_: Date, other: Date): Boolean{
    return getJavaUtilDateYearAd(this_) === getJavaUtilDateYearAd(other) && getJavaUtilDateMonthOfYear(this_) === getJavaUtilDateMonthOfYear(other) && getJavaUtilDateDayOfMonth(this_) === getJavaUtilDateDayOfMonth(other);
}

//! Declares com.lightningkite.khrysalis.time.sameMonth
export function javaUtilDateSameMonth(this_: Date, other: Date): Boolean{
    return getJavaUtilDateYearAd(this_) === getJavaUtilDateYearAd(other) && getJavaUtilDateMonthOfYear(this_) === getJavaUtilDateMonthOfYear(other);
}

//! Declares com.lightningkite.khrysalis.time.sameYear
export function javaUtilDateSameYear(this_: Date, other: Date): Boolean{
    return getJavaUtilDateYearAd(this_) === getJavaUtilDateYearAd(other);
}

//! Declares com.lightningkite.khrysalis.time.dayOfWeek
export function javaUtilDateDayOfWeek(this_: Date, value: number, existing: Date = Date.constructor()){ return useCalendar((it) => {
            setJavaUtilCalendarTimeInMillis(it, getJavaUtilDateTime(this_));
            it.set(Calendar.DAY_OF_WEEK, value);
            setJavaUtilDateTime(existing, getJavaUtilCalendarTimeInMillis(it));
            return existing;
}); }

//! Declares com.lightningkite.khrysalis.time.dayOfMonth
export function javaUtilDateDayOfMonth(this_: Date, value: number, existing: Date = Date.constructor()){ return useCalendar((it) => {
            setJavaUtilCalendarTimeInMillis(it, getJavaUtilDateTime(this_));
            it.set(Calendar.DAY_OF_MONTH, value);
            setJavaUtilDateTime(existing, getJavaUtilCalendarTimeInMillis(it));
            return existing;
}); }

//! Declares com.lightningkite.khrysalis.time.monthOfYear
export function javaUtilDateMonthOfYear(this_: Date, value: number, existing: Date = Date.constructor()){ return useCalendar((it) => {
            setJavaUtilCalendarTimeInMillis(it, getJavaUtilDateTime(this_));
            it.set(Calendar.MONTH, value - 1);
            setJavaUtilDateTime(existing, getJavaUtilCalendarTimeInMillis(it));
            return existing;
}); }

//! Declares com.lightningkite.khrysalis.time.yearAd
export function javaUtilDateYearAd(this_: Date, value: number, existing: Date = Date.constructor()){ return useCalendar((it) => {
            setJavaUtilCalendarTimeInMillis(it, getJavaUtilDateTime(this_));
            it.set(Calendar.YEAR, value);
            setJavaUtilDateTime(existing, getJavaUtilCalendarTimeInMillis(it));
            return existing;
}); }

//! Declares com.lightningkite.khrysalis.time.hourOfDay
export function javaUtilDateHourOfDay(this_: Date, value: number, existing: Date = Date.constructor()){ return useCalendar((it) => {
            setJavaUtilCalendarTimeInMillis(it, getJavaUtilDateTime(this_));
            it.set(Calendar.HOUR_OF_DAY, value);
            setJavaUtilDateTime(existing, getJavaUtilCalendarTimeInMillis(it));
            return existing;
}); }

//! Declares com.lightningkite.khrysalis.time.minuteOfHour
export function javaUtilDateMinuteOfHour(this_: Date, value: number, existing: Date = Date.constructor()){ return useCalendar((it) => {
            setJavaUtilCalendarTimeInMillis(it, getJavaUtilDateTime(this_));
            it.set(Calendar.MINUTE, value);
            setJavaUtilDateTime(existing, getJavaUtilCalendarTimeInMillis(it));
            return existing;
}); }

//! Declares com.lightningkite.khrysalis.time.secondOfMinute
export function javaUtilDateSecondOfMinute(this_: Date, value: number, existing: Date = Date.constructor()){ return useCalendar((it) => {
            setJavaUtilCalendarTimeInMillis(it, getJavaUtilDateTime(this_));
            it.set(Calendar.SECOND, value);
            setJavaUtilDateTime(existing, getJavaUtilCalendarTimeInMillis(it));
            return existing;
}); }

//! Declares com.lightningkite.khrysalis.time.addDayOfWeek
export function javaUtilDateAddDayOfWeek(this_: Date, value: number, existing: Date = Date.constructor()){ return useCalendar((it) => {
            setJavaUtilCalendarTimeInMillis(it, getJavaUtilDateTime(this_));
            it.add(Calendar.DAY_OF_WEEK, value);
            setJavaUtilDateTime(existing, getJavaUtilCalendarTimeInMillis(it));
            return existing;
}); }

//! Declares com.lightningkite.khrysalis.time.addDayOfMonth
export function javaUtilDateAddDayOfMonth(this_: Date, value: number, existing: Date = Date.constructor()){ return useCalendar((it) => {
            setJavaUtilCalendarTimeInMillis(it, getJavaUtilDateTime(this_));
            it.add(Calendar.DAY_OF_MONTH, value);
            setJavaUtilDateTime(existing, getJavaUtilCalendarTimeInMillis(it));
            return existing;
}); }

//! Declares com.lightningkite.khrysalis.time.addMonthOfYear
export function javaUtilDateAddMonthOfYear(this_: Date, value: number, existing: Date = Date.constructor()){ return useCalendar((it) => {
            setJavaUtilCalendarTimeInMillis(it, getJavaUtilDateTime(this_));
            it.add(Calendar.MONTH, value);
            setJavaUtilDateTime(existing, getJavaUtilCalendarTimeInMillis(it));
            return existing;
}); }

//! Declares com.lightningkite.khrysalis.time.addYearAd
export function javaUtilDateAddYearAd(this_: Date, value: number, existing: Date = Date.constructor()){ return useCalendar((it) => {
            setJavaUtilCalendarTimeInMillis(it, getJavaUtilDateTime(this_));
            it.add(Calendar.YEAR, value);
            setJavaUtilDateTime(existing, getJavaUtilCalendarTimeInMillis(it));
            return existing;
}); }

//! Declares com.lightningkite.khrysalis.time.addHourOfDay
export function javaUtilDateAddHourOfDay(this_: Date, value: number, existing: Date = Date.constructor()){ return useCalendar((it) => {
            setJavaUtilCalendarTimeInMillis(it, getJavaUtilDateTime(this_));
            it.add(Calendar.HOUR_OF_DAY, value);
            setJavaUtilDateTime(existing, getJavaUtilCalendarTimeInMillis(it));
            return existing;
}); }

//! Declares com.lightningkite.khrysalis.time.addMinuteOfHour
export function javaUtilDateAddMinuteOfHour(this_: Date, value: number, existing: Date = Date.constructor()){ return useCalendar((it) => {
            setJavaUtilCalendarTimeInMillis(it, getJavaUtilDateTime(this_));
            it.add(Calendar.MINUTE, value);
            setJavaUtilDateTime(existing, getJavaUtilCalendarTimeInMillis(it));
            return existing;
}); }

//! Declares com.lightningkite.khrysalis.time.addSecondOfMinute
export function javaUtilDateAddSecondOfMinute(this_: Date, value: number, existing: Date = Date.constructor()){ return useCalendar((it) => {
            setJavaUtilCalendarTimeInMillis(it, getJavaUtilDateTime(this_));
            it.add(Calendar.SECOND, value);
            setJavaUtilDateTime(existing, getJavaUtilCalendarTimeInMillis(it));
            return existing;
}); }

//! Declares com.lightningkite.khrysalis.time.setDayOfWeek
export function javaUtilDateSetDayOfWeek(this_: Date, value: number){ return javaUtilDateDayOfWeek(this_, value, this_); }
//! Declares com.lightningkite.khrysalis.time.setDayOfMonth
export function javaUtilDateSetDayOfMonth(this_: Date, value: number){ return javaUtilDateDayOfMonth(this_, value, this_); }
//! Declares com.lightningkite.khrysalis.time.setMonthOfYear
export function javaUtilDateSetMonthOfYear(this_: Date, value: number){ return javaUtilDateMonthOfYear(this_, value, this_); }
//! Declares com.lightningkite.khrysalis.time.setYearAd
export function javaUtilDateSetYearAd(this_: Date, value: number){ return javaUtilDateYearAd(this_, value, this_); }
//! Declares com.lightningkite.khrysalis.time.setHourOfDay
export function javaUtilDateSetHourOfDay(this_: Date, value: number){ return javaUtilDateHourOfDay(this_, value, this_); }
//! Declares com.lightningkite.khrysalis.time.setMinuteOfHour
export function javaUtilDateSetMinuteOfHour(this_: Date, value: number){ return javaUtilDateMinuteOfHour(this_, value, this_); }
//! Declares com.lightningkite.khrysalis.time.setSecondOfMinute
export function javaUtilDateSetSecondOfMinute(this_: Date, value: number){ return javaUtilDateSecondOfMinute(this_, value, this_); }
//! Declares com.lightningkite.khrysalis.time.setAddDayOfWeek
export function javaUtilDateSetAddDayOfWeek(this_: Date, value: number){ return javaUtilDateAddDayOfWeek(this_, value, this_); }
//! Declares com.lightningkite.khrysalis.time.setAddDayOfMonth
export function javaUtilDateSetAddDayOfMonth(this_: Date, value: number){ return javaUtilDateAddDayOfMonth(this_, value, this_); }
//! Declares com.lightningkite.khrysalis.time.setAddMonthOfYear
export function javaUtilDateSetAddMonthOfYear(this_: Date, value: number){ return javaUtilDateAddMonthOfYear(this_, value, this_); }
//! Declares com.lightningkite.khrysalis.time.setAddYearAd
export function javaUtilDateSetAddYearAd(this_: Date, value: number){ return javaUtilDateAddYearAd(this_, value, this_); }
//! Declares com.lightningkite.khrysalis.time.setAddHourOfDay
export function javaUtilDateSetAddHourOfDay(this_: Date, value: number){ return javaUtilDateAddHourOfDay(this_, value, this_); }
//! Declares com.lightningkite.khrysalis.time.setAddMinuteOfHour
export function javaUtilDateSetAddMinuteOfHour(this_: Date, value: number){ return javaUtilDateAddMinuteOfHour(this_, value, this_); }
//! Declares com.lightningkite.khrysalis.time.setAddSecondOfMinute
export function javaUtilDateSetAddSecondOfMinute(this_: Date, value: number){ return javaUtilDateAddSecondOfMinute(this_, value, this_); }

//! Declares com.lightningkite.khrysalis.time.set
export function javaUtilDateSet(this_: Date, dateAlone: DateAlone): Date{
    useCalendar((it) => {
            setJavaUtilCalendarTimeInMillis(it, getJavaUtilDateTime(this_));
            it.set(Calendar.YEAR, dateAlone.year);
            it.set(Calendar.MONTH, dateAlone.month - 1);
            it.set(Calendar.DAY_OF_MONTH, dateAlone.day);
            setJavaUtilDateTime(this_, getJavaUtilCalendarTimeInMillis(it));
    });
    return this_;
}

//! Declares com.lightningkite.khrysalis.time.set
export function javaUtilDateSet(this_: Date, timeAlone: TimeAlone): Date{
    useCalendar((it) => {
            setJavaUtilCalendarTimeInMillis(it, getJavaUtilDateTime(this_));
            it.set(Calendar.HOUR_OF_DAY, timeAlone.hour);
            it.set(Calendar.MINUTE, timeAlone.minute);
            it.set(Calendar.SECOND, timeAlone.second);
            setJavaUtilDateTime(this_, getJavaUtilCalendarTimeInMillis(it));
    });
    return this_;
}

//! Declares com.lightningkite.khrysalis.time.set
export function javaUtilDateSet(this_: Date, dateAlone: DateAlone, timeAlone: TimeAlone): Date{
    useCalendar((it) => {
            setJavaUtilCalendarTimeInMillis(it, getJavaUtilDateTime(this_));
            it.set(Calendar.YEAR, dateAlone.year);
            it.set(Calendar.MONTH, dateAlone.month - 1);
            it.set(Calendar.DAY_OF_MONTH, dateAlone.day);
            it.set(Calendar.HOUR_OF_DAY, timeAlone.hour);
            it.set(Calendar.MINUTE, timeAlone.minute);
            it.set(Calendar.SECOND, timeAlone.second);
            setJavaUtilDateTime(this_, getJavaUtilCalendarTimeInMillis(it));
    });
    return this_;
}

//! Declares com.lightningkite.khrysalis.time.set
export function comLightningkiteKhrysalisTimeDateAloneSet(this_: DateAlone, date: Date): DateAlone{
    useCalendar((it) => {
            setJavaUtilCalendarTimeInMillis(it, getJavaUtilDateTime(date));
            this_.year = it.get(Calendar.YEAR);
            this_.month = it.get(Calendar.MONTH) + 1;
            this_.day = it.get(Calendar.DAY_OF_MONTH);
    });
    return this_;
}

//! Declares com.lightningkite.khrysalis.time.set
export function comLightningkiteKhrysalisTimeTimeAloneSet(this_: TimeAlone, date: Date): TimeAlone{
    useCalendar((it) => {
            setJavaUtilCalendarTimeInMillis(it, getJavaUtilDateTime(date));
            this_.hour = it.get(Calendar.HOUR_OF_DAY);
            this_.minute = it.get(Calendar.MINUTE);
            this_.second = it.get(Calendar.SECOND);
    });
    return this_;
}

//! Declares com.lightningkite.khrysalis.time.dateFrom
export function dateFrom(dateAlone: DateAlone, timeAlone: TimeAlone, existing: Date = Date.constructor()): Date{
    return useCalendar((it) => {
            it.set(Calendar.YEAR, dateAlone.year);
            it.set(Calendar.MONTH, dateAlone.month - 1);
            it.set(Calendar.DAY_OF_MONTH, dateAlone.day);
            it.set(Calendar.HOUR_OF_DAY, timeAlone.hour);
            it.set(Calendar.MINUTE, timeAlone.minute);
            it.set(Calendar.SECOND, timeAlone.second);
            setJavaUtilDateTime(existing, getJavaUtilCalendarTimeInMillis(it));
            return existing;
    });
}

//! Declares com.lightningkite.khrysalis.time.dateFromIso
export function dateFromIso(iso8601: string): (Date | null){
    return StdDateFormat.constructor().withLenient(true).parse(iso8601);
}

//! Declares com.lightningkite.khrysalis.time.format
export function javaUtilDateFormat(this_: Date, dateStyle: ClockPartSize, timeStyle: ClockPartSize): string{
    const rawDateStyle = (() => {switch(dateStyle) {
                case ClockPartSize.None:
                return DateFormat.SHORT
                break;
                case ClockPartSize.Short:
                return DateFormat.SHORT
                break;
                case ClockPartSize.Medium:
                return DateFormat.MEDIUM
                break;
                case ClockPartSize.Long:
                return DateFormat.LONG
                break;
                case ClockPartSize.Full:
                return DateFormat.FULL
                break;
            }
    })();
    
    const rawTimeStyle = (() => {switch(timeStyle) {
                case ClockPartSize.None:
                return DateFormat.SHORT
                break;
                case ClockPartSize.Short:
                return DateFormat.SHORT
                break;
                case ClockPartSize.Medium:
                return DateFormat.MEDIUM
                break;
                case ClockPartSize.Long:
                return DateFormat.LONG
                break;
                case ClockPartSize.Full:
                return DateFormat.FULL
                break;
            }
    })();
    
    
    const format = (() => {if (dateStyle.equals(ClockPartSize.None)) {
                if (timeStyle.equals(ClockPartSize.None)) {
                    throw IllegalStateException.constructor();
                }
                return DateFormat.getTimeInstance(rawTimeStyle);
            } else if (timeStyle.equals(ClockPartSize.None)) {
                return DateFormat.getDateInstance(rawDateStyle);
            } else {
                return DateFormat.getDateTimeInstance(rawDateStyle, rawTimeStyle);
    }})();
    
    return format.format(this_);
}

//! Declares com.lightningkite.khrysalis.time.iso8601
export function javaUtilDateIso8601(this_: Date): string{ return also(SimpleDateFormat.constructorkotlinString("yyyy-MM-dd'T'HH:mm:ss"), (this_1) => setJavaTextSimpleDateFormatTimeZone(this_1, TimeZone.getTimeZone("UTC"))).format(this_); }

