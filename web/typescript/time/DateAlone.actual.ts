// Generated by Khrysalis TypeScript converter - this file will be overwritten.
// File: time/DateAlone.actual.kt
// Package: com.lightningkite.khrysalis.time
// FQImport: com.lightningkite.khrysalis.time.dateAlone TS getJavaUtilDateDateAlone
// FQImport: com.lightningkite.khrysalis.time.setDayOfWeek SKIPPED due to same file
// FQImport: com.lightningkite.khrysalis.time.DateAlone.month TS month
// FQImport: com.lightningkite.khrysalis.time.setAddMonthOfYear SKIPPED due to same file
// FQImport: com.lightningkite.khrysalis.time.setAddDayOfMonth TS javaUtilDateSetAddDayOfMonth
// FQImport: com.lightningkite.khrysalis.time.setAddYearAd.<anonymous>.<anonymous>.date TS date
// FQImport: com.lightningkite.khrysalis.time.monthOfYear.value TS value
// FQImport: com.lightningkite.khrysalis.time.setDayOfMonth SKIPPED due to same file
// FQImport: com.lightningkite.khrysalis.time.yearAd.<anonymous>.date TS date
// FQImport: com.lightningkite.khrysalis.time.ClockPartSize.Short TS Short
// FQImport: com.lightningkite.khrysalis.time.setDayOfWeek.<anonymous>.<anonymous>.date TS date
// FQImport: com.lightningkite.khrysalis.time.DateAlone SKIPPED due to same file
// FQImport: com.lightningkite.khrysalis.time.setAddDayOfWeek SKIPPED due to same file
// FQImport: com.lightningkite.khrysalis.time.addDayOfMonth.value TS value
// FQImport: com.lightningkite.khrysalis.time.TimeAlone.Companion.noon TS noon
// FQImport: com.lightningkite.khrysalis.time.setYearAd TS javaUtilDateSetYearAd
// FQImport: com.lightningkite.khrysalis.time.addMonthOfYear.<anonymous>.date TS date
// FQImport: kotlin.text.toIntOrNull TS kotlinStringToIntOrNull
// FQImport: com.lightningkite.khrysalis.time.addYearAd.<anonymous>.date TS date
// FQImport: com.lightningkite.khrysalis.time.addDayOfWeek.value TS value
// FQImport: com.lightningkite.khrysalis.time.ClockPartSize.Full TS Full
// FQImport: com.lightningkite.khrysalis.time.useDate TS useDate
// FQImport: com.lightningkite.khrysalis.time.addDayOfWeek.<anonymous>.date TS date
// FQImport: com.lightningkite.khrysalis.time.DateAlone TS DateAlone
// FQImport: com.lightningkite.khrysalis.time.setMonthOfYear SKIPPED due to same file
// FQImport: com.lightningkite.khrysalis.time.setAddMonthOfYear TS javaUtilDateSetAddMonthOfYear
// FQImport: com.lightningkite.khrysalis.time.DateAlone.day TS day
// FQImport: com.lightningkite.khrysalis.time.DateAlone.year TS year
// FQImport: com.lightningkite.khrysalis.time.setAddYearAd SKIPPED due to same file
// FQImport: com.lightningkite.khrysalis.time.setDayOfMonth TS javaUtilDateSetDayOfMonth
// FQImport: com.lightningkite.khrysalis.time.setAddMonthOfYear.value TS value
// FQImport: com.lightningkite.khrysalis.time.setDayOfMonth.<anonymous>.<anonymous>.date TS date
// FQImport: com.lightningkite.khrysalis.time.setYearAd SKIPPED due to same file
// FQImport: com.lightningkite.khrysalis.time.setAddDayOfMonth.<anonymous>.<anonymous>.date TS date
// FQImport: com.lightningkite.khrysalis.time.dayOfMonth.<anonymous>.date TS date
// FQImport: java.util.Date TS Date
// FQImport: com.lightningkite.khrysalis.time.setAddYearAd.value TS value
// FQImport: com.lightningkite.khrysalis.time.setDayOfMonth.value TS value
// FQImport: com.lightningkite.khrysalis.time.setAddDayOfWeek.value TS value
// FQImport: com.lightningkite.khrysalis.time.setAddYearAd TS javaUtilDateSetAddYearAd
// FQImport: com.lightningkite.khrysalis.time.ClockPartSize TS ClockPartSize
// FQImport: com.lightningkite.khrysalis.time.formatYearless.clockPartSize TS clockPartSize
// FQImport: java.text.SimpleDateFormat.format TS format
// FQImport: com.lightningkite.khrysalis.time.dayOfMonth.value TS value
// FQImport: com.lightningkite.khrysalis.time.setAddMonthOfYear.<anonymous>.<anonymous>.date TS date
// FQImport: com.lightningkite.khrysalis.time.dayOfWeek.<anonymous>.date TS date
// FQImport: com.lightningkite.khrysalis.time.addDayOfMonth.<anonymous>.date TS date
// FQImport: com.lightningkite.khrysalis.time.setDayOfWeek.value TS value
// FQImport: com.lightningkite.khrysalis.time.dayOfWeek TS getJavaUtilDateDayOfWeek
// FQImport: com.lightningkite.khrysalis.time.setAddDayOfMonth SKIPPED due to same file
// FQImport: com.lightningkite.khrysalis.time.ClockPartSize.None TS None
// FQImport: com.lightningkite.khrysalis.time.yearAd.value TS value
// FQImport: kotlin.text.substringBefore TS kotlinStringSubstringBefore
// FQImport: com.lightningkite.khrysalis.time.setMonthOfYear.value TS value
// FQImport: com.lightningkite.khrysalis.time.DateAlone.Companion.iso.string TS string
// FQImport: com.lightningkite.khrysalis.time.setAddDayOfMonth.value TS value
// FQImport: com.lightningkite.khrysalis.time.addMonthOfYear.value TS value
// FQImport: com.lightningkite.khrysalis.time.dayOfWeek SKIPPED due to same file
// FQImport: com.lightningkite.khrysalis.time.dateFrom TS dateFrom
// FQImport: com.lightningkite.khrysalis.time.setMonthOfYear TS javaUtilDateSetMonthOfYear
// FQImport: com.lightningkite.khrysalis.time.set TS javaUtilDateSet
// FQImport: kotlin.text.substringAfter TS kotlinStringSubstringAfter
// FQImport: com.lightningkite.khrysalis.time.dayOfWeek.value TS value
// FQImport: com.lightningkite.khrysalis.time.setYearAd.<anonymous>.<anonymous>.date TS date
// FQImport: com.lightningkite.khrysalis.time.setDayOfWeek TS javaUtilDateSetDayOfWeek
// FQImport: java.text.SimpleDateFormat TS SimpleDateFormat
// FQImport: com.lightningkite.khrysalis.time.DateAlone.Companion.fromMonthInEra.monthInEra TS monthInEra
// FQImport: com.lightningkite.khrysalis.time.addYearAd.value TS value
// FQImport: com.lightningkite.khrysalis.time.ClockPartSize.Medium TS Medium
// FQImport: com.lightningkite.khrysalis.time.setYearAd.value TS value
// FQImport: kotlin.text.substringAfterLast TS kotlinStringSubstringAfterLast
// FQImport: com.lightningkite.khrysalis.time.setMonthOfYear.<anonymous>.<anonymous>.date TS date
// FQImport: com.lightningkite.khrysalis.time.setAddDayOfWeek TS javaUtilDateSetAddDayOfWeek
// FQImport: com.lightningkite.khrysalis.time.monthOfYear.<anonymous>.date TS date
// FQImport: com.lightningkite.khrysalis.time.ClockPartSize.Long TS Long
// FQImport: com.lightningkite.khrysalis.time.setAddDayOfWeek.<anonymous>.<anonymous>.date TS date
// FQImport: com.lightningkite.khrysalis.time.set TS comLightningkiteKhrysalisTimeDateAloneSet
import { comLightningkiteKhrysalisTimeDateAloneSet, javaUtilDateSet } from './TimeAlone.shared'
import { dateFrom, getJavaUtilDateDateAlone, useDate } from './Date.actual'
import { kotlinStringSubstringAfter, kotlinStringSubstringAfterLast, kotlinStringSubstringBefore } from './../kotlin/kotlin.text'
import { also } from 'khrysalis/dist/Kotlin'
import { ClockPartSize } from './ClockPartSize.shared'

//! Declares com.lightningkite.khrysalis.time.DateAlone
export class DateAlone {
    public year: number;
    public month: number;
    public day: number;
    public constructor( year: number,  month: number,  day: number) {
        this.year = year;
        this.month = month;
        this.day = day;
    }
    public hashCode(): number {
        let hash = 17;
        hash = 31 * hash + this.year;
        hash = 31 * hash + this.month;
        hash = 31 * hash + this.day;
        return hash;
    }
    public equals(other: any): boolean { return other instanceof DateAlone && this.year === other.year && this.month === other.month && this.day === other.day }
    public toString(): string { return `DateAlone(year = ${this.year}, month = ${this.month}, day = ${this.day})` }
    public copy(year: number = this.year, month: number = this.month, day: number = this.day) { return new DateAlone(year, month, day); }
    
    public static Companion = class Companion {
        private constructor() {
            this.farPast = new DateAlone(-99999, 1, 1);
            this.farFuture = new DateAlone(99999, 12, 31);
        }
        public static INSTANCE = new Companion();
        
        public now(): DateAlone{ return getJavaUtilDateDateAlone(Date.constructor()); }
        public readonly farPast = new DateAlone(-99999, 1, 1);
        
        public readonly farFuture = new DateAlone(99999, 12, 31);
        
        public iso(string: string): (DateAlone | null){
            return new DateAlone(kotlinStringToIntOrNull(kotlinStringSubstringBefore(string, "-", "")) ?: return null, kotlinStringToIntOrNull(kotlinStringSubstringBefore(kotlinStringSubstringAfter(string, "-", ""), "-", "")) ?: return null, kotlinStringToIntOrNull(kotlinStringSubstringAfterLast(string, "-", "")) ?: return null);
        }
        public fromMonthInEra(monthInEra: number): DateAlone{
            return new DateAlone((monthInEra - 1) / 12, (monthInEra - 1) % 12 + 1, 1);
        }
    }
    //! Declares com.lightningkite.khrysalis.time.DateAlone.monthInEra
    public get monthInEra(): number { return this.year * 12 + this.month; }
    
    //! Declares com.lightningkite.khrysalis.time.DateAlone.comparable
    public get comparable(): number { return this.year * 12 * 31 + this.month * 31 + this.day; }
    
    //! Declares com.lightningkite.khrysalis.time.DateAlone.dayOfWeek
    public get dayOfWeek(): number { return getJavaUtilDateDayOfWeek(dateFrom(this, TimeAlone.Companion.INSTANCE.noon, undefined)); }
    
}

//! Declares com.lightningkite.khrysalis.time.setDayOfMonth
export function comLightningkiteKhrysalisTimeDateAloneSetDayOfMonth(this_SetDayOfMonth: DateAlone, value: number): DateAlone{ return also(this_SetDayOfMonth, (this_) => useDate((date) => {
                javaUtilDateSet(date, this_);; javaUtilDateSetDayOfMonth(date, value);; comLightningkiteKhrysalisTimeDateAloneSet(date);
})); }

//! Declares com.lightningkite.khrysalis.time.setMonthOfYear
export function comLightningkiteKhrysalisTimeDateAloneSetMonthOfYear(this_SetMonthOfYear: DateAlone, value: number): DateAlone{ return also(this_SetMonthOfYear, (this_) => useDate((date) => {
                javaUtilDateSet(date, this_);; javaUtilDateSetMonthOfYear(date, value);; comLightningkiteKhrysalisTimeDateAloneSet(date);
})); }

//! Declares com.lightningkite.khrysalis.time.setYearAd
export function comLightningkiteKhrysalisTimeDateAloneSetYearAd(this_SetYearAd: DateAlone, value: number): DateAlone{ return also(this_SetYearAd, (this_) => useDate((date) => {
                javaUtilDateSet(date, this_);; javaUtilDateSetYearAd(date, value);; comLightningkiteKhrysalisTimeDateAloneSet(date);
})); }

//! Declares com.lightningkite.khrysalis.time.setDayOfWeek
export function comLightningkiteKhrysalisTimeDateAloneSetDayOfWeek(this_SetDayOfWeek: DateAlone, value: number): DateAlone{ return also(this_SetDayOfWeek, (this_) => useDate((date) => {
                javaUtilDateSet(date, this_);; javaUtilDateSetDayOfWeek(date, value);; comLightningkiteKhrysalisTimeDateAloneSet(date);
})); }

//! Declares com.lightningkite.khrysalis.time.setAddDayOfWeek
export function comLightningkiteKhrysalisTimeDateAloneSetAddDayOfWeek(this_SetAddDayOfWeek: DateAlone, value: number): DateAlone{ return also(this_SetAddDayOfWeek, (this_) => useDate((date) => {
                javaUtilDateSet(date, this_);; javaUtilDateSetAddDayOfWeek(date, value);; comLightningkiteKhrysalisTimeDateAloneSet(date);
})); }

//! Declares com.lightningkite.khrysalis.time.setAddDayOfMonth
export function comLightningkiteKhrysalisTimeDateAloneSetAddDayOfMonth(this_SetAddDayOfMonth: DateAlone, value: number): DateAlone{ return also(this_SetAddDayOfMonth, (this_) => useDate((date) => {
                javaUtilDateSet(date, this_);; javaUtilDateSetAddDayOfMonth(date, value);; comLightningkiteKhrysalisTimeDateAloneSet(date);
})); }

//! Declares com.lightningkite.khrysalis.time.setAddMonthOfYear
export function comLightningkiteKhrysalisTimeDateAloneSetAddMonthOfYear(this_SetAddMonthOfYear: DateAlone, value: number): DateAlone{ return also(this_SetAddMonthOfYear, (this_) => useDate((date) => {
                javaUtilDateSet(date, this_);; javaUtilDateSetAddMonthOfYear(date, value);; comLightningkiteKhrysalisTimeDateAloneSet(date);
})); }

//! Declares com.lightningkite.khrysalis.time.setAddYearAd
export function comLightningkiteKhrysalisTimeDateAloneSetAddYearAd(this_SetAddYearAd: DateAlone, value: number): DateAlone{ return also(this_SetAddYearAd, (this_) => useDate((date) => {
                javaUtilDateSet(date, this_);; javaUtilDateSetAddYearAd(date, value);; comLightningkiteKhrysalisTimeDateAloneSet(date);
})); }


//! Declares com.lightningkite.khrysalis.time.dayOfMonth
export function comLightningkiteKhrysalisTimeDateAloneDayOfMonth(this_DayOfMonth: DateAlone, value: number): DateAlone{ return useDate((date) => {
            javaUtilDateSet(date, this_DayOfMonth);; javaUtilDateSetDayOfMonth(date, value);; getJavaUtilDateDateAlone(date);
}); }
//! Declares com.lightningkite.khrysalis.time.monthOfYear
export function comLightningkiteKhrysalisTimeDateAloneMonthOfYear(this_MonthOfYear: DateAlone, value: number): DateAlone{ return useDate((date) => {
            javaUtilDateSet(date, this_MonthOfYear);; javaUtilDateSetMonthOfYear(date, value);; getJavaUtilDateDateAlone(date);
}); }
//! Declares com.lightningkite.khrysalis.time.yearAd
export function comLightningkiteKhrysalisTimeDateAloneYearAd(this_YearAd: DateAlone, value: number): DateAlone{ return useDate((date) => {
            javaUtilDateSet(date, this_YearAd);; javaUtilDateSetYearAd(date, value);; getJavaUtilDateDateAlone(date);
}); }
//! Declares com.lightningkite.khrysalis.time.dayOfWeek
export function comLightningkiteKhrysalisTimeDateAloneDayOfWeek(this_DayOfWeek: DateAlone, value: number): DateAlone{ return useDate((date) => {
            javaUtilDateSet(date, this_DayOfWeek);; javaUtilDateSetDayOfWeek(date, value);; getJavaUtilDateDateAlone(date);
}); }
//! Declares com.lightningkite.khrysalis.time.addDayOfWeek
export function comLightningkiteKhrysalisTimeDateAloneAddDayOfWeek(this_AddDayOfWeek: DateAlone, value: number): DateAlone{ return useDate((date) => {
            javaUtilDateSet(date, this_AddDayOfWeek);; javaUtilDateSetAddDayOfWeek(date, value);; getJavaUtilDateDateAlone(date);
}); }
//! Declares com.lightningkite.khrysalis.time.addDayOfMonth
export function comLightningkiteKhrysalisTimeDateAloneAddDayOfMonth(this_AddDayOfMonth: DateAlone, value: number): DateAlone{ return useDate((date) => {
            javaUtilDateSet(date, this_AddDayOfMonth);; javaUtilDateSetAddDayOfMonth(date, value);; getJavaUtilDateDateAlone(date);
}); }
//! Declares com.lightningkite.khrysalis.time.addMonthOfYear
export function comLightningkiteKhrysalisTimeDateAloneAddMonthOfYear(this_AddMonthOfYear: DateAlone, value: number): DateAlone{ return useDate((date) => {
            javaUtilDateSet(date, this_AddMonthOfYear);; javaUtilDateSetAddMonthOfYear(date, value);; getJavaUtilDateDateAlone(date);
}); }
//! Declares com.lightningkite.khrysalis.time.addYearAd
export function comLightningkiteKhrysalisTimeDateAloneAddYearAd(this_AddYearAd: DateAlone, value: number): DateAlone{ return useDate((date) => {
            javaUtilDateSet(date, this_AddYearAd);; javaUtilDateSetAddYearAd(date, value);; getJavaUtilDateDateAlone(date);
}); }

//! Declares com.lightningkite.khrysalis.time.iso8601
export function comLightningkiteKhrysalisTimeDateAloneIso8601(this_Iso8601: DateAlone): string{ return SimpleDateFormat.constructorkotlinString("yyyy-MM-dd").format(dateFrom(this_Iso8601, TimeAlone.Companion.INSTANCE.noon, undefined)); }

//! Declares com.lightningkite.khrysalis.time.formatYearless
export function comLightningkiteKhrysalisTimeDateAloneFormatYearless(this_FormatYearless: DateAlone, clockPartSize: ClockPartSize): string{
    return switch(clockPartSize){
        case ClockPartSize.None:
        ""
        break;
        case ClockPartSize.Short:
        SimpleDateFormat.constructorkotlinString("MMM d").format(dateFrom(this_FormatYearless, TimeAlone.Companion.INSTANCE.noon, undefined))
        break;
        case ClockPartSize.Medium:
        SimpleDateFormat.constructorkotlinString("MMMM d").format(dateFrom(this_FormatYearless, TimeAlone.Companion.INSTANCE.noon, undefined))
        break;
        case ClockPartSize.Long:
        SimpleDateFormat.constructorkotlinString("EEE MMM d").format(dateFrom(this_FormatYearless, TimeAlone.Companion.INSTANCE.noon, undefined))
        break;
        case ClockPartSize.Full:
        SimpleDateFormat.constructorkotlinString("EEEE MMMM d").format(dateFrom(this_FormatYearless, TimeAlone.Companion.INSTANCE.noon, undefined))
        break;
    }
    ;
}

