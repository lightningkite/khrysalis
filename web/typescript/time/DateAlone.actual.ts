// Generated by Khrysalis TypeScript converter - this file will be overwritten.
// File: time/DateAlone.actual.kt
// Package: com.lightningkite.khrysalis.time
import { dateFrom } from './Date.actual'
import { DateAlone, getJavaUtilDateDayOfWeek } from './DateAlone.actual'
import { ClockPartSize } from './ClockPartSize.shared'

//! Declares com.lightningkite.khrysalis.time.DateAlone
export class DateAlone {
    public year: number;
    public month: number;
    public day: number;
    public constructor( year: number,  month: number,  day: number) {
        this.year = year;
        this.month = month;
        this.day = day;
    }
    public hashCode(): number {
        let hash = 17;
        hash = 31 * hash + this.year;
        hash = 31 * hash + this.month;
        hash = 31 * hash + this.day;
        return hash;
    }
    public equals(other: any): boolean { return other instanceof DateAlone && this.year === other.year && this.month === other.month && this.day === other.day }
    public toString(): string { return `DateAlone(year = ${this.year}, month = ${this.month}, day = ${this.day})` }
    public copy(year: number = this.year, month: number = this.month, day: number = this.day) { return new DateAlone(year, month, day); }
    
    public static Companion = class Companion {
        private constructor() {
            this.farPast = new DateAlone(-99999, 1, 1);
            this.farFuture = new DateAlone(99999, 12, 31);
        }
        public static INSTANCE = new Companion();
        
        public now(): DateAlone{}
        public readonly farPast = new DateAlone(-99999, 1, 1);
        
        public readonly farFuture = new DateAlone(99999, 12, 31);
        
        public iso(string: string): (DateAlone | null){}
        public fromMonthInEra(monthInEra: number): DateAlone{}
    }
    //! Declares com.lightningkite.khrysalis.time.DateAlone.monthInEra
    public get monthInEra(): number { return this.year * 12 + this.month; }{}
    
    //! Declares com.lightningkite.khrysalis.time.DateAlone.comparable
    public get comparable(): number { return this.year * 12 * 31 + this.month * 31 + this.day; }{}
    
    //! Declares com.lightningkite.khrysalis.time.DateAlone.dayOfWeek
    public get dayOfWeek(): number { return getJavaUtilDateDayOfWeek(dateFrom(this, TimeAlone.Companion.INSTANCE.noon, undefined)); }{}
    
}

//! Declares com.lightningkite.khrysalis.time.setDayOfMonth
export function ComLightningkiteKhrysalisTimeDateAloneSetDayOfMonth(this_SetDayOfMonth: DateAlone, value: number): DateAlone{}

//! Declares com.lightningkite.khrysalis.time.setMonthOfYear
export function ComLightningkiteKhrysalisTimeDateAloneSetMonthOfYear(this_SetMonthOfYear: DateAlone, value: number): DateAlone{}

//! Declares com.lightningkite.khrysalis.time.setYearAd
export function ComLightningkiteKhrysalisTimeDateAloneSetYearAd(this_SetYearAd: DateAlone, value: number): DateAlone{}

//! Declares com.lightningkite.khrysalis.time.setDayOfWeek
export function ComLightningkiteKhrysalisTimeDateAloneSetDayOfWeek(this_SetDayOfWeek: DateAlone, value: number): DateAlone{}

//! Declares com.lightningkite.khrysalis.time.setAddDayOfWeek
export function ComLightningkiteKhrysalisTimeDateAloneSetAddDayOfWeek(this_SetAddDayOfWeek: DateAlone, value: number): DateAlone{}

//! Declares com.lightningkite.khrysalis.time.setAddDayOfMonth
export function ComLightningkiteKhrysalisTimeDateAloneSetAddDayOfMonth(this_SetAddDayOfMonth: DateAlone, value: number): DateAlone{}

//! Declares com.lightningkite.khrysalis.time.setAddMonthOfYear
export function ComLightningkiteKhrysalisTimeDateAloneSetAddMonthOfYear(this_SetAddMonthOfYear: DateAlone, value: number): DateAlone{}

//! Declares com.lightningkite.khrysalis.time.setAddYearAd
export function ComLightningkiteKhrysalisTimeDateAloneSetAddYearAd(this_SetAddYearAd: DateAlone, value: number): DateAlone{}


//! Declares com.lightningkite.khrysalis.time.dayOfMonth
export function ComLightningkiteKhrysalisTimeDateAloneDayOfMonth(this_DayOfMonth1: DateAlone, value: number): DateAlone{}
//! Declares com.lightningkite.khrysalis.time.monthOfYear
export function ComLightningkiteKhrysalisTimeDateAloneMonthOfYear(this_MonthOfYear1: DateAlone, value: number): DateAlone{}
//! Declares com.lightningkite.khrysalis.time.yearAd
export function ComLightningkiteKhrysalisTimeDateAloneYearAd(this_YearAd1: DateAlone, value: number): DateAlone{}
//! Declares com.lightningkite.khrysalis.time.dayOfWeek
export function ComLightningkiteKhrysalisTimeDateAloneDayOfWeek(this_DayOfWeek1: DateAlone, value: number): DateAlone{}
//! Declares com.lightningkite.khrysalis.time.addDayOfWeek
export function ComLightningkiteKhrysalisTimeDateAloneAddDayOfWeek(this_AddDayOfWeek: DateAlone, value: number): DateAlone{}
//! Declares com.lightningkite.khrysalis.time.addDayOfMonth
export function ComLightningkiteKhrysalisTimeDateAloneAddDayOfMonth(this_AddDayOfMonth: DateAlone, value: number): DateAlone{}
//! Declares com.lightningkite.khrysalis.time.addMonthOfYear
export function ComLightningkiteKhrysalisTimeDateAloneAddMonthOfYear(this_AddMonthOfYear: DateAlone, value: number): DateAlone{}
//! Declares com.lightningkite.khrysalis.time.addYearAd
export function ComLightningkiteKhrysalisTimeDateAloneAddYearAd(this_AddYearAd: DateAlone, value: number): DateAlone{}

//! Declares com.lightningkite.khrysalis.time.iso8601
export function ComLightningkiteKhrysalisTimeDateAloneIso8601(this_Iso8601: DateAlone): string{}

//! Declares com.lightningkite.khrysalis.time.formatYearless
export function ComLightningkiteKhrysalisTimeDateAloneFormatYearless(this_FormatYearless: DateAlone, clockPartSize: ClockPartSize): string{}

