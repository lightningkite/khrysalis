// Generated by Khrysalis TypeScript converter - this file will be overwritten.
// File: time/TimeAlone.shared.kt
// Package: com.lightningkite.khrysalis.time
// FQImport: java.util.Date TS Date
// FQImport: com.lightningkite.khrysalis.time.format>java.util.Date TS javaUtilDateFormat
// FQImport: com.lightningkite.khrysalis.time.TimeAlone TS TimeAlone
// FQImport: com.lightningkite.khrysalis.time.TimeAlone.second TS second
// FQImport: com.lightningkite.khrysalis.time.ClockPartSize TS ClockPartSize
// FQImport: com.lightningkite.khrysalis.floorMod>kotlin.Int TS kotlinIntFloorMod
// FQImport: com.lightningkite.khrysalis.time.set.other TS other
// FQImport: com.lightningkite.khrysalis.time.format.clockPartSize TS clockPartSize
// FQImport: com.lightningkite.khrysalis.time.ClockPartSize.None TS None
// FQImport: com.lightningkite.khrysalis.floorDiv>kotlin.Int TS kotlinIntFloorDiv
// FQImport: com.lightningkite.khrysalis.time.TimeAlone.hour TS hour
// FQImport: com.lightningkite.khrysalis.time.TimeAlone.minute TS minute
// FQImport: com.lightningkite.khrysalis.time.dateFrom TS dateFrom
// FQImport: com.lightningkite.khrysalis.time.dateAlone>java.util.Date TS getJavaUtilDateDateAlone
import { kotlinIntFloorDiv, kotlinIntFloorMod } from './../Math.shared'
import { TimeAlone } from './TimeAlone.actual'
import { dateFrom, getJavaUtilDateDateAlone, javaUtilDateFormat } from './Date.actual'
import { ClockPartSize } from './ClockPartSize.shared'

//! Declares com.lightningkite.khrysalis.time.normalize>com.lightningkite.khrysalis.time.TimeAlone
export function comLightningkiteKhrysalisTimeTimeAloneNormalize(this_: TimeAlone): void{
    this_.hour = kotlinIntFloorMod((this_.hour + kotlinIntFloorDiv(this_.minute, 60)), 24);
    this_.minute = kotlinIntFloorMod((this_.minute + kotlinIntFloorDiv(this_.second, 60)), 60);
    this_.second = kotlinIntFloorMod(this_.second, 60);
}

//! Declares com.lightningkite.khrysalis.time.set>com.lightningkite.khrysalis.time.TimeAlone
export function comLightningkiteKhrysalisTimeTimeAloneSet(this_: TimeAlone, other: TimeAlone): TimeAlone{
    this_.hour = other.hour;
    this_.minute = other.minute;
    this_.second = other.second;
    return this_;
}


//! Declares com.lightningkite.khrysalis.time.format>com.lightningkite.khrysalis.time.TimeAlone
export function comLightningkiteKhrysalisTimeTimeAloneFormat(this_: TimeAlone, clockPartSize: ClockPartSize): string{ return javaUtilDateFormat(dateFrom(getJavaUtilDateDateAlone(Date.constructor()), this_, undefined), ClockPartSize.None, clockPartSize); }

