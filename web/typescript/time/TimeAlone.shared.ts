// Generated by Khrysalis TypeScript converter - this file will be overwritten.
// File: time/TimeAlone.shared.kt
// Package: com.lightningkite.khrysalis.time
import { TimeAlone } from './TimeAlone.actual'
import { dateFrom, getJavaUtilDateDateAlone } from './Date.actual'
import { KotlinIntFloorDiv, KotlinIntFloorMod } from './../Math.shared'
import { JavaUtilDateFormat } from './TimeAlone.shared'
import { ClockPartSize } from './ClockPartSize.shared'

//! Declares com.lightningkite.khrysalis.time.normalize
export function ComLightningkiteKhrysalisTimeTimeAloneNormalize(this_Normalize: TimeAlone){
    this_Normalize.hour = KotlinIntFloorMod((this_Normalize.hour + KotlinIntFloorDiv(minute, 60)), 24);
    this_Normalize.minute = KotlinIntFloorMod((this_Normalize.minute + KotlinIntFloorDiv(second, 60)), 60);
    this_Normalize.second = KotlinIntFloorMod(second, 60);
}

//! Declares com.lightningkite.khrysalis.time.set
export function ComLightningkiteKhrysalisTimeTimeAloneSet(this_Set: TimeAlone, other: TimeAlone): TimeAlone{
    this_Set.hour = other.hour;
    this_Set.minute = other.minute;
    this_Set.second = other.second;
    return this_Set;
}


//! Declares com.lightningkite.khrysalis.time.format
export function ComLightningkiteKhrysalisTimeTimeAloneFormat(this_Format: TimeAlone, clockPartSize: ClockPartSize): string{ return JavaUtilDateFormat(dateFrom(getJavaUtilDateDateAlone(Date.constructor()), this_Format, undefined), ClockPartSize.None, clockPartSize); }

