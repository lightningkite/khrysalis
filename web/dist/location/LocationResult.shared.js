"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// Generated by Khrysalis TypeScript converter - this file will be overwritten.
// File: location/LocationResult.shared.kt
// Package: com.lightningkite.khrysalis.location
const Kotlin_1 = require("../Kotlin");
const GeoCoordinate_shared_1 = require("./GeoCoordinate.shared");
//! Declares com.lightningkite.khrysalis.location.LocationResult
class LocationResult {
    constructor(coordinate = new GeoCoordinate_shared_1.GeoCoordinate(0.0, 0.0), accuracyMeters = 100.0, altitudeMeters = 0.0, altitudeAccuracyMeters = 100.0, headingFromNorth = 0.0, speedMetersPerSecond = 0.0) {
        this.coordinate = coordinate;
        this.accuracyMeters = accuracyMeters;
        this.altitudeMeters = altitudeMeters;
        this.altitudeAccuracyMeters = altitudeAccuracyMeters;
        this.headingFromNorth = headingFromNorth;
        this.speedMetersPerSecond = speedMetersPerSecond;
    }
    hashCode() {
        let hash = 17;
        hash = 31 * hash + Kotlin_1.hashAnything(this.coordinate);
        hash = 31 * hash + Kotlin_1.hashAnything(this.accuracyMeters);
        hash = 31 * hash + Kotlin_1.hashAnything(this.altitudeMeters);
        hash = 31 * hash + Kotlin_1.hashAnything(this.altitudeAccuracyMeters);
        hash = 31 * hash + Kotlin_1.hashAnything(this.headingFromNorth);
        hash = 31 * hash + Kotlin_1.hashAnything(this.speedMetersPerSecond);
        return hash;
    }
    equals(other) { return other instanceof LocationResult && Kotlin_1.safeEq(this.coordinate, other.coordinate) && Kotlin_1.safeEq(this.accuracyMeters, other.accuracyMeters) && Kotlin_1.safeEq(this.altitudeMeters, other.altitudeMeters) && Kotlin_1.safeEq(this.altitudeAccuracyMeters, other.altitudeAccuracyMeters) && Kotlin_1.safeEq(this.headingFromNorth, other.headingFromNorth) && Kotlin_1.safeEq(this.speedMetersPerSecond, other.speedMetersPerSecond); }
    toString() { return `LocationResult(coordinate = ${this.coordinate}, accuracyMeters = ${this.accuracyMeters}, altitudeMeters = ${this.altitudeMeters}, altitudeAccuracyMeters = ${this.altitudeAccuracyMeters}, headingFromNorth = ${this.headingFromNorth}, speedMetersPerSecond = ${this.speedMetersPerSecond})`; }
    copy(coordinate = this.coordinate, accuracyMeters = this.accuracyMeters, altitudeMeters = this.altitudeMeters, altitudeAccuracyMeters = this.altitudeAccuracyMeters, headingFromNorth = this.headingFromNorth, speedMetersPerSecond = this.speedMetersPerSecond) { return new LocationResult(coordinate, accuracyMeters, altitudeMeters, altitudeAccuracyMeters, headingFromNorth, speedMetersPerSecond); }
}
exports.LocationResult = LocationResult;
//# sourceMappingURL=LocationResult.shared.js.map