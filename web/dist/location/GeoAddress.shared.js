"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// Generated by Khrysalis TypeScript converter - this file will be overwritten.
// File: location/GeoAddress.shared.kt
// Package: com.lightningkite.khrysalis.location
const Kotlin_1 = require("../Kotlin");
const kotlin_text_1 = require("../kotlin/kotlin.text");
const GeoCoordinate_shared_1 = require("./GeoCoordinate.shared");
const jsonParsing_1 = require("../net/jsonParsing");
//! Declares com.lightningkite.khrysalis.location.GeoAddress
class GeoAddress {
    constructor(coordinate = null, name = null, street = null, subLocality = null, locality = null, subAdminArea = null, adminArea = null, countryName = null, postalCode = null) {
        this.coordinate = coordinate;
        this.name = name;
        this.street = street;
        this.subLocality = subLocality;
        this.locality = locality;
        this.subAdminArea = subAdminArea;
        this.adminArea = adminArea;
        this.countryName = countryName;
        this.postalCode = postalCode;
    }
    static fromJson(obj) {
        return new GeoAddress(jsonParsing_1.parse(obj["coordinate"], [GeoCoordinate_shared_1.GeoCoordinate]), jsonParsing_1.parse(obj["name"], [String]), jsonParsing_1.parse(obj["street"], [String]), jsonParsing_1.parse(obj["subLocality"], [String]), jsonParsing_1.parse(obj["locality"], [String]), jsonParsing_1.parse(obj["subAdminArea"], [String]), jsonParsing_1.parse(obj["adminArea"], [String]), jsonParsing_1.parse(obj["countryName"], [String]), jsonParsing_1.parse(obj["postalCode"], [String]));
    }
    toJSON() {
        return {
            coordinate: this.coordinate,
            name: this.name,
            street: this.street,
            subLocality: this.subLocality,
            locality: this.locality,
            subAdminArea: this.subAdminArea,
            adminArea: this.adminArea,
            countryName: this.countryName,
            postalCode: this.postalCode
        };
    }
    hashCode() {
        var _a, _b;
        let hash = 17;
        hash = 31 * hash + ((_b = (_a = this.coordinate) === null || _a === void 0 ? void 0 : _a.hashCode()) !== null && _b !== void 0 ? _b : 0);
        hash = 31 * hash + Kotlin_1.hashString(this.name);
        hash = 31 * hash + Kotlin_1.hashString(this.street);
        hash = 31 * hash + Kotlin_1.hashString(this.subLocality);
        hash = 31 * hash + Kotlin_1.hashString(this.locality);
        hash = 31 * hash + Kotlin_1.hashString(this.subAdminArea);
        hash = 31 * hash + Kotlin_1.hashString(this.adminArea);
        hash = 31 * hash + Kotlin_1.hashString(this.countryName);
        hash = 31 * hash + Kotlin_1.hashString(this.postalCode);
        return hash;
    }
    equals(other) { return other instanceof GeoAddress && Kotlin_1.safeEq(this.coordinate, other.coordinate) && this.name === other.name && this.street === other.street && this.subLocality === other.subLocality && this.locality === other.locality && this.subAdminArea === other.subAdminArea && this.adminArea === other.adminArea && this.countryName === other.countryName && this.postalCode === other.postalCode; }
    toString() { return `GeoAddress(coordinate = ${this.coordinate}, name = ${this.name}, street = ${this.street}, subLocality = ${this.subLocality}, locality = ${this.locality}, subAdminArea = ${this.subAdminArea}, adminArea = ${this.adminArea}, countryName = ${this.countryName}, postalCode = ${this.postalCode})`; }
    copy(coordinate = this.coordinate, name = this.name, street = this.street, subLocality = this.subLocality, locality = this.locality, subAdminArea = this.subAdminArea, adminArea = this.adminArea, countryName = this.countryName, postalCode = this.postalCode) { return new GeoAddress(coordinate, name, street, subLocality, locality, subAdminArea, adminArea, countryName, postalCode); }
    oneLine(withCountry = false, withZip = false) {
        const builder = new kotlin_text_1.StringBuilder();
        let temp_43;
        if ((temp_43 = this.street) !== null) {
            builder.value += temp_43;
        }
        let temp_44;
        if ((temp_44 = this.locality) !== null) {
            builder.value += ' ';
            builder.value += temp_44;
        }
        let temp_45;
        if ((temp_45 = this.adminArea) !== null) {
            builder.value += ", ";
            builder.value += temp_45;
        }
        if (withCountry) {
            let temp_47;
            if ((temp_47 = this.adminArea) !== null) {
                builder.value += ' ';
                builder.value += temp_47;
            }
        }
        if (withZip) {
            let temp_48;
            if ((temp_48 = this.postalCode) !== null) {
                builder.value += ' ';
                builder.value += temp_48;
            }
        }
        return builder.toString().trim();
    }
}
exports.GeoAddress = GeoAddress;
//# sourceMappingURL=GeoAddress.shared.js.map