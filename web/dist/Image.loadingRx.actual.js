"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// Generated by Khrysalis TypeScript converter
// File: Image.loadingRx.actual.kt
// Package: com.lightningkite.khrysalis
const Image_shared_1 = require("./Image.shared");
const Kotlin_1 = require("./Kotlin");
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
//! Declares com.lightningkite.khrysalis.load>com.lightningkite.khrysalis.Image
function comLightningkiteKhrysalisImageLoad(this_) {
    return (() => {
        try {
            return (() => {
                if (this_ instanceof Image_shared_1.ImageRaw) {
                    return rxjs_1.from(createImageBitmap(new Blob([this_.raw])));
                }
                else if (this_ instanceof Image_shared_1.ImageReference) {
                    return rxjs_1.from(createImageBitmap(this_.uri));
                }
                else if (this_ instanceof Image_shared_1.ImageImageBitmap) {
                    return rxjs_1.of(this_.bitmap);
                }
                else if (this_ instanceof Image_shared_1.ImageRemoteUrl) {
                    return rxjs_1.from(fetch(this_.url))
                        .pipe(operators_1.flatMap((x) => { return x.blob(); }))
                        .pipe(operators_1.flatMap((x) => { return createImageBitmap(x); }));
                }
                else if (this_ instanceof Image_shared_1.ImageResource) {
                    let path = this_.resource.filePath;
                    if (path) {
                        return rxjs_1.from(fetch(path))
                            .pipe(operators_1.flatMap((x) => { return x.blob(); }))
                            .pipe(operators_1.flatMap((x) => { return createImageBitmap(x); }));
                    }
                    else {
                        // TODO
                        return rxjs_1.throwError(new Kotlin_1.Exception("Not able to load a resource that's not an SVG or PNG.", null));
                    }
                }
                else {
                    return rxjs_1.throwError(new Kotlin_1.Exception("This shouldn't be possible - got an image object of an unknown type.", null));
                }
            })();
        }
        catch (_e) {
            let e = _e;
            return rxjs_1.throwError(e);
        }
    })();
}
exports.comLightningkiteKhrysalisImageLoad = comLightningkiteKhrysalisImageLoad;
//# sourceMappingURL=Image.loadingRx.actual.js.map