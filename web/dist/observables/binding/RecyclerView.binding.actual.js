"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// Generated by Khrysalis TypeScript converter 
// File: observables/binding/RecyclerView.binding.actual.kt
// Package: com.lightningkite.khrysalis.observables.binding
const ObservableProperty_ext_shared_1 = require("../ObservableProperty.ext.shared");
const DisposeCondition_actual_1 = require("../../rx/DisposeCondition.actual");
const StandardObservableProperty_shared_1 = require("../StandardObservableProperty.shared");
const Kotlin_1 = require("../../Kotlin");
const LinearLayout_binding_shared_1 = require("./LinearLayout.binding.shared");
const viewAttached_1 = require("../../views/viewAttached");
//! Declares com.lightningkite.khrysalis.observables.binding.whenScrolledToEnd>androidx.recyclerview.widget.RecyclerView
function androidxRecyclerviewWidgetRecyclerViewWhenScrolledToEnd(this_, action) {
    this_.addEventListener("scroll", (ev) => {
        if (this_.scrollTop >= this_.scrollHeight - this_.offsetHeight - 10) {
            action();
        }
    });
}
exports.androidxRecyclerviewWidgetRecyclerViewWhenScrolledToEnd = androidxRecyclerviewWidgetRecyclerViewWhenScrolledToEnd;
//! Declares com.lightningkite.khrysalis.observables.binding.reverseDirection>androidx.recyclerview.widget.RecyclerView
function getAndroidxRecyclerviewWidgetRecyclerViewReverseDirection(this_) {
    return this_.style.flexDirection.endsWith("reverse");
}
exports.getAndroidxRecyclerviewWidgetRecyclerViewReverseDirection = getAndroidxRecyclerviewWidgetRecyclerViewReverseDirection;
function setAndroidxRecyclerviewWidgetRecyclerViewReverseDirection(this_, value) {
    const existing = this_.style.flexDirection;
    if (existing.startsWith("row")) {
        if (value) {
            this_.style.flexDirection = "row-reverse";
        }
        else {
            this_.style.flexDirection = "row";
        }
    }
    else {
        if (value) {
            this_.style.flexDirection = "column-reverse";
        }
        else {
            this_.style.flexDirection = "column";
        }
    }
    return;
}
exports.setAndroidxRecyclerviewWidgetRecyclerViewReverseDirection = setAndroidxRecyclerviewWidgetRecyclerViewReverseDirection;
//! Declares com.lightningkite.khrysalis.observables.binding.bind>androidx.recyclerview.widget.RecyclerView
function androidxRecyclerviewWidgetRecyclerViewBind(this_, data, defaultValue, makeView) {
    LinearLayout_binding_shared_1.androidWidgetLinearLayoutBind(this_, data, defaultValue, makeView);
}
exports.androidxRecyclerviewWidgetRecyclerViewBind = androidxRecyclerviewWidgetRecyclerViewBind;
class RVTypeHandler {
    constructor() {
        this.handlers = [];
    }
    handle(T, defaultValue, action) {
        this.handlers.push({
            type: T,
            defaultValue: defaultValue,
            action: action,
            buffer: []
        });
    }
}
exports.RVTypeHandler = RVTypeHandler;
//! Declares com.lightningkite.khrysalis.observables.binding.bindMulti>androidx.recyclerview.widget.RecyclerView
function recyclerViewBindMultiType(this_, viewDependency, data, typeHandlerSetup) {
    const h = new RVTypeHandler();
    typeHandlerSetup(h);
    androidxRecyclerviewWidgetRecyclerViewBindMulti(this_, data, null, (x) => h.handlers.findIndex((handler) => Kotlin_1.checkReified(x, handler.type)), (type, prop) => {
        const handler = h.handlers[type];
        if (handler) {
            return handler.action(prop);
        }
        else {
            return document.createElement("div");
        }
    });
}
exports.recyclerViewBindMultiType = recyclerViewBindMultiType;
//! Declares com.lightningkite.khrysalis.observables.binding.bindMulti>androidx.recyclerview.widget.RecyclerView
function androidxRecyclerviewWidgetRecyclerViewBindMulti(this_, data, defaultValue, determineType, makeView) {
    let existingViews = [];
    DisposeCondition_actual_1.ioReactivexDisposablesDisposableUntil(ObservableProperty_ext_shared_1.comLightningkiteKhrysalisObservablesObservablePropertySubscribeBy(data, undefined, undefined, (value) => {
        var _a, _b, _c;
        //Place views
        const unusedViews = existingViews;
        while (this_.firstElementChild) {
            this_.firstElementChild.remove();
        }
        existingViews = [];
        for (const item of value) {
            const type = determineType(item);
            const view = (_b = (_a = unusedViews[type]) === null || _a === void 0 ? void 0 : _a.pop()) !== null && _b !== void 0 ? _b : (() => {
                const obs = new StandardObservableProperty_shared_1.StandardObservableProperty(item);
                return [obs, makeView(type, obs)];
            })();
            view[0].value = item;
            if (this_.style.flexDirection.startsWith("column")) {
                view[1].style.width = "100%";
            }
            else {
                view[1].style.height = "100%";
            }
            this_.appendChild(view[1]);
            const sublist = (_c = existingViews[type]) !== null && _c !== void 0 ? _c : [];
            sublist.push(view);
            existingViews[type] = sublist;
        }
        for (const parts of unusedViews) {
            for (const part of parts) {
                viewAttached_1.triggerDetatchEvent(part[1]);
            }
        }
    }), DisposeCondition_actual_1.getAndroidViewViewRemoved(this_));
}
exports.androidxRecyclerviewWidgetRecyclerViewBindMulti = androidxRecyclerviewWidgetRecyclerViewBindMulti;
//! Declares com.lightningkite.khrysalis.observables.binding.bindRefresh>androidx.recyclerview.widget.RecyclerView
function androidxRecyclerviewWidgetRecyclerViewBindRefresh(this_, loading, refresh) {
    const actualRefreshView = this_.parentElement;
    let actualRefreshButton = null;
    for (let i = 0; i < actualRefreshView.children.length; i++) {
        const view = actualRefreshView.children.item(i);
        if (view.classList.contains("khrysalis-refresh-button")) {
            actualRefreshButton = view;
        }
    }
    if (actualRefreshButton) {
        actualRefreshButton.onclick = (x) => {
            refresh();
        };
        DisposeCondition_actual_1.ioReactivexDisposablesDisposableUntil(ObservableProperty_ext_shared_1.comLightningkiteKhrysalisObservablesObservablePropertySubscribeBy(loading, undefined, undefined, (x) => {
            if (x) {
                actualRefreshButton.classList.add("khrysalis-refresh-button-loading");
            }
            else {
                actualRefreshButton.classList.remove("khrysalis-refresh-button-loading");
            }
        }), DisposeCondition_actual_1.getAndroidViewViewRemoved(actualRefreshButton));
    }
}
exports.androidxRecyclerviewWidgetRecyclerViewBindRefresh = androidxRecyclerviewWidgetRecyclerViewBindRefresh;
//# sourceMappingURL=RecyclerView.binding.actual.js.map