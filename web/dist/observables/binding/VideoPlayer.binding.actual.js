"use strict";
// Generated by Khrysalis TypeScript converter
Object.defineProperty(exports, "__esModule", { value: true });
const Video_shared_1 = require("../../Video.shared");
const DisposeCondition_actual_1 = require("../../rx/DisposeCondition.actual");
const ObservableProperty_ext_shared_1 = require("../ObservableProperty.ext.shared");
const Language_1 = require("../../kotlin/Language");
//! Declares com.lightningkite.khrysalis.observables.binding.bind>com.lightningkite.khrysalis.views.VideoPlayer
function xVideoPlayerBind(this_, video) {
    DisposeCondition_actual_1.xDisposableUntil(ObservableProperty_ext_shared_1.xObservablePropertySubscribeBy(video, undefined, undefined, (x) => {
        xVideoPlayerLoadVideo(this_, x);
    }), DisposeCondition_actual_1.xViewRemovedGet(this_));
}
exports.xVideoPlayerBind = xVideoPlayerBind;
//! Declares com.lightningkite.khrysalis.observables.binding.bind>com.google.android.exoplayer2.ui.PlayerView
exports.xPlayerViewBind = xVideoPlayerBind;
function xVideoPlayerLoadVideo(this_, video) {
    if (video === null) {
        this_.src = "";
        return;
    }
    else if (video instanceof Video_shared_1.VideoReference) {
        const url = URL.createObjectURL(video.uri);
        this_.src = url;
    }
    else if (video instanceof Video_shared_1.VideoRemoteUrl) {
        this_.src = video.url;
    }
    else {
        throw new Language_1.IllegalArgumentException(`Unrecognized type ${video}`, null);
    }
}
//# sourceMappingURL=VideoPlayer.binding.actual.js.map