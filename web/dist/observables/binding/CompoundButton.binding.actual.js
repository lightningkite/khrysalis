"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// Generated by Khrysalis TypeScript converter
// File: observables/binding/CompoundButton.binding.actual.kt
// Package: com.lightningkite.khrysalis.observables.binding
const ObservableProperty_ext_shared_1 = require("../ObservableProperty.ext.shared");
const DisposeCondition_actual_1 = require("../../rx/DisposeCondition.actual");
//! Declares com.lightningkite.khrysalis.observables.binding.bindSelect>android.widget.CompoundButton
function androidWidgetCompoundButtonBindSelect(this_, value, observable) {
    DisposeCondition_actual_1.ioReactivexDisposablesDisposableUntil(ObservableProperty_ext_shared_1.comLightningkiteKhrysalisObservablesObservablePropertySubscribeBy(observable, undefined, undefined, (it) => {
        const shouldBeChecked = it.equals(value);
        if (!(this_.checked === shouldBeChecked)) {
            this_.checked = shouldBeChecked;
        }
    }), DisposeCondition_actual_1.getAndroidViewViewRemoved(this_));
    this_.onchange = ((ev) => {
        const isChecked = this_.checked;
        if (isChecked && !(observable.value.equals(value))) {
            observable.value = value;
        }
        else if (!isChecked && observable.value.equals(value)) {
            this_.checked = true;
        }
    });
}
exports.androidWidgetCompoundButtonBindSelect = androidWidgetCompoundButtonBindSelect;
//! Declares com.lightningkite.khrysalis.observables.binding.bindSelectNullable>android.widget.CompoundButton
function androidWidgetCompoundButtonBindSelectNullable(this_, value, observable) {
    DisposeCondition_actual_1.ioReactivexDisposablesDisposableUntil(ObservableProperty_ext_shared_1.comLightningkiteKhrysalisObservablesObservablePropertySubscribeBy(observable, undefined, undefined, (it) => {
        const shouldBeChecked = it.equals(value);
        if (!(this_.checked === shouldBeChecked)) {
            this_.checked = shouldBeChecked;
        }
    }), DisposeCondition_actual_1.getAndroidViewViewRemoved(this_));
    this_.onchange = ((ev) => {
        const isChecked = this_.checked;
        if (isChecked && !(observable.value.equals(value))) {
            observable.value = value;
        }
        else if (!isChecked && observable.value.equals(value)) {
            observable.value = null;
        }
    });
}
exports.androidWidgetCompoundButtonBindSelectNullable = androidWidgetCompoundButtonBindSelectNullable;
//! Declares com.lightningkite.khrysalis.observables.binding.bindSelectInvert>android.widget.CompoundButton
function androidWidgetCompoundButtonBindSelectInvert(this_, value, observable) {
    let suppress = false;
    DisposeCondition_actual_1.ioReactivexDisposablesDisposableUntil(ObservableProperty_ext_shared_1.comLightningkiteKhrysalisObservablesObservablePropertySubscribeBy(observable, undefined, undefined, (it) => {
        if (!suppress) {
            suppress = true;
            const shouldBeChecked = it.equals(value) || it.equals(null);
            if (!(this_.checked === shouldBeChecked)) {
                this_.checked = shouldBeChecked;
            }
            suppress = false;
        }
    }), DisposeCondition_actual_1.getAndroidViewViewRemoved(this_));
    this_.onchange = ((ev) => {
        const isChecked = this_.checked;
        if (!suppress) {
            suppress = true;
            if (!isChecked && observable.value.equals(value)) {
                observable.value = null;
                this_.checked = true;
            }
            else if (!(observable.value.equals(value))) {
                observable.value = value;
                this_.checked = true;
            }
            suppress = false;
        }
    });
}
exports.androidWidgetCompoundButtonBindSelectInvert = androidWidgetCompoundButtonBindSelectInvert;
//! Declares com.lightningkite.khrysalis.observables.binding.bind>android.widget.CompoundButton
function androidWidgetCompoundButtonBind(this_, observable) {
    DisposeCondition_actual_1.ioReactivexDisposablesDisposableUntil(ObservableProperty_ext_shared_1.comLightningkiteKhrysalisObservablesObservablePropertySubscribeBy(observable, undefined, undefined, (it) => {
        if (!(it === this_.checked)) {
            this_.checked = it;
        }
    }), DisposeCondition_actual_1.getAndroidViewViewRemoved(this_));
    this_.onchange = ((ev) => {
        const isChecked = this_.checked;
        if (!(observable.value === isChecked)) {
            observable.value = isChecked;
        }
    });
}
exports.androidWidgetCompoundButtonBind = androidWidgetCompoundButtonBind;
//# sourceMappingURL=CompoundButton.binding.actual.js.map