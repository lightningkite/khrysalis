"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// Generated by Khrysalis TypeScript converter - this file will be overwritten.
// File: observables/binding/View.binding.actual.kt
// Package: com.lightningkite.khrysalis.observables.binding
const ObservableProperty_ext_shared_1 = require("../ObservableProperty.ext.shared");
const DisposeCondition_actual_1 = require("../../rx/DisposeCondition.actual");
const View_ext_actual_1 = require("../../views/View.ext.actual");
//! Declares com.lightningkite.khrysalis.observables.binding.bindVisible>android.view.View
function androidViewViewBindVisible(this_, observable) {
    DisposeCondition_actual_1.ioReactivexDisposablesDisposableUntil(ObservableProperty_ext_shared_1.comLightningkiteKhrysalisObservablesObservablePropertySubscribeBy(observable, undefined, undefined, (value) => {
        View_ext_actual_1.setViewVisibility(this_, value ? "visible" : "invisible");
    }), DisposeCondition_actual_1.getAndroidViewViewRemoved(this_));
}
exports.androidViewViewBindVisible = androidViewViewBindVisible;
//! Declares com.lightningkite.khrysalis.observables.binding.bindExists>android.view.View
function androidViewViewBindExists(this_, observable) {
    DisposeCondition_actual_1.ioReactivexDisposablesDisposableUntil(ObservableProperty_ext_shared_1.comLightningkiteKhrysalisObservablesObservablePropertySubscribeBy(observable, undefined, undefined, (value) => {
        View_ext_actual_1.setViewVisibility(this_, value ? "visible" : "gone");
    }), DisposeCondition_actual_1.getAndroidViewViewRemoved(this_));
}
exports.androidViewViewBindExists = androidViewViewBindExists;
//# sourceMappingURL=View.binding.actual.js.map