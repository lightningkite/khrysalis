"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
// Generated by Khrysalis TypeScript converter - this file will be overwritten.
// File: observables/ObservableStack.shared.kt
// Package: com.lightningkite.khrysalis.observables
// FQImport: com.lightningkite.khrysalis.observables.ObservableStack.onChange TS onChange
// FQImport: com.lightningkite.khrysalis.observables.ObservableStack.swap.t TS t
// FQImport: com.lightningkite.khrysalis.observables.ObservableStack.stack TS stack
// FQImport: com.lightningkite.khrysalis.observables.ObservableStack.T TS T
// FQImport: com.lightningkite.khrysalis.observables.ObservableStack TS ObservableStack
// FQImport: com.lightningkite.khrysalis.observables.ObservableStack.popTo.found TS found
// FQImport: com.lightningkite.khrysalis.observables.ObservableStack.push.t TS t
// FQImport: com.lightningkite.khrysalis.observables.ObservableStack.popTo.predicate TS predicate
// FQImport: com.lightningkite.khrysalis.observables.ObservableProperty TS ObservableProperty
// FQImport: com.lightningkite.khrysalis.observables.ObservableStack.Companion.withFirst.value TS value
// FQImport: com.lightningkite.khrysalis.observables.ObservableStack.popTo TS popTo
// FQImport: com.lightningkite.khrysalis.observables.ObservableStack.popTo.i TS i
// FQImport: com.lightningkite.khrysalis.observables.ObservableStack.Companion.withFirst.T TS T
// FQImport: com.lightningkite.khrysalis.observables.ObservableStack.Companion.withFirst.result TS result
// FQImport: com.lightningkite.khrysalis.observables.ObservableStack.reset.t TS t
// FQImport: com.lightningkite.khrysalis.observables.ObservableStack.reset TS reset
// FQImport: com.lightningkite.khrysalis.observables.ObservableStack.popTo.t TS t
const ObservableProperty_shared_1 = require("./ObservableProperty.shared");
const Kotlin_1 = require("../Kotlin");
//! Declares com.lightningkite.khrysalis.observables.ObservableStack
class ObservableStack extends ObservableProperty_shared_1.ObservableProperty {
    constructor() { super(); }
    //! Declares com.lightningkite.khrysalis.observables.ObservableStack.value
    get value() {
        return this.stack;
    }
    push(t) {
        this.stack.push(t);
        this.onChange.next(this.stack);
    }
    swap(t) {
        this.stack.splice((this.stack.length - 1), 1);
        this.stack.push(t);
        this.onChange.next(this.stack);
    }
    pop() {
        if (this.stack.length <= 1) {
            return false;
        }
        this.stack.splice((this.stack.length - 1), 1);
        this.onChange.next(this.stack);
        return true;
    }
    dismiss() {
        if (this.stack.length === 0) {
            return false;
        }
        this.stack.splice((this.stack.length - 1), 1);
        this.onChange.next(this.stack);
        return true;
    }
    popTo(t) {
        let found = false;
        for (const i of new Kotlin_1.NumberRange(0, (this.stack.length - 1))) {
            if (found) {
                this.stack.splice((this.stack.length - 1), 1);
            }
            else if (this.stack[i] === t) {
                found = true;
            }
        }
        this.onChange.next(this.stack);
    }
    popToPredicate(predicate) {
        let found = false;
        for (const i of new Kotlin_1.NumberRange(0, (this.stack.length - 1))) {
            if (found) {
                this.stack.splice((this.stack.length - 1), 1);
            }
            else if (predicate(this.stack[i])) {
                found = true;
            }
        }
        this.onChange.next(this.stack);
    }
    root() {
        this.popTo(this.stack[0]);
    }
    reset(t) {
        this.stack.length = 0;
        this.stack.push(t);
        this.onChange.next(this.stack);
    }
}
exports.ObservableStack = ObservableStack;
ObservableStack.Companion = (_a = class Companion {
        constructor() {
        }
        withFirst(value) {
            const result = new ObservableStack();
            result.reset(value);
            return result;
        }
    },
    _a.INSTANCE = new _a(),
    _a);
