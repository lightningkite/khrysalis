"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// Generated by Khrysalis TypeScript converter - this file will be overwritten.
// File: observables/TransformedObservableProperty.shared.kt
// Package: com.lightningkite.khrysalis.observables
// FQImport: com.lightningkite.khrysalis.observables.TransformedObservableProperty.basedOn TS basedOn
// FQImport: com.lightningkite.khrysalis.observables.TransformedObservableProperty.A TS A
// FQImport: com.lightningkite.khrysalis.observables.transformed.T TS T
// FQImport: com.lightningkite.khrysalis.observables.TransformedObservableProperty.onChange.<anonymous>.it TS it
// FQImport: com.lightningkite.khrysalis.observables.map.T TS T
// FQImport: com.lightningkite.khrysalis.observables.ObservableProperty.onChange TS onChange
// FQImport: com.lightningkite.khrysalis.observables.TransformedObservableProperty TS TransformedObservableProperty
// FQImport: com.lightningkite.khrysalis.observables.transformed.read TS read
// FQImport: com.lightningkite.khrysalis.observables.ObservableProperty TS ObservableProperty
// FQImport: com.lightningkite.khrysalis.observables.map.read TS read
// FQImport: com.lightningkite.khrysalis.observables.TransformedObservableProperty.B TS B
// FQImport: com.lightningkite.khrysalis.observables.TransformedObservableProperty.read TS read
// FQImport: com.lightningkite.khrysalis.observables.transformed.B TS B
// FQImport: com.lightningkite.khrysalis.observables.map.B TS B
// FQImport: com.lightningkite.khrysalis.observables.ObservableProperty.value TS value
const ObservableProperty_shared_1 = require("./ObservableProperty.shared");
const operators_1 = require("rxjs/operators");
//! Declares com.lightningkite.khrysalis.observables.TransformedObservableProperty
class TransformedObservableProperty extends ObservableProperty_shared_1.ObservableProperty {
    constructor(basedOn, read) {
        super();
        this.basedOn = basedOn;
        this.read = read;
        this.onChange = this.basedOn.onChange.pipe(operators_1.map((it) => this.read(it)));
    }
    //! Declares com.lightningkite.khrysalis.observables.TransformedObservableProperty.value
    get value() {
        return this.read(this.basedOn.value);
    }
}
exports.TransformedObservableProperty = TransformedObservableProperty;
//! Declares com.lightningkite.khrysalis.observables.transformed>com.lightningkite.khrysalis.observables.ObservableProperty<kotlin.Any>
function comLightningkiteKhrysalisObservablesObservablePropertyTransformed(this_, read) {
    return new TransformedObservableProperty(this_, read);
}
exports.comLightningkiteKhrysalisObservablesObservablePropertyTransformed = comLightningkiteKhrysalisObservablesObservablePropertyTransformed;
//! Declares com.lightningkite.khrysalis.observables.map>com.lightningkite.khrysalis.observables.ObservableProperty<kotlin.Any>
function comLightningkiteKhrysalisObservablesObservablePropertyMap(this_, read) {
    return new TransformedObservableProperty(this_, read);
}
exports.comLightningkiteKhrysalisObservablesObservablePropertyMap = comLightningkiteKhrysalisObservablesObservablePropertyMap;
