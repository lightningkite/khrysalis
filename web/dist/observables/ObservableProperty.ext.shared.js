"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// Generated by Khrysalis TypeScript converter - this file will be overwritten.
// File: observables/ObservableProperty.ext.shared.kt
// Package: com.lightningkite.khrysalis.observables
const rxjs_1 = require("rxjs");
const WriteAddedObservableProperty_shared_1 = require("./WriteAddedObservableProperty.shared");
const KotlinCollections_1 = require("../KotlinCollections");
const TransformedObservableProperty_shared_1 = require("./TransformedObservableProperty.shared");
const operators_1 = require("rxjs/operators");
const Language_1 = require("../kotlin/Language");
//! Declares com.lightningkite.khrysalis.observables.observable>com.lightningkite.khrysalis.observables.ObservableProperty<kotlin.Any>
function getComLightningkiteKhrysalisObservablesObservablePropertyObservable(this_) {
    return rxjs_1.concat(new rxjs_1.Observable((it) => {
        it.next(this_.value);
        it.complete();
    }), this_.onChange);
}
exports.getComLightningkiteKhrysalisObservablesObservablePropertyObservable = getComLightningkiteKhrysalisObservablesObservablePropertyObservable;
//! Declares com.lightningkite.khrysalis.observables.observableNN>com.lightningkite.khrysalis.observables.ObservableProperty<kotlin.Any>
function getComLightningkiteKhrysalisObservablesObservablePropertyObservableNN(this_) {
    return rxjs_1.concat(new rxjs_1.Observable((it) => {
        it.next(this_.value);
        it.complete();
    }), this_.onChange).pipe(operators_1.map((it) => it));
}
exports.getComLightningkiteKhrysalisObservablesObservablePropertyObservableNN = getComLightningkiteKhrysalisObservablesObservablePropertyObservableNN;
//! Declares com.lightningkite.khrysalis.observables.onChangeNN>com.lightningkite.khrysalis.observables.ObservableProperty<kotlin.Any>
function getComLightningkiteKhrysalisObservablesObservablePropertyOnChangeNN(this_) { return this_.onChange.pipe(operators_1.map((it) => it)); }
exports.getComLightningkiteKhrysalisObservablesObservablePropertyOnChangeNN = getComLightningkiteKhrysalisObservablesObservablePropertyOnChangeNN;
//! Declares com.lightningkite.khrysalis.observables.subscribeBy>com.lightningkite.khrysalis.observables.ObservableProperty<kotlin.Any>
function comLightningkiteKhrysalisObservablesObservablePropertySubscribeBy(this_, onError = (it) => {
    Language_1.printStackTrace(it);
}, onComplete = () => { }, onNext = (it) => { }) {
    return getComLightningkiteKhrysalisObservablesObservablePropertyObservable(this_).subscribe((boxed) => {
        onNext(boxed);
    }, onError, onComplete);
}
exports.comLightningkiteKhrysalisObservablesObservablePropertySubscribeBy = comLightningkiteKhrysalisObservablesObservablePropertySubscribeBy;
//! Declares com.lightningkite.khrysalis.observables.includes
function includes(collection, element) {
    return WriteAddedObservableProperty_shared_1.comLightningkiteKhrysalisObservablesObservablePropertyWithWrite(TransformedObservableProperty_shared_1.comLightningkiteKhrysalisObservablesObservablePropertyMap(collection, (it) => it.has(element)), (it) => {
        if (it) {
            collection.value = new KotlinCollections_1.EqualOverrideSet([...collection.value, element]);
        }
        else {
            collection.value = new KotlinCollections_1.EqualOverrideSet([...collection.value].filter(x => x !== element));
        }
    });
}
exports.includes = includes;
//! Declares com.lightningkite.khrysalis.observables.whileActive>com.lightningkite.khrysalis.observables.ObservableProperty<kotlin.Boolean>
function comLightningkiteKhrysalisObservablesObservablePropertyWhileActive(this_, action) {
    let current = null;
    return comLightningkiteKhrysalisObservablesObservablePropertySubscribeBy(this_, undefined, undefined, (it) => {
        if (it) {
            if (current === null) {
                current = action();
            }
        }
        else {
            const temp66 = current;
            if (temp66 !== null) {
                temp66.unsubscribe();
            }
            ;
            current = null;
        }
    });
}
exports.comLightningkiteKhrysalisObservablesObservablePropertyWhileActive = comLightningkiteKhrysalisObservablesObservablePropertyWhileActive;
//# sourceMappingURL=ObservableProperty.ext.shared.js.map