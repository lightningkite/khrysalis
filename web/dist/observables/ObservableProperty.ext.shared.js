"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// Generated by Khrysalis TypeScript converter - this file will be overwritten.
// File: observables/ObservableProperty.ext.shared.kt
// Package: com.lightningkite.khrysalis.observables
// FQImport: com.lightningkite.khrysalis.observables.includes.<anonymous>.it TS it
// FQImport: com.lightningkite.khrysalis.observables.subscribeBy.onNext TS onNext
// FQImport: com.lightningkite.khrysalis.observables.MutableObservableProperty.value TS value
// FQImport: com.lightningkite.khrysalis.observables.subscribeBy.T TS T
// FQImport: com.lightningkite.khrysalis.observables.includes.collection TS collection
// FQImport: kotlin.Throwable.printStackTrace TS printStackTrace
// FQImport: kotlin.collections.Set TS Set
// FQImport: com.lightningkite.khrysalis.observables.observableNN.T TS T
// FQImport: com.lightningkite.khrysalis.observables.observable>com.lightningkite.khrysalis.observables.ObservableProperty<kotlin.Any> TS getComLightningkiteKhrysalisObservablesObservablePropertyObservable
// FQImport: com.lightningkite.khrysalis.observables.subscribeBy.onComplete TS onComplete
// FQImport: com.lightningkite.khrysalis.observables.observable.T TS T
// FQImport: com.lightningkite.khrysalis.observables.map>com.lightningkite.khrysalis.observables.ObservableProperty<kotlin.Any> TS comLightningkiteKhrysalisObservablesObservablePropertyMap
// FQImport: com.lightningkite.khrysalis.observables.ObservableProperty.onChange TS onChange
// FQImport: com.lightningkite.khrysalis.observables.withWrite>com.lightningkite.khrysalis.observables.ObservableProperty<kotlin.Any> TS comLightningkiteKhrysalisObservablesObservablePropertyWithWrite
// FQImport: com.lightningkite.khrysalis.observables.<get-observableNN>.<anonymous>.it TS it
// FQImport: com.lightningkite.khrysalis.observables.ObservableProperty TS ObservableProperty
// FQImport: com.lightningkite.khrysalis.observables.subscribeBy.onError TS onError
// FQImport: com.lightningkite.khrysalis.observables.includes.E TS E
// FQImport: com.lightningkite.khrysalis.observables.onChangeNN.T TS T
// FQImport: com.lightningkite.khrysalis.observables.includes.element TS element
// FQImport: com.lightningkite.khrysalis.observables.subscribeBy.<anonymous>.boxed TS boxed
// FQImport: com.lightningkite.khrysalis.observables.subscribeBy.<anonymous>.it TS it
// FQImport: com.lightningkite.khrysalis.observables.<get-onChangeNN>.<anonymous>.it TS it
// FQImport: com.lightningkite.khrysalis.observables.MutableObservableProperty TS MutableObservableProperty
// FQImport: com.lightningkite.khrysalis.observables.ObservableProperty.value TS value
const WriteAddedObservableProperty_shared_1 = require("./WriteAddedObservableProperty.shared");
const TransformedObservableProperty_shared_1 = require("./TransformedObservableProperty.shared");
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
//! Declares com.lightningkite.khrysalis.observables.observable>com.lightningkite.khrysalis.observables.ObservableProperty<kotlin.Any>
function getComLightningkiteKhrysalisObservablesObservablePropertyObservable(this_) { return rxjs_1.concat(rxjs_1.of(this_.value), this_.onChange); }
exports.getComLightningkiteKhrysalisObservablesObservablePropertyObservable = getComLightningkiteKhrysalisObservablesObservablePropertyObservable;
//! Declares com.lightningkite.khrysalis.observables.observableNN>com.lightningkite.khrysalis.observables.ObservableProperty<kotlin.Any>
function getComLightningkiteKhrysalisObservablesObservablePropertyObservableNN(this_) { return rxjs_1.concat(rxjs_1.of(this_.value), this_.onChange).pipe(operators_1.map((it) => it)); }
exports.getComLightningkiteKhrysalisObservablesObservablePropertyObservableNN = getComLightningkiteKhrysalisObservablesObservablePropertyObservableNN;
//! Declares com.lightningkite.khrysalis.observables.onChangeNN>com.lightningkite.khrysalis.observables.ObservableProperty<kotlin.Any>
function getComLightningkiteKhrysalisObservablesObservablePropertyOnChangeNN(this_) { return this_.onChange.pipe(operators_1.map((it) => it)); }
exports.getComLightningkiteKhrysalisObservablesObservablePropertyOnChangeNN = getComLightningkiteKhrysalisObservablesObservablePropertyOnChangeNN;
//! Declares com.lightningkite.khrysalis.observables.subscribeBy>com.lightningkite.khrysalis.observables.ObservableProperty<kotlin.Any>
function comLightningkiteKhrysalisObservablesObservablePropertySubscribeBy(this_, onError = (it) => {
    it.printStackTrace();
}, onComplete = () => { }, onNext = (it) => { }) {
    return getComLightningkiteKhrysalisObservablesObservablePropertyObservable(this_).subscribe((boxed) => {
        onNext(boxed);
    }, onError, onComplete);
}
exports.comLightningkiteKhrysalisObservablesObservablePropertySubscribeBy = comLightningkiteKhrysalisObservablesObservablePropertySubscribeBy;
//! Declares com.lightningkite.khrysalis.observables.includes
function includes(collection, element) {
    return WriteAddedObservableProperty_shared_1.comLightningkiteKhrysalisObservablesObservablePropertyWithWrite(TransformedObservableProperty_shared_1.comLightningkiteKhrysalisObservablesObservablePropertyMap(collection, (it) => it.has(element)), (it) => {
        if (it) {
            collection.value = new Set([...collection.value, element]);
        }
        else {
            collection.value = new Set([...collection.value].filter(x => x !== element));
        }
    });
}
exports.includes = includes;
