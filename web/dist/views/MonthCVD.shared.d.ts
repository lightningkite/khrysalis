import { DisplayMetrics } from './DisplayMetrics.actual';
import { MutableObservableProperty } from '../observables/MutableObservableProperty.shared';
import { CustomViewDelegate } from './CustomViewDelegate.shared';
import { Paint } from './draw/Paint.actual';
import { DateAlone } from '../time/DateAlone.actual';
import { RectF } from './geometry/RectF.actual';
export declare class MonthCVD extends CustomViewDelegate {
    constructor();
    generateAccessibilityView(): (HTMLElement | null);
    readonly currentMonthObs: MutableObservableProperty<DateAlone>;
    get currentMonth(): DateAlone;
    set currentMonth(value: DateAlone);
    dragEnabled: boolean;
    labelFontSp: number;
    dayFontSp: number;
    internalPaddingDp: number;
    dayCellMarginDp: number;
    private internalPadding;
    private dayLabelHeight;
    private dayCellHeight;
    private dayCellWidth;
    private dayCellMargin;
    private _currentOffset;
    get currentOffset(): number;
    set currentOffset(value: number);
    private dragStartX;
    private lastOffset;
    private lastOffsetTime;
    private readonly DRAGGING_NONE;
    private draggingId;
    animateNextMonth(): void;
    animatePreviousMonth(): void;
    readonly labelPaint: Paint;
    readonly dayPaint: Paint;
    private readonly calcMonth;
    dayAtPixel(x: number, y: number, existing?: (DateAlone | null)): (DateAlone | null);
    dayAt(month: DateAlone, row: number, column: number, existing?: DateAlone): DateAlone;
    measure(width: number, height: number, displayMetrics: DisplayMetrics): void;
    private readonly calcMonthB;
    draw(canvas: CanvasRenderingContext2D, width: number, height: number, displayMetrics: DisplayMetrics): void;
    private drawDate;
    private readonly rectForReuse;
    private readonly rectForReuseB;
    drawMonth(canvas: CanvasRenderingContext2D, xOffset: number, width: number, month: DateAlone, displayMetrics: DisplayMetrics): void;
    drawLabel(canvas: CanvasRenderingContext2D, dayOfWeek: number, displayMetrics: DisplayMetrics, outer: RectF, inner: RectF): void;
    drawDay(canvas: CanvasRenderingContext2D, showingMonth: DateAlone, day: DateAlone, displayMetrics: DisplayMetrics, outer: RectF, inner: RectF): void;
    isTap: boolean;
    dragStartY: number;
    onTap(day: DateAlone): void;
    onTouchDownDate(day: DateAlone): boolean;
    onTouchDown(id: number, x: number, y: number, width: number, height: number): boolean;
    onTouchMoveDate(day: DateAlone): boolean;
    onTouchMove(id: number, x: number, y: number, width: number, height: number): boolean;
    onTouchUpDate(day: DateAlone): boolean;
    onTouchUp(id: number, x: number, y: number, width: number, height: number): boolean;
    sizeThatFitsWidth(width: number, height: number): number;
    sizeThatFitsHeight(width: number, height: number): number;
}
export declare class CalendarDrawing {
    private constructor();
    static INSTANCE: CalendarDrawing;
    day(canvas: CanvasRenderingContext2D, month: DateAlone, date: DateAlone, inner: RectF, paint: Paint): void;
    label(canvas: CanvasRenderingContext2D, dayOfWeek: number, inner: RectF, paint: Paint): void;
    dayBackground(canvas: CanvasRenderingContext2D, inner: RectF, paint: Paint): void;
    dayBackgroundStart(canvas: CanvasRenderingContext2D, inner: RectF, outer: RectF, paint: Paint): void;
    dayBackgroundMid(canvas: CanvasRenderingContext2D, inner: RectF, outer: RectF, paint: Paint): void;
    dayBackgroundEnd(canvas: CanvasRenderingContext2D, inner: RectF, outer: RectF, paint: Paint): void;
}
