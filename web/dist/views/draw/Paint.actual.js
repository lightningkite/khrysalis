"use strict";
// Generated by Khrysalis TypeScript converter
// File: views/draw/Paint.actual.kt
// Package: com.lightningkite.khrysalis.views.draw
Object.defineProperty(exports, "__esModule", { value: true });
class Paint {
    constructor() {
        this.color = "#000000";
        this.strokeWidth = 1.0;
        this.alpha = 1.0;
        this.style = Paint.Style.FILL;
        this.textSize = 12.0;
        this.shader = null;
        this.isAntiAlias = false;
        this.isFakeBoldText = false;
    }
    apply(context) {
        if (this.shader) {
            const gradient = this.shader(context);
            context.fillStyle = gradient;
            context.strokeStyle = gradient;
        }
        else {
            context.fillStyle = this.color;
            context.strokeStyle = this.color;
        }
        context.lineWidth = this.strokeWidth;
        context.globalAlpha = this.alpha;
        context.imageSmoothingEnabled = this.isAntiAlias;
    }
    complete(context) {
        this.apply(context);
        switch (this.style) {
            case Paint.Style.FILL:
                context.fill();
                break;
            case Paint.Style.STROKE:
                context.stroke();
                break;
            case Paint.Style.FILL_AND_STROKE:
                context.fill();
                context.stroke();
                break;
        }
    }
    render(context, path) {
        this.apply(context);
        switch (this.style) {
            case Paint.Style.FILL:
                context.fill(path);
                break;
            case Paint.Style.STROKE:
                context.stroke(path);
                break;
            case Paint.Style.FILL_AND_STROKE:
                context.fill(path);
                context.stroke(path);
                break;
        }
    }
    text(context, text, x, y, maxWidth) {
        this.apply(context);
        switch (this.style) {
            case Paint.Style.FILL:
                context.fillText(text, x, y, maxWidth);
                break;
            case Paint.Style.STROKE:
                context.strokeText(text, x, y, maxWidth);
                break;
            case Paint.Style.FILL_AND_STROKE:
                context.fillText(text, x, y, maxWidth);
                context.strokeText(text, x, y, maxWidth);
                break;
        }
    }
}
exports.Paint = Paint;
(function (Paint) {
    let Style;
    (function (Style) {
        Style[Style["FILL"] = 0] = "FILL";
        Style[Style["STROKE"] = 1] = "STROKE";
        Style[Style["FILL_AND_STROKE"] = 2] = "FILL_AND_STROKE";
    })(Style = Paint.Style || (Paint.Style = {}));
})(Paint = exports.Paint || (exports.Paint = {}));
//! Declares com.lightningkite.khrysalis.views.draw.textHeight
function getAndroidGraphicsPaintTextHeight(this_) { return 0; /*TODO*/ }
exports.getAndroidGraphicsPaintTextHeight = getAndroidGraphicsPaintTextHeight;
