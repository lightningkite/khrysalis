"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
// Generated by Khrysalis TypeScript converter - this file will be overwritten.
// File: views/Form.shared.kt
// Package: com.lightningkite.khrysalis.views
// FQImport: com.lightningkite.khrysalis.views.UntypedFormField.validation TS validation
// FQImport: com.lightningkite.khrysalis.views.Form.fields TS fields
// FQImport: com.lightningkite.khrysalis.views.Form.field.field TS field
// FQImport: com.lightningkite.khrysalis.views.notNull.T TS T
// FQImport: com.lightningkite.khrysalis.views.Form.Companion.xMustMatchY TS xMustMatchY
// FQImport: com.lightningkite.khrysalis.views.Form.fieldFromProperty.field TS field
// FQImport: com.lightningkite.khrysalis.views.Form.field TS field
// FQImport: com.lightningkite.khrysalis.views.Form.Companion.xIsRequired TS xIsRequired
// FQImport: com.lightningkite.khrysalis.views.ViewStringRaw TS ViewStringRaw
// FQImport: com.lightningkite.khrysalis.views.matches.T TS T
// FQImport: com.lightningkite.khrysalis.views.Form.runOrDialog.action TS action
// FQImport: com.lightningkite.khrysalis.views.FormValidationError TS FormValidationError
// FQImport: com.lightningkite.khrysalis.views.FormField.observable TS observable
// FQImport: com.lightningkite.khrysalis.views.Form.check TS check
// FQImport: com.lightningkite.khrysalis.views.Form.checkField TS checkField
// FQImport: com.lightningkite.khrysalis.views.Form.checkField.result TS result
// FQImport: com.lightningkite.khrysalis.views.Form.field.<anonymous>.untypedField TS untypedField
// FQImport: com.lightningkite.khrysalis.views.Form.fieldFromProperty.name TS name
// FQImport: com.lightningkite.khrysalis.observables.StandardObservableProperty TS StandardObservableProperty
// FQImport: com.lightningkite.khrysalis.views.Form.runOrDialog.<anonymous>.it TS it
// FQImport: com.lightningkite.khrysalis.observables.MutableObservableProperty TS MutableObservableProperty
// FQImport: com.lightningkite.khrysalis.views.Form TS Form
// FQImport: com.lightningkite.khrysalis.views.Form.fieldFromProperty.<anonymous>.untypedField TS untypedField
// FQImport: com.lightningkite.khrysalis.views.FormField.T TS T
// FQImport: com.lightningkite.khrysalis.observables.MutableObservableProperty.value TS value
// FQImport: com.lightningkite.khrysalis.views.Form.field.obs TS obs
// FQImport: com.lightningkite.khrysalis.views.Form.checkField.field TS field
// FQImport: com.lightningkite.khrysalis.views.UntypedFormField TS UntypedFormField
// FQImport: com.lightningkite.khrysalis.views.ViewStringResource TS ViewStringResource
// FQImport: com.lightningkite.khrysalis.views.Form.check.<anonymous>.it TS it
// FQImport: com.lightningkite.khrysalis.views.FormValidationError.string TS string
// FQImport: com.lightningkite.khrysalis.views.FormField TS FormField
// FQImport: com.lightningkite.khrysalis.views.FormField.<set-value>.value TS value
// FQImport: com.lightningkite.khrysalis.views.Form.field.defaultValue TS defaultValue
// FQImport: com.lightningkite.khrysalis.views.Form.fieldFromProperty.T TS T
// FQImport: com.lightningkite.khrysalis.views.Form.field.name TS name
// FQImport: com.lightningkite.khrysalis.views.Form.runOrDialog.errors TS errors
// FQImport: com.lightningkite.khrysalis.views.UntypedFormField.error TS error
// FQImport: com.lightningkite.khrysalis.views.Form.field.T TS T
// FQImport: com.lightningkite.khrysalis.views.showDialog TS showDialogAlert
// FQImport: com.lightningkite.khrysalis.views.Form.fieldFromProperty.validation TS validation
// FQImport: com.lightningkite.khrysalis.views.ViewStringTemplate TS ViewStringTemplate
// FQImport: kotlin.text.isBlank>kotlin.CharSequence TS kotlinCharSequenceIsBlank
// FQImport: com.lightningkite.khrysalis.views.Form.check.<anonymous>.result TS result
// FQImport: com.lightningkite.khrysalis.views.ViewString TS ViewString
// FQImport: com.lightningkite.khrysalis.views.Form.fieldFromProperty.property TS property
// FQImport: com.lightningkite.khrysalis.views.FormField.name TS name
// FQImport: com.lightningkite.khrysalis.views.matches.other TS other
// FQImport: com.lightningkite.khrysalis.views.Form.fieldFromProperty TS fieldFromProperty
// FQImport: com.lightningkite.khrysalis.observables.StandardObservableProperty.value TS value
// FQImport: com.lightningkite.khrysalis.views.unless.condition TS condition
// FQImport: com.lightningkite.khrysalis.views.Form.field.validation TS validation
// FQImport: com.lightningkite.khrysalis.views.joinToViewString>kotlin.collections.List<com.lightningkite.khrysalis.views.ViewString> TS kotlinCollectionsListJoinToViewString
const Strings_shared_1 = require("./Strings.shared");
const showDialog_shared_1 = require("./showDialog.shared");
const kotlin_text_1 = require("../kotlin/kotlin.text");
const StandardObservableProperty_shared_1 = require("../observables/StandardObservableProperty.shared");
const KotlinCollections_1 = require("../KotlinCollections");
//! Declares com.lightningkite.khrysalis.views.FormValidationError
class FormValidationError {
    constructor(field, _string) {
        this.field = field;
        this._string = _string;
    }
}
exports.FormValidationError = FormValidationError;
class UntypedFormFieldDefaults {
}
exports.UntypedFormFieldDefaults = UntypedFormFieldDefaults;
//! Declares com.lightningkite.khrysalis.views.FormField
class FormField {
    constructor(name, observable, validation) {
        this.name = name;
        this.observable = observable;
        this.validation = validation;
        this.error = new StandardObservableProperty_shared_1.StandardObservableProperty(null, undefined);
    }
    //! Declares com.lightningkite.khrysalis.views.FormField.value
    get value() { return this.observable.value; }
    set value(value) {
        this.observable.value = value;
    }
    //! Declares com.lightningkite.khrysalis.views.FormField.untypedObservable
    get untypedObservable() { return this.observable; }
}
exports.FormField = FormField;
FormField.implementsInterfaceComLightningkiteKhrysalisViewsUntypedFormField = true;
//! Declares com.lightningkite.khrysalis.views.Form
class Form {
    field(name, defaultValue, validation) {
        const obs = new StandardObservableProperty_shared_1.StandardObservableProperty(defaultValue, undefined);
        const field = new FormField(name, obs, (untypedField) => validation(untypedField));
        this.fields.push(field);
        return field;
    }
    fieldRes(name, defaultValue, validation) { return this.field(new Strings_shared_1.ViewStringResource(name), defaultValue, validation); }
    fieldFromProperty(name, property, validation) {
        const field = new FormField(name, property, (untypedField) => validation(untypedField));
        this.fields.push(field);
        return field;
    }
    fieldFromPropertyRes(name, property, validation) { return this.fieldFromProperty(new Strings_shared_1.ViewStringResource(name), property, validation); }
    check() {
        return KotlinCollections_1.listFilterNotNull(this.fields.map((it) => {
            const result = this.checkField(it);
            if (!(result.equals(null))) {
                return new FormValidationError(it, result);
            }
            else {
                return null;
            }
        }));
    }
    runOrDialog(action) {
        const errors = this.check();
        if (errors.length !== 0) {
            showDialog_shared_1.showDialogAlert(Strings_shared_1.kotlinCollectionsListJoinToViewString(errors.map((it) => it._string), undefined));
        }
        else {
            action();
        }
    }
    checkField(field) {
        const result = field.validation(field);
        field.error.value = result;
        return result;
    }
}
exports.Form = Form;
Form.Companion = (_a = class Companion {
        constructor() {
            this.xIsRequired = new Strings_shared_1.ViewStringRaw(`%1\$s is required.`);
            this.xMustMatchY = new Strings_shared_1.ViewStringRaw(`%1\$s must match %2\$s.`);
        }
    },
    _a.INSTANCE = new _a(),
    _a);
//! Declares com.lightningkite.khrysalis.views.required>com.lightningkite.khrysalis.views.FormField<kotlin.String>
function comLightningkiteKhrysalisViewsFormFieldRequired(this_) {
    if (kotlin_text_1.kotlinCharSequenceIsBlank(this_.observable.value)) {
        return new Strings_shared_1.ViewStringTemplate(Form.Companion.INSTANCE.xIsRequired, [this_.name]);
    }
    else {
        return null;
    }
}
exports.comLightningkiteKhrysalisViewsFormFieldRequired = comLightningkiteKhrysalisViewsFormFieldRequired;
//! Declares com.lightningkite.khrysalis.views.notNull>com.lightningkite.khrysalis.views.FormField<kotlin.Any>
function comLightningkiteKhrysalisViewsFormFieldNotNull(this_) {
    if (this_.observable.value.equals(null)) {
        return new Strings_shared_1.ViewStringTemplate(Form.Companion.INSTANCE.xIsRequired, [this_.name]);
    }
    else {
        return null;
    }
}
exports.comLightningkiteKhrysalisViewsFormFieldNotNull = comLightningkiteKhrysalisViewsFormFieldNotNull;
//! Declares com.lightningkite.khrysalis.views.notFalse>com.lightningkite.khrysalis.views.FormField<kotlin.Boolean>
function comLightningkiteKhrysalisViewsFormFieldNotFalse(this_) {
    if (!this_.observable.value) {
        return new Strings_shared_1.ViewStringTemplate(Form.Companion.INSTANCE.xIsRequired, [this_.name]);
    }
    else {
        return null;
    }
}
exports.comLightningkiteKhrysalisViewsFormFieldNotFalse = comLightningkiteKhrysalisViewsFormFieldNotFalse;
//! Declares com.lightningkite.khrysalis.views.unless>com.lightningkite.khrysalis.views.ViewString
function comLightningkiteKhrysalisViewsViewStringUnless(this_, condition) {
    if (condition) {
        return null;
    }
    else {
        return this_;
    }
}
exports.comLightningkiteKhrysalisViewsViewStringUnless = comLightningkiteKhrysalisViewsViewStringUnless;
//! Declares com.lightningkite.khrysalis.views.matches>com.lightningkite.khrysalis.views.FormField<kotlin.Any>
function comLightningkiteKhrysalisViewsFormFieldMatches(this_, other) {
    if (!(this_.observable.value.equals(other.observable.value))) {
        return new Strings_shared_1.ViewStringTemplate(Form.Companion.INSTANCE.xMustMatchY, [this_.name, other.name]);
    }
    else {
        return null;
    }
}
exports.comLightningkiteKhrysalisViewsFormFieldMatches = comLightningkiteKhrysalisViewsFormFieldMatches;
//object test {
//    val form = Form()
//
//    val username = Field(ViewStringRaw("Username"), "") { it.required() ?: it.isEmail() ?: it.matches(otherField) }
//    val password = Field(ViewStringRaw("Password"), "") { it.required() }
//    val verifyPassword = Field(ViewStringRaw("Verify Password"), "") { it.required() ?: it.matches(password) }
//}
