"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// Generated by Khrysalis TypeScript converter - this file will be overwritten.
// File: views/Form.shared.kt
// Package: com.lightningkite.khrysalis.views
const Strings_shared_1 = require("./Strings.shared");
const Kotlin_1 = require("../Kotlin");
const showDialog_shared_1 = require("./showDialog.shared");
const kotlin_text_1 = require("../kotlin/kotlin.text");
const StandardObservableProperty_shared_1 = require("../observables/StandardObservableProperty.shared");
const KotlinCollections_1 = require("../KotlinCollections");
//! Declares com.lightningkite.khrysalis.views.FormValidationError
class FormValidationError {
    constructor(field, _string) {
        this.field = field;
        this._string = _string;
    }
}
exports.FormValidationError = FormValidationError;
//! Declares com.lightningkite.khrysalis.views.FormField
class FormField {
    constructor(name, observable, validation) {
        this.name = name;
        this.observable = observable;
        this.validation = validation;
        this.error = new StandardObservableProperty_shared_1.StandardObservableProperty(null, undefined);
    }
    //! Declares com.lightningkite.khrysalis.views.FormField.value
    get value() { return this.observable.value; }
    set value(value) {
        this.observable.value = value;
    }
    //! Declares com.lightningkite.khrysalis.views.FormField.untypedObservable
    get untypedObservable() { return this.observable; }
}
exports.FormField = FormField;
FormField.implementsInterfaceComLightningkiteKhrysalisViewsUntypedFormField = true;
//! Declares com.lightningkite.khrysalis.views.Form
class Form {
    constructor() {
        this.fields = [];
    }
    field(name, defaultValue, validation) {
        const obs = new StandardObservableProperty_shared_1.StandardObservableProperty(defaultValue, undefined);
        const field = new FormField(name, obs, (untypedField) => validation(untypedField));
        this.fields.push(field);
        return field;
    }
    fieldRes(name, defaultValue, validation) {
        return this.field(new Strings_shared_1.ViewStringResource(name), defaultValue, validation);
    }
    fieldFromProperty(name, property, validation) {
        const field = new FormField(name, property, (untypedField) => validation(untypedField));
        this.fields.push(field);
        return field;
    }
    fieldFromPropertyRes(name, property, validation) {
        return this.fieldFromProperty(new Strings_shared_1.ViewStringResource(name), property, validation);
    }
    check() {
        return KotlinCollections_1.listFilterNotNull(this.fields.map((it) => {
            const result = this.checkField(it);
            if (result !== null) {
                return new FormValidationError(it, result);
            }
            else {
                return null;
            }
        }));
    }
    runOrDialog(action) {
        const errors = this.check();
        if (errors.length !== 0) {
            showDialog_shared_1.showDialogAlert(Strings_shared_1.kotlinCollectionsListJoinToViewString(errors.map((it) => it._string), undefined));
        }
        else {
            action();
        }
    }
    checkField(field) {
        const result = field.validation(field);
        field.error.value = result;
        return result;
    }
}
exports.Form = Form;
(function (Form) {
    //! Declares com.lightningkite.khrysalis.views.Form.Companion
    class Companion {
        constructor() {
            this.xIsRequired = new Strings_shared_1.ViewStringRaw(`%1\$s is required.`);
            this.xMustMatchY = new Strings_shared_1.ViewStringRaw(`%1\$s must match %2\$s.`);
        }
    }
    Companion.INSTANCE = new Companion();
    Form.Companion = Companion;
})(Form = exports.Form || (exports.Form = {}));
//! Declares com.lightningkite.khrysalis.views.required>com.lightningkite.khrysalis.views.FormField<kotlin.String>
function comLightningkiteKhrysalisViewsFormFieldRequired(this_) {
    if (kotlin_text_1.kotlinCharSequenceIsBlank(this_.observable.value)) {
        return new Strings_shared_1.ViewStringTemplate(Form.Companion.INSTANCE.xIsRequired, [this_.name]);
    }
    else {
        return null;
    }
}
exports.comLightningkiteKhrysalisViewsFormFieldRequired = comLightningkiteKhrysalisViewsFormFieldRequired;
//! Declares com.lightningkite.khrysalis.views.notNull>com.lightningkite.khrysalis.views.FormField<kotlin.Any>
function comLightningkiteKhrysalisViewsFormFieldNotNull(this_) {
    if (this_.observable.value === null) {
        return new Strings_shared_1.ViewStringTemplate(Form.Companion.INSTANCE.xIsRequired, [this_.name]);
    }
    else {
        return null;
    }
}
exports.comLightningkiteKhrysalisViewsFormFieldNotNull = comLightningkiteKhrysalisViewsFormFieldNotNull;
//! Declares com.lightningkite.khrysalis.views.notFalse>com.lightningkite.khrysalis.views.FormField<kotlin.Boolean>
function comLightningkiteKhrysalisViewsFormFieldNotFalse(this_) {
    if ((!this_.observable.value)) {
        return new Strings_shared_1.ViewStringTemplate(Form.Companion.INSTANCE.xIsRequired, [this_.name]);
    }
    else {
        return null;
    }
}
exports.comLightningkiteKhrysalisViewsFormFieldNotFalse = comLightningkiteKhrysalisViewsFormFieldNotFalse;
//! Declares com.lightningkite.khrysalis.views.unless>com.lightningkite.khrysalis.views.ViewString
function comLightningkiteKhrysalisViewsViewStringUnless(this_, condition) {
    if (condition) {
        return null;
    }
    else {
        return this_;
    }
}
exports.comLightningkiteKhrysalisViewsViewStringUnless = comLightningkiteKhrysalisViewsViewStringUnless;
//! Declares com.lightningkite.khrysalis.views.matches>com.lightningkite.khrysalis.views.FormField<kotlin.Any>
function comLightningkiteKhrysalisViewsFormFieldMatches(this_, other) {
    if (!Kotlin_1.safeEq(this_.observable.value, other.observable.value)) {
        return new Strings_shared_1.ViewStringTemplate(Form.Companion.INSTANCE.xMustMatchY, [this_.name, other.name]);
    }
    else {
        return null;
    }
}
exports.comLightningkiteKhrysalisViewsFormFieldMatches = comLightningkiteKhrysalisViewsFormFieldMatches;
//object test {
//    val form = Form()
//
//    val username = Field(ViewStringRaw("Username"), "") { it.required() ?: it.isEmail() ?: it.matches(otherField) }
//    val password = Field(ViewStringRaw("Password"), "") { it.required() }
//    val verifyPassword = Field(ViewStringRaw("Verify Password"), "") { it.required() ?: it.matches(password) }
//}
//# sourceMappingURL=Form.shared.js.map