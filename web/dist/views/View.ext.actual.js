"use strict";
// Generated by Khrysalis TypeScript converter
// File: views/View.ext.actual.kt
// Package: com.lightningkite.khrysalis.views
Object.defineProperty(exports, "__esModule", { value: true });
//! Declares com.lightningkite.khrysalis.views.onClick>android.view.View
function androidViewViewOnClick(this_, disabledMilliseconds = 500, action) {
    let lastActivated = Date.now();
    this_.onclick = (_ev) => {
        _ev.stopPropagation();
        const it = _ev.target;
        if (Date.now() - lastActivated > disabledMilliseconds) {
            action();
            lastActivated = Date.now();
        }
    };
}
exports.androidViewViewOnClick = androidViewViewOnClick;
//! Declares com.lightningkite.khrysalis.views.onLongClick>android.view.View
function androidViewViewOnLongClick(this_, action) {
    this_.oncontextmenu = (_ev) => {
        _ev.stopPropagation();
        const it = _ev.target;
        action();
    };
}
exports.androidViewViewOnLongClick = androidViewViewOnLongClick;
function getViewVisibility(this_) {
    if (this_.hidden)
        return "gone";
    if (this_.style.visibility === "hidden")
        return "invisible";
    return "visible";
}
exports.getViewVisibility = getViewVisibility;
function setViewVisibility(this_, value) {
    switch (value) {
        case "gone":
            this_.hidden = true;
            this_.style.visibility = "visible";
            break;
        case "visible":
            this_.hidden = false;
            this_.style.visibility = "visible";
            break;
        case "invisible":
            this_.hidden = false;
            this_.style.visibility = "hidden";
            break;
    }
    const p = this_.parentElement;
    if (p && (p.classList.contains("khrysalis-box") || p.classList.contains("khrc"))) {
        setViewVisibility(p, value);
    }
}
exports.setViewVisibility = setViewVisibility;
function findView(view, predicate) {
    for (let i = 0; i < view.children.length; i++) {
        const child = view.children.item(i);
        if (child instanceof HTMLElement && predicate(child)) {
            return child;
        }
    }
    return null;
}
exports.findView = findView;
const backgroundClassSymbol = Symbol("backgroundCssClass");
function setViewBackgroundClass(view, cssClass) {
    const existing = view[backgroundClassSymbol];
    if (existing) {
        view.classList.remove(existing);
    }
    view[backgroundClassSymbol] = cssClass;
    view.classList.add(cssClass);
}
exports.setViewBackgroundClass = setViewBackgroundClass;
//# sourceMappingURL=View.ext.actual.js.map