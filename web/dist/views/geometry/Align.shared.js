"use strict";
// Generated by Khrysalis TypeScript converter - this file will be overwritten.
// File: views/geometry/Align.shared.kt
// Package: com.lightningkite.khrysalis.views.geometry
// FQImport: com.lightningkite.khrysalis.views.geometry.Align.fill TS fill
// FQImport: com.lightningkite.khrysalis.views.geometry.AlignPair TS AlignPair
// FQImport: com.lightningkite.khrysalis.views.geometry.Align.center TS center
// FQImport: com.lightningkite.khrysalis.views.geometry.Align.end TS end
// FQImport: com.lightningkite.khrysalis.views.geometry.Align.start TS start
// FQImport: com.lightningkite.khrysalis.views.geometry.Align TS Align
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
//! Declares com.lightningkite.khrysalis.views.geometry.Align
class Align {
    constructor(name) { this.name = name; }
    static values() { return Align._values; }
    static valueOf(name) { return Align[name]; }
    toString() { return this.name; }
}
exports.Align = Align;
Align.start = new Align("start");
Align.center = new Align("center");
Align.end = new Align("end");
Align.fill = new Align("fill");
Align._values = [Align.start, Align.center, Align.end, Align.fill];
//! Declares com.lightningkite.khrysalis.views.geometry.AlignPair
class AlignPair {
    constructor(horizontal, vertical) {
        this.horizontal = horizontal;
        this.vertical = vertical;
    }
    hashCode() {
        var _b, _c, _d, _e;
        let hash = 17;
        hash = (_c = 31 * hash + ((_b = this.horizontal) === null || _b === void 0 ? void 0 : _b.hashCode())) !== null && _c !== void 0 ? _c : 0;
        hash = (_e = 31 * hash + ((_d = this.vertical) === null || _d === void 0 ? void 0 : _d.hashCode())) !== null && _e !== void 0 ? _e : 0;
        return hash;
    }
    equals(other) { var _b, _c, _d, _e; return other instanceof AlignPair && ((_c = (_b = this.horizontal) === null || _b === void 0 ? void 0 : _b.equals(other.horizontal)) !== null && _c !== void 0 ? _c : other.horizontal === null) && ((_e = (_d = this.vertical) === null || _d === void 0 ? void 0 : _d.equals(other.vertical)) !== null && _e !== void 0 ? _e : other.vertical === null); }
    toString() { return `AlignPair(horizontal = ${this.horizontal}, vertical = ${this.vertical})`; }
    copy(horizontal = this.horizontal, vertical = this.vertical) { return new AlignPair(horizontal, vertical); }
}
exports.AlignPair = AlignPair;
AlignPair.Companion = (_a = class Companion {
        constructor() {
            this.center = new AlignPair(Align.center, Align.center);
            this.fill = new AlignPair(Align.fill, Align.fill);
            this.topLeft = new AlignPair(Align.start, Align.start);
            this.topCenter = new AlignPair(Align.center, Align.start);
            this.topFill = new AlignPair(Align.fill, Align.start);
            this.topRight = new AlignPair(Align.end, Align.start);
            this.centerLeft = new AlignPair(Align.start, Align.center);
            this.centerCenter = new AlignPair(Align.center, Align.center);
            this.centerFill = new AlignPair(Align.fill, Align.center);
            this.centerRight = new AlignPair(Align.end, Align.center);
            this.fillLeft = new AlignPair(Align.start, Align.fill);
            this.fillCenter = new AlignPair(Align.center, Align.fill);
            this.fillFill = new AlignPair(Align.fill, Align.fill);
            this.fillRight = new AlignPair(Align.end, Align.fill);
            this.bottomLeft = new AlignPair(Align.start, Align.end);
            this.bottomCenter = new AlignPair(Align.center, Align.end);
            this.bottomFill = new AlignPair(Align.fill, Align.end);
            this.bottomRight = new AlignPair(Align.end, Align.end);
        }
    },
    _a.INSTANCE = new _a(),
    _a);
