"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// Generated by Khrysalis TypeScript converter - this file will be overwritten.
// File: views/geometry/Align.shared.kt
// Package: com.lightningkite.khrysalis.views.geometry
const Kotlin_1 = require("../../Kotlin");
//! Declares com.lightningkite.khrysalis.views.geometry.Align
class Align {
    constructor(name, jsonName) {
        this.name = name;
        this.jsonName = jsonName;
    }
    static values() { return Align._values; }
    static valueOf(name) { return Align[name]; }
    toString() { return this.name; }
    toJSON() { return this.jsonName; }
}
exports.Align = Align;
Align.start = new Align("start", "start");
Align.center = new Align("center", "center");
Align.end = new Align("end", "end");
Align.fill = new Align("fill", "fill");
Align._values = [Align.start, Align.center, Align.end, Align.fill];
//! Declares com.lightningkite.khrysalis.views.geometry.AlignPair
class AlignPair {
    constructor(horizontal, vertical) {
        this.horizontal = horizontal;
        this.vertical = vertical;
    }
    hashCode() {
        let hash = 17;
        hash = 31 * hash + Kotlin_1.hashAnything(this.horizontal);
        hash = 31 * hash + Kotlin_1.hashAnything(this.vertical);
        return hash;
    }
    equals(other) { return other instanceof AlignPair && Kotlin_1.safeEq(this.horizontal, other.horizontal) && Kotlin_1.safeEq(this.vertical, other.vertical); }
    toString() { return `AlignPair(horizontal = ${this.horizontal}, vertical = ${this.vertical})`; }
    copy(horizontal = this.horizontal, vertical = this.vertical) { return new AlignPair(horizontal, vertical); }
}
exports.AlignPair = AlignPair;
(function (AlignPair) {
    //! Declares com.lightningkite.khrysalis.views.geometry.AlignPair.Companion
    class Companion {
        constructor() {
            this.center = new AlignPair(Align.center, Align.center);
            this.fill = new AlignPair(Align.fill, Align.fill);
            this.topLeft = new AlignPair(Align.start, Align.start);
            this.topCenter = new AlignPair(Align.center, Align.start);
            this.topFill = new AlignPair(Align.fill, Align.start);
            this.topRight = new AlignPair(Align.end, Align.start);
            this.centerLeft = new AlignPair(Align.start, Align.center);
            this.centerCenter = new AlignPair(Align.center, Align.center);
            this.centerFill = new AlignPair(Align.fill, Align.center);
            this.centerRight = new AlignPair(Align.end, Align.center);
            this.fillLeft = new AlignPair(Align.start, Align.fill);
            this.fillCenter = new AlignPair(Align.center, Align.fill);
            this.fillFill = new AlignPair(Align.fill, Align.fill);
            this.fillRight = new AlignPair(Align.end, Align.fill);
            this.bottomLeft = new AlignPair(Align.start, Align.end);
            this.bottomCenter = new AlignPair(Align.center, Align.end);
            this.bottomFill = new AlignPair(Align.fill, Align.end);
            this.bottomRight = new AlignPair(Align.end, Align.end);
        }
    }
    Companion.INSTANCE = new Companion();
    AlignPair.Companion = Companion;
})(AlignPair = exports.AlignPair || (exports.AlignPair = {}));
//# sourceMappingURL=Align.shared.js.map