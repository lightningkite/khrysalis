"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// Generated by Khrysalis TypeScript converter - this file will be overwritten.
// File: views/DjangoErrorTranslator.shared.kt
// Package: com.lightningkite.khrysalis.views
// FQImport: com.lightningkite.khrysalis.views.DjangoErrorTranslator.parseError.code TS code
// FQImport: com.lightningkite.khrysalis.views.DjangoErrorTranslator.wrapNoResponse.<anonymous>.error TS error
// FQImport: kotlin.text.StringBuilder TS StringBuilder
// FQImport: kotlin.collections.Map TS Map
// FQImport: com.lightningkite.khrysalis.views.DjangoErrorTranslator.handleNode.builder TS builder
// FQImport: com.lightningkite.khrysalis.views.DjangoErrorTranslator.parseError.builder TS builder
// FQImport: com.lightningkite.khrysalis.views.DjangoErrorTranslator.handleNode.node TS node
// FQImport: kotlin.text.isUpperCase>kotlin.Char TS kotlinCharIsUpperCase
// FQImport: com.lightningkite.khrysalis.views.DjangoErrorTranslator.wrap.<anonymous>.result TS result
// FQImport: com.lightningkite.khrysalis.views.ViewStringResource TS ViewStringResource
// FQImport: com.lightningkite.khrysalis.views.DjangoErrorTranslator.parseError.error TS error
// FQImport: com.lightningkite.khrysalis.views.DjangoErrorTranslator.parseError.errorJson TS errorJson
// FQImport: com.lightningkite.khrysalis.views.DjangoErrorTranslator.wrap.<anonymous>.code TS code
// FQImport: com.lightningkite.khrysalis.views.DjangoErrorTranslator.serverErrorResource TS serverErrorResource
// FQImport: com.lightningkite.khrysalis.views.ViewStringRaw TS ViewStringRaw
// FQImport: com.lightningkite.khrysalis.views.DjangoErrorTranslator.wrapNoResponse.callback TS callback
// FQImport: com.lightningkite.khrysalis.views.DjangoErrorTranslator.otherErrorResource TS otherErrorResource
// FQImport: com.lightningkite.khrysalis.views.DjangoErrorTranslator.wrap.callback TS callback
// FQImport: com.lightningkite.khrysalis.views.DjangoErrorTranslator.wrap.T TS T
// FQImport: com.lightningkite.khrysalis.views.DjangoErrorTranslator.wrap.<anonymous>.error TS error
// FQImport: com.lightningkite.khrysalis.views.DjangoErrorTranslator.handleNode.value TS value
// FQImport: com.lightningkite.khrysalis.views.DjangoErrorTranslator.wrapNoResponse.<anonymous>.code TS code
// FQImport: com.lightningkite.khrysalis.views.DjangoErrorTranslator.parseError TS parseError
// FQImport: com.lightningkite.khrysalis.views.ViewString TS ViewString
// FQImport: com.lightningkite.khrysalis.views.DjangoErrorTranslator.parseError.resultError TS resultError
// FQImport: java.lang.StringBuilder.toString TS toString
// FQImport: com.lightningkite.khrysalis.views.DjangoErrorTranslator.connectivityErrorResource TS connectivityErrorResource
// FQImport: com.lightningkite.khrysalis.fromJsonStringUntyped>kotlin.String TS kotlinStringFromJsonStringUntyped
// FQImport: com.lightningkite.khrysalis.views.DjangoErrorTranslator.handleNode TS handleNode
const Strings_shared_1 = require("./Strings.shared");
const kotlin_text_1 = require("../kotlin/kotlin.text");
const kotlin_text_2 = require("../kotlin/kotlin.text");
const Codable_actual_1 = require("../Codable.actual");
const Kotlin_1 = require("../Kotlin");
//! Declares com.lightningkite.khrysalis.views.DjangoErrorTranslator
class DjangoErrorTranslator {
    constructor(connectivityErrorResource, serverErrorResource, otherErrorResource) {
        this.connectivityErrorResource = connectivityErrorResource;
        this.serverErrorResource = serverErrorResource;
        this.otherErrorResource = otherErrorResource;
    }
    handleNode(builder, node) {
        if (node.equals(null))
            return;
        if (Kotlin_1.checkIsInterface(node, "KotlinCollectionsMap")) {
            for (const toDestructure of node) {
                const key = toDestructure[0];
                const value = toDestructure[1];
                this.handleNode(builder, value);
            }
        }
        else if (Kotlin_1.checkIsInterface(node, "KotlinCollectionsList")) {
            for (const value of node) {
                this.handleNode(builder, value);
            }
        }
        else if (typeof (node) == "string") {
            //Rough check for human-readability - sentences start with uppercase and will have spaces
            if (node !== "" && kotlin_text_2.kotlinCharIsUpperCase(node[0]) && (node.indexOf(" ") != -1)) {
                builder.value += node + '\n';
            }
        }
    }
    parseError(code, error) {
        let resultError = null;
        switch (code / 100) {
            case 0:
                resultError = new Strings_shared_1.ViewStringResource(this.connectivityErrorResource);
                break;
            case 1:
            case 2:
            case 3:
                break;
            case 4:
                const errorJson = ((_it) => {
                    if (_it === null)
                        return null;
                    return Codable_actual_1.kotlinStringFromJsonStringUntyped(_it);
                })(error);
                if (!(errorJson.equals(null))) {
                    const builder = new kotlin_text_1.StringBuilder();
                    this.handleNode(builder, errorJson);
                    resultError = new Strings_shared_1.ViewStringRaw(builder.toString());
                }
                else {
                    resultError = new Strings_shared_1.ViewStringRaw(error !== null && error !== void 0 ? error : "");
                }
                break;
            case 5:
                resultError = new Strings_shared_1.ViewStringResource(this.serverErrorResource);
                break;
            default:
                resultError = new Strings_shared_1.ViewStringResource(this.otherErrorResource);
                break;
        }
        return resultError;
    }
    wrap(callback) {
        return (code, result, error) => {
            callback(result, this.parseError(code, error));
        };
    }
    wrapNoResponse(callback) {
        return (code, error) => {
            callback(this.parseError(code, error));
        };
    }
}
exports.DjangoErrorTranslator = DjangoErrorTranslator;
