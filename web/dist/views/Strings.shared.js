"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// Generated by Khrysalis TypeScript converter - this file will be overwritten.
// File: views/Strings.shared.kt
// Package: com.lightningkite.khrysalis.views
const sprintf_js_1 = require("sprintf-js");
const Kotlin_1 = require("../Kotlin");
//! Declares com.lightningkite.khrysalis.views.ViewStringRaw
class ViewStringRaw {
    constructor(_string) {
        this._string = _string;
    }
    get(dependency) { return this._string; }
}
exports.ViewStringRaw = ViewStringRaw;
ViewStringRaw.implementsInterfaceComLightningkiteKhrysalisViewsViewString = true;
//! Declares com.lightningkite.khrysalis.views.ViewStringResource
class ViewStringResource {
    constructor(resource) {
        this.resource = resource;
    }
    get(dependency) { return this.resource; }
}
exports.ViewStringResource = ViewStringResource;
ViewStringResource.implementsInterfaceComLightningkiteKhrysalisViewsViewString = true;
//! Declares com.lightningkite.khrysalis.views.ViewStringTemplate
class ViewStringTemplate {
    constructor(template, _arguments) {
        this.template = template;
        this._arguments = _arguments;
    }
    get(dependency) {
        const templateResolved = this.template.get(dependency);
        const fixedArguments = this._arguments.map((it) => { var _a, _b; return (_b = (_a = (Kotlin_1.tryCastInterface(it, "ComLightningkiteKhrysalisViewsViewString"))) === null || _a === void 0 ? void 0 : _a.get(dependency)) !== null && _b !== void 0 ? _b : it; });
        return sprintf_js_1.vsprintf(templateResolved, fixedArguments);
    }
}
exports.ViewStringTemplate = ViewStringTemplate;
ViewStringTemplate.implementsInterfaceComLightningkiteKhrysalisViewsViewString = true;
//! Declares com.lightningkite.khrysalis.views.ViewStringComplex
class ViewStringComplex {
    constructor(getter) {
        this.getter = getter;
    }
    get(dependency) { return this.getter(dependency); }
}
exports.ViewStringComplex = ViewStringComplex;
ViewStringComplex.implementsInterfaceComLightningkiteKhrysalisViewsViewString = true;
//! Declares com.lightningkite.khrysalis.views.ViewStringList
class ViewStringList {
    constructor(parts, separator = `\n`) {
        this.parts = parts;
        this.separator = separator;
    }
    get(dependency) {
        return this.parts.map((it) => it.get(dependency)).join(this.separator);
    }
}
exports.ViewStringList = ViewStringList;
ViewStringList.implementsInterfaceComLightningkiteKhrysalisViewsViewString = true;
//! Declares com.lightningkite.khrysalis.views.joinToViewString>kotlin.collections.List<com.lightningkite.khrysalis.views.ViewString>
function kotlinCollectionsListJoinToViewString(this_, separator = `\n`) {
    if (this_.length === 1) {
        return this_[0];
    }
    return new ViewStringList(this_, separator);
}
exports.kotlinCollectionsListJoinToViewString = kotlinCollectionsListJoinToViewString;
//! Declares com.lightningkite.khrysalis.views.toDebugString>com.lightningkite.khrysalis.views.ViewString
function comLightningkiteKhrysalisViewsViewStringToDebugString(this_) {
    const thing = this_;
    if (thing instanceof ViewStringRaw) {
        return thing._string;
    }
    else if (thing instanceof ViewStringResource) {
        return thing.resource.toString();
    }
    else if (thing instanceof ViewStringTemplate) {
        return comLightningkiteKhrysalisViewsViewStringToDebugString(thing.template) + "(" + thing._arguments.map((it) => (() => { if (Kotlin_1.checkIsInterface(it, "ComLightningkiteKhrysalisViewsViewString")) {
            return comLightningkiteKhrysalisViewsViewStringToDebugString(it);
        }
        else {
            return `${it}`;
        } })()).join(", ") + ")";
    }
    else if (thing instanceof ViewStringList) {
        return thing.parts.map((it) => comLightningkiteKhrysalisViewsViewStringToDebugString(it)).join(thing.separator);
    }
    else if (thing instanceof ViewStringComplex) {
        return `<Complex string ${thing}>`;
    }
    else {
        return "Unknown";
    }
}
exports.comLightningkiteKhrysalisViewsViewStringToDebugString = comLightningkiteKhrysalisViewsViewStringToDebugString;
//# sourceMappingURL=Strings.shared.js.map