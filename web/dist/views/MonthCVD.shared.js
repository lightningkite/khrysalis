"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// Generated by Khrysalis TypeScript converter - this file will be overwritten.
// File: views/MonthCVD.shared.kt
// Package: com.lightningkite.khrysalis.views
// FQImport: com.lightningkite.khrysalis.views.MonthCVD.drawMonth.day TS day
// FQImport: com.lightningkite.khrysalis.views.MonthCVD.measure.width TS width
// FQImport: com.lightningkite.khrysalis.views.MonthCVD.labelPaint TS labelPaint
// FQImport: com.lightningkite.khrysalis.views.MonthCVD.dragStartY TS dragStartY
// FQImport: android.graphics.Paint.textSize TS textSize
// FQImport: com.lightningkite.khrysalis.views.MonthCVD.onTouchDown.id TS id
// FQImport: com.lightningkite.khrysalis.views.MonthCVD.lastOffsetTime TS lastOffsetTime
// FQImport: com.lightningkite.khrysalis.views.CalendarDrawing.label TS label
// FQImport: com.lightningkite.khrysalis.views.CalendarDrawing.label.inner TS inner
// FQImport: com.lightningkite.khrysalis.views.MonthCVD.onTouchDown.<anonymous>.it TS it
// FQImport: com.lightningkite.khrysalis.views.CalendarDrawing.dayBackgroundStart.outer TS outer
// FQImport: com.lightningkite.khrysalis.views.MonthCVD.calcMonthB TS calcMonthB
// FQImport: com.lightningkite.khrysalis.views.CalendarDrawing.label.paint TS paint
// FQImport: com.lightningkite.khrysalis.views.CalendarDrawing.dayBackgroundEnd.paint TS paint
// FQImport: com.lightningkite.khrysalis.views.MonthCVD.dayPaint TS dayPaint
// FQImport: com.lightningkite.khrysalis.views.CalendarDrawing.dayBackgroundMid.canvas TS canvas
// FQImport: com.lightningkite.khrysalis.views.CalendarDrawing.dayBackgroundStart.canvas TS canvas
// FQImport: com.lightningkite.khrysalis.views.MonthCVD._currentOffset TS _currentOffset
// FQImport: com.lightningkite.khrysalis.views.MonthCVD.draw.displayMetrics TS displayMetrics
// FQImport: com.lightningkite.khrysalis.time.DateAlone.day TS day
// FQImport: com.lightningkite.khrysalis.views.MonthCVD.dayAtPixel.existing TS existing
// FQImport: com.lightningkite.khrysalis.views.MonthCVD.lastOffset TS lastOffset
// FQImport: android.graphics.RectF.width TS width
// FQImport: android.graphics.RectF.inset TS inset
// FQImport: com.lightningkite.khrysalis.views.CalendarDrawing.label.dayOfWeek TS dayOfWeek
// FQImport: com.lightningkite.khrysalis.views.MonthCVD.draw.canvas TS canvas
// FQImport: com.lightningkite.khrysalis.views.MonthCVD.drawDay TS drawDay
// FQImport: com.lightningkite.khrysalis.views.MonthCVD.measure TS measure
// FQImport: com.lightningkite.khrysalis.views.MonthCVD.dayAt.row TS row
// FQImport: com.lightningkite.khrysalis.views.MonthCVD.dayCellWidth TS dayCellWidth
// FQImport: com.lightningkite.khrysalis.views.MonthCVD.drawDay.canvas TS canvas
// FQImport: com.lightningkite.khrysalis.views.MonthCVD.onTouchMove.height TS height
// FQImport: com.lightningkite.khrysalis.views.MonthCVD.dayAtPixel.row TS row
// FQImport: com.lightningkite.khrysalis.views.MonthCVD.onTouchMove.y TS y
// FQImport: com.lightningkite.khrysalis.views.CalendarDrawing.label.text TS text
// FQImport: com.lightningkite.khrysalis.views.MonthCVD.drawDay.showingMonth TS showingMonth
// FQImport: com.lightningkite.khrysalis.views.MonthCVD.drawDay.outer TS outer
// FQImport: com.lightningkite.khrysalis.views.CalendarDrawing.dayBackgroundStart.paint TS paint
// FQImport: android.graphics.RectF.centerX TS centerX
// FQImport: com.lightningkite.khrysalis.views.CalendarDrawing.dayBackgroundEnd.outer TS outer
// FQImport: com.lightningkite.khrysalis.views.MonthCVD.drawDate TS drawDate
// FQImport: com.lightningkite.khrysalis.views.MonthCVD.drawMonth.width TS width
// FQImport: com.lightningkite.khrysalis.views.MonthCVD.dayAt TS dayAt
// FQImport: android.graphics.RectF.right TS right
// FQImport: com.lightningkite.khrysalis.views.CustomViewDelegate TS CustomViewDelegate
// FQImport: com.lightningkite.khrysalis.views.MonthCVD.onTouchUp.x TS x
// FQImport: com.lightningkite.khrysalis.views.MonthCVD.dayCellHeight TS dayCellHeight
// FQImport: com.lightningkite.khrysalis.views.MonthCVD.dayAtPixel.columnDrag TS columnDrag
// FQImport: com.lightningkite.khrysalis.views.MonthCVD.dayAtPixel.columnRaw TS columnRaw
// FQImport: android.graphics.RectF TS RectF
// FQImport: com.lightningkite.khrysalis.views.MonthCVD.currentOffset TS currentOffset
// FQImport: com.lightningkite.khrysalis.views.MonthCVD.calcMonth TS calcMonth
// FQImport: com.lightningkite.khrysalis.views.MonthCVD.onTouchUp.weighted TS weighted
// FQImport: com.lightningkite.khrysalis.views.MonthCVD.measure.height TS height
// FQImport: android.graphics.RectF.height TS height
// FQImport: com.lightningkite.khrysalis.views.MonthCVD.dayAtPixel TS dayAtPixel
// FQImport: com.lightningkite.khrysalis.views.CalendarDrawing.dayBackgroundMid.paint TS paint
// FQImport: com.lightningkite.khrysalis.views.CalendarDrawing.dayBackgroundEnd.inner TS inner
// FQImport: com.lightningkite.khrysalis.views.MonthCVD.drawMonth.month TS month
// FQImport: com.lightningkite.khrysalis.views.MonthCVD.<set-currentOffset>.value TS value
// FQImport: com.lightningkite.khrysalis.views.MonthCVD.rectForReuse TS rectForReuse
// FQImport: com.lightningkite.khrysalis.views.MonthCVD.internalPadding TS internalPadding
// FQImport: com.lightningkite.khrysalis.views.MonthCVD.onTouchMove.width TS width
// FQImport: com.lightningkite.khrysalis.views.MonthCVD.onTap TS onTap
// FQImport: com.lightningkite.khrysalis.views.MonthCVD.draw.width TS width
// FQImport: com.lightningkite.khrysalis.views.MonthCVD.customView TS customView
// FQImport: com.lightningkite.khrysalis.views.MonthCVD.onTouchDown TS onTouchDownDate
// FQImport: com.lightningkite.khrysalis.views.MonthCVD.draggingId TS draggingId
// FQImport: com.lightningkite.khrysalis.views.MonthCVD.onTouchUp.id TS id
// FQImport: com.lightningkite.khrysalis.views.MonthCVD.onTouchDown.y TS y
// FQImport: com.lightningkite.khrysalis.views.draw.drawTextCentered>android.graphics.Canvas TS androidGraphicsCanvasDrawTextCentered
// FQImport: com.lightningkite.khrysalis.views.MonthCVD.dragEnabled TS dragEnabled
// FQImport: android.util.DisplayMetrics.scaledDensity TS scaledDensity
// FQImport: android.util.DisplayMetrics.density TS density
// FQImport: com.lightningkite.khrysalis.views.MonthCVD.dayCellMarginDp TS dayCellMarginDp
// FQImport: com.lightningkite.khrysalis.views.MonthCVD.drawDay.day TS day
// FQImport: com.lightningkite.khrysalis.views.CalendarDrawing.dayBackgroundMid.outer TS outer
// FQImport: com.lightningkite.khrysalis.views.MonthCVD.currentMonthObs TS currentMonthObs
// FQImport: com.lightningkite.khrysalis.views.MonthCVD.drawMonth TS drawMonth
// FQImport: com.lightningkite.khrysalis.views.MonthCVD.DRAGGING_NONE TS DRAGGING_NONE
// FQImport: com.lightningkite.khrysalis.views.MonthCVD.sizeThatFitsHeight.width TS width
// FQImport: com.lightningkite.khrysalis.views.MonthCVD.drawMonth.displayMetrics TS displayMetrics
// FQImport: com.lightningkite.khrysalis.time.DateAlone.month TS month
// FQImport: com.lightningkite.khrysalis.views.MonthCVD.internalPaddingDp TS internalPaddingDp
// FQImport: com.lightningkite.khrysalis.views.CalendarDrawing.dayBackground.inner TS inner
// FQImport: com.lightningkite.khrysalis.views.MonthCVD.drawMonth.col TS col
// FQImport: com.lightningkite.khrysalis.views.MonthCVD.onTouchMove.id TS id
// FQImport: android.graphics.RectF.set TS set
// FQImport: com.lightningkite.khrysalis.views.CalendarDrawing.dayBackgroundEnd.canvas TS canvas
// FQImport: android.graphics.Paint.color TS color
// FQImport: com.lightningkite.khrysalis.views.MonthCVD.labelFontSp TS labelFontSp
// FQImport: com.lightningkite.khrysalis.views.CalendarDrawing.dayBackgroundMid.inner TS inner
// FQImport: com.lightningkite.khrysalis.views.MonthCVD.dayAtPixel.column TS column
// FQImport: com.lightningkite.khrysalis.views.MonthCVD.drawLabel TS drawLabel
// FQImport: kotlin.Int.toString TS toString
// FQImport: com.lightningkite.khrysalis.views.CalendarDrawing.dayBackground.paint TS paint
// FQImport: com.lightningkite.khrysalis.views.CalendarDrawing.day.paint TS paint
// FQImport: com.lightningkite.khrysalis.views.CalendarDrawing.day.canvas TS canvas
// FQImport: com.lightningkite.khrysalis.views.MonthCVD.currentMonth TS currentMonth
// FQImport: android.graphics.RectF.centerY TS centerY
// FQImport: com.lightningkite.khrysalis.views.MonthCVD.onTouchMove.<anonymous>.it TS it
// FQImport: com.lightningkite.khrysalis.time.DateAlone TS DateAlone
// FQImport: android.util.DisplayMetrics TS DisplayMetrics
// FQImport: com.lightningkite.khrysalis.views.MonthCVD.onTouchMove TS onTouchMoveDate
// FQImport: com.lightningkite.khrysalis.views.MonthCVD.onTouchDown.day TS day
// FQImport: com.lightningkite.khrysalis.time.DateAlone.year TS year
// FQImport: com.lightningkite.khrysalis.views.MonthCVD.onTouchDown.width TS width
// FQImport: com.lightningkite.khrysalis.views.CalendarDrawing.dayBackgroundStart.inner TS inner
// FQImport: com.lightningkite.khrysalis.views.MonthCVD.dragStartX TS dragStartX
// FQImport: com.lightningkite.khrysalis.views.MonthCVD.dayAtPixel.y TS y
// FQImport: com.lightningkite.khrysalis.views.MonthCVD.drawMonth.xOffset TS xOffset
// FQImport: com.lightningkite.khrysalis.views.MonthCVD.isTap TS isTap
// FQImport: com.lightningkite.khrysalis.views.CalendarDrawing TS CalendarDrawing
// FQImport: android.graphics.RectF.left TS left
// FQImport: com.lightningkite.khrysalis.views.MonthCVD.dayLabelHeight TS dayLabelHeight
// FQImport: com.lightningkite.khrysalis.views.MonthCVD.drawMonth.canvas TS canvas
// FQImport: com.lightningkite.khrysalis.observables.MutableObservableProperty TS MutableObservableProperty
// FQImport: com.lightningkite.khrysalis.views.CalendarDrawing.label.canvas TS canvas
// FQImport: com.lightningkite.khrysalis.views.MonthCVD.drawMonth.row TS row
// FQImport: com.lightningkite.khrysalis.views.CalendarDrawing.dayBackground.canvas TS canvas
// FQImport: com.lightningkite.khrysalis.observables.MutableObservableProperty.value TS value
// FQImport: com.lightningkite.khrysalis.views.MonthCVD.dayAt.existing TS existing
// FQImport: com.lightningkite.khrysalis.views.MonthCVD.onTouchDown.x TS x
// FQImport: com.lightningkite.khrysalis.views.MonthCVD.dayAt.column TS column
// FQImport: com.lightningkite.khrysalis.views.MonthCVD.dayAt.month TS month
// FQImport: com.lightningkite.khrysalis.views.MonthCVD.onTouchUp.<anonymous>.it TS it
// FQImport: com.lightningkite.khrysalis.views.MonthCVD.dayCellMargin TS dayCellMargin
// FQImport: com.lightningkite.khrysalis.time.TimeNames TS TimeNames
// FQImport: com.lightningkite.khrysalis.floorDiv>kotlin.Int TS kotlinIntFloorDiv
// FQImport: com.lightningkite.khrysalis.views.MonthCVD.draw.height TS height
// FQImport: android.graphics.RectF.top TS top
// FQImport: com.lightningkite.khrysalis.time.set>com.lightningkite.khrysalis.time.DateAlone TS comLightningkiteKhrysalisTimeDateAloneSet
// FQImport: com.lightningkite.khrysalis.views.CalendarDrawing.day.originalColor TS originalColor
// FQImport: com.lightningkite.khrysalis.views.MonthCVD.drawLabel.dayOfWeek TS dayOfWeek
// FQImport: com.lightningkite.khrysalis.views.MonthCVD.drawLabel.canvas TS canvas
// FQImport: com.lightningkite.khrysalis.views.MonthCVD.measure.displayMetrics TS displayMetrics
// FQImport: com.lightningkite.khrysalis.views.MonthCVD.onTouchDown.height TS height
// FQImport: com.lightningkite.khrysalis.views.CalendarDrawing.day.date TS date
// FQImport: com.lightningkite.khrysalis.views.MonthCVD.dayAtPixel.x TS x
// FQImport: com.lightningkite.khrysalis.views.MonthCVD.onTouchUp TS onTouchUpDate
// FQImport: android.graphics.RectF.bottom TS bottom
// FQImport: com.lightningkite.khrysalis.views.MonthCVD.rectForReuseB TS rectForReuseB
// FQImport: com.lightningkite.khrysalis.views.CalendarDrawing.day.month TS month
// FQImport: com.lightningkite.khrysalis.views.MonthCVD.dayAtPixel.columnRawBeforeDrag TS columnRawBeforeDrag
// FQImport: com.lightningkite.khrysalis.observables.MutableObservableProperty.update TS update
// FQImport: com.lightningkite.khrysalis.views.MonthCVD.dayAtPixel.monthOffset TS monthOffset
// FQImport: com.lightningkite.khrysalis.floorMod>kotlin.Int TS kotlinIntFloorMod
// FQImport: com.lightningkite.khrysalis.views.MonthCVD.onTouchUp.y TS y
// FQImport: com.lightningkite.khrysalis.views.MonthCVD.dayFontSp TS dayFontSp
// FQImport: com.lightningkite.khrysalis.time.TimeNames.shortWeekdayName TS shortWeekdayName
// FQImport: com.lightningkite.khrysalis.views.CalendarDrawing.day.myPaint TS myPaint
// FQImport: com.lightningkite.khrysalis.views.MonthCVD.onTouchMove.x TS x
// FQImport: com.lightningkite.khrysalis.views.CalendarDrawing.day.inner TS inner
// FQImport: android.graphics.Paint TS Paint
// FQImport: com.lightningkite.khrysalis.views.CalendarDrawing.day TS day
// FQImport: com.lightningkite.khrysalis.views.MonthCVD.drawLabel.inner TS inner
// FQImport: com.lightningkite.khrysalis.views.MonthCVD.<set-currentMonth>.value TS value
const Date_actual_1 = require("../time/Date.actual");
const Math_shared_1 = require("../Math.shared");
const TimeNames_actual_1 = require("../time/TimeNames.actual");
const DateAlone_shared_1 = require("../time/DateAlone.shared");
const Canvas_actual_1 = require("./draw/Canvas.actual");
const Kotlin_1 = require("../Kotlin");
const DateAlone_actual_1 = require("../time/DateAlone.actual");
const CustomViewDelegate_shared_1 = require("./CustomViewDelegate.shared");
const Colors_actual_1 = require("./Colors.actual");
const CustomView_actual_1 = require("./CustomView.actual");
const Path_actual_1 = require("./draw/Path.actual");
//! Declares com.lightningkite.khrysalis.views.MonthCVD
class MonthCVD extends CustomViewDelegate_shared_1.CustomViewDelegate {
    constructor() { super(); }
    generateAccessibilityView() { return null; }
    //! Declares com.lightningkite.khrysalis.views.MonthCVD.currentMonth
    get currentMonth() { return this.currentMonthObs.value; }
    set currentMonth(value) {
        this.currentMonthObs.value = value;
    }
    //! Declares com.lightningkite.khrysalis.views.MonthCVD.currentOffset
    get currentOffset() {
        return this._currentOffset;
    }
    set currentOffset(value) {
        this._currentOffset = value;
        const temp140 = this.customView;
        if (temp140 !== null)
            CustomView_actual_1.customViewInvalidate(temp140);
    }
    animateNextMonth() {
        Date_actual_1.dateAloneModRelative(this.currentMonthObs.value, Date.prototype.getMonth, Date.prototype.setMonth, 1);
        this.currentMonthObs.update();
        this.currentOffset = 1;
    }
    animatePreviousMonth() {
        Date_actual_1.dateAloneModRelative(this.currentMonthObs.value, Date.prototype.getMonth, Date.prototype.setMonth, -1);
        this.currentMonthObs.update();
        this.currentOffset = -1;
    }
    dayAtPixel(x, y, existing = null) {
        if (y < this.dayLabelHeight)
            return null;
        //        val columnRaw = (x / dayCellWidth - (dayCellWidth + currentOffset) * 7).toInt()
        const columnRawBeforeDrag = x / this.dayCellWidth;
        const columnDrag = this.currentOffset * 7;
        const columnRaw = Math.floor((columnDrag + columnRawBeforeDrag));
        const column = Math_shared_1.kotlinIntFloorMod(columnRaw, 7);
        const monthOffset = Math_shared_1.kotlinIntFloorDiv(columnRaw, 7);
        const row = Math.floor(((y - this.dayLabelHeight) / this.dayCellHeight));
        if (row < 0 || row > 5)
            return null;
        if (column < 0 || column > 6)
            return null;
        return this.dayAt(Date_actual_1.dateAloneModRelative(DateAlone_shared_1.comLightningkiteKhrysalisTimeDateAloneSet(this.calcMonth, this.currentMonth), Date.prototype.getMonth, Date.prototype.setMonth, monthOffset), row, column, existing !== null && existing !== void 0 ? existing : new DateAlone_actual_1.DateAlone(0, 0, 0));
    }
    dayAt(month, row, column, existing = new DateAlone_actual_1.DateAlone(0, 0, 0)) {
        return Date_actual_1.dateAloneModRelative(Date_actual_1.dateAloneMod(Date_actual_1.dateAloneMod(DateAlone_shared_1.comLightningkiteKhrysalisTimeDateAloneSet(existing, month), Date.prototype.setDate, 1), function (newDay) {
            this;
            const diff = newDay - this.getDay();
            this.setDate(this.getDate() + diff);
        }, 1), Date.prototype.getDate, Date.prototype.setDate, row * 7 + column);
    }
    measure(width, height, displayMetrics) {
        this.internalPadding = displayMetrics.density * this.internalPaddingDp;
        this.dayCellMargin = displayMetrics.density * this.dayCellMarginDp;
        this.labelPaint.textSize = this.labelFontSp * displayMetrics.scaledDensity;
        this.dayPaint.textSize = this.dayFontSp * displayMetrics.scaledDensity;
        this.dayLabelHeight = this.labelPaint.textSize * 1.5 + this.internalPadding * 2;
        this.dayCellWidth = width / 7;
        this.dayCellHeight = (height - this.dayLabelHeight) / 6;
    }
    draw(canvas, width, height, displayMetrics) {
        this.measure(width, height, displayMetrics);
        if (this.currentOffset > 0) {
            //draw past month and current month
            this.drawMonth(canvas, (this.currentOffset - 1) * width, width, Date_actual_1.dateAloneModRelative(DateAlone_shared_1.comLightningkiteKhrysalisTimeDateAloneSet(this.calcMonthB, this.currentMonth), Date.prototype.getMonth, Date.prototype.setMonth, -1), displayMetrics);
            this.drawMonth(canvas, this.currentOffset * width, width, this.currentMonth, displayMetrics);
        }
        else if (this.currentOffset < 0) {
            //draw future month and current month
            this.drawMonth(canvas, (this.currentOffset + 1) * width, width, Date_actual_1.dateAloneModRelative(DateAlone_shared_1.comLightningkiteKhrysalisTimeDateAloneSet(this.calcMonthB, this.currentMonth), Date.prototype.getMonth, Date.prototype.setMonth, 1), displayMetrics);
            this.drawMonth(canvas, this.currentOffset * width, width, this.currentMonth, displayMetrics);
        }
        else {
            //Nice, it's exactly zero.  We can just draw one.
            this.drawMonth(canvas, this.currentOffset * width, width, this.currentMonth, displayMetrics);
        }
    }
    drawMonth(canvas, xOffset, width, month, displayMetrics) {
        for (const day of new Kotlin_1.NumberRange(1, 7)) {
            const col = day - 1;
            this.rectForReuse.set(xOffset + col * this.dayCellWidth - 0.01, -0.01, xOffset + (col + 1) * this.dayCellWidth + 0.01, this.dayLabelHeight + 0.01);
            this.rectForReuseB.set(this.rectForReuse);
            this.rectForReuse.inset(this.internalPadding, this.internalPadding);
            this.drawLabel(canvas, day, displayMetrics, this.rectForReuse, this.rectForReuseB);
        }
        for (const row of new Kotlin_1.NumberRange(0, 5)) {
            for (const col of new Kotlin_1.NumberRange(0, 6)) {
                const day = this.dayAt(month, row, col, this.drawDate);
                this.rectForReuse.set(xOffset + col * this.dayCellWidth - 0.01, this.dayLabelHeight + row * this.dayCellHeight - 0.01, xOffset + (col + 1) * this.dayCellWidth + 0.01, this.dayLabelHeight + (row + 1) * this.dayCellHeight + 0.01);
                if (this.rectForReuse.left > width) {
                    continue;
                }
                if (this.rectForReuse.right < 0) {
                    continue;
                }
                this.rectForReuseB.set(this.rectForReuse);
                this.rectForReuse.inset(this.dayCellMargin, this.dayCellMargin);
                this.drawDay(canvas, month, day, displayMetrics, this.rectForReuseB, this.rectForReuse);
            }
        }
    }
    drawLabel(canvas, dayOfWeek, displayMetrics, outer, inner) {
        CalendarDrawing.INSTANCE.label(canvas, dayOfWeek, inner, this.labelPaint);
    }
    drawDay(canvas, showingMonth, day, displayMetrics, outer, inner) {
        CalendarDrawing.INSTANCE.day(canvas, showingMonth, day, outer, this.dayPaint);
    }
    onTap(day) { }
    onTouchDownDate(day) { return false; }
    onTouchDown(id, x, y, width, height) {
        const day = this.dayAtPixel(x, y, undefined);
        const temp195 = day;
        if (temp195 !== null)
            ((it) => {
                if (this.onTouchDownDate(it)) {
                    return true;
                }
            })(temp195);
        this.dragStartX = x / width;
        this.dragStartY = y / height;
        this.draggingId = id;
        this.lastOffsetTime = Date.now();
        this.isTap = true;
        return true;
    }
    onTouchMoveDate(day) { return false; }
    onTouchMove(id, x, y, width, height) {
        if (this.draggingId === id) {
            this.lastOffset = this.currentOffset;
            this.lastOffsetTime = Date.now();
            if (this.dragEnabled) {
                this.currentOffset = (x / width) - this.dragStartX;
                if (Math.abs((x / width - this.dragStartX)) > 0.05 || Math.abs((y / height - this.dragStartY)) > 0.05) {
                    this.isTap = false;
                }
            }
        }
        else {
            const temp204 = this.dayAtPixel(x, y, undefined);
            if (temp204 !== null)
                ((it) => {
                    return this.onTouchMoveDate(it);
                })(temp204);
        }
        return true;
    }
    onTouchUpDate(day) { return false; }
    onTouchUp(id, x, y, width, height) {
        if (this.draggingId === id) {
            if (this.isTap) {
                const temp206 = this.dayAtPixel(x, y, undefined);
                if (temp206 !== null)
                    ((it) => {
                        this.onTap(it);
                    })(temp206);
            }
            else if (this.dragEnabled) {
                const weighted = this.currentOffset + (this.currentOffset - this.lastOffset) * 200 / (Date.now() - this.lastOffsetTime);
                if (weighted > 0.5) {
                    //shift right one
                    Date_actual_1.dateAloneModRelative(this.currentMonthObs.value, Date.prototype.getMonth, Date.prototype.setMonth, -1);
                    this.currentMonthObs.update();
                    this.currentOffset = this.currentOffset - 1;
                }
                else if (weighted < -0.5) {
                    //shift left one
                    Date_actual_1.dateAloneModRelative(this.currentMonthObs.value, Date.prototype.getMonth, Date.prototype.setMonth, 1);
                    this.currentMonthObs.update();
                    this.currentOffset = this.currentOffset + 1;
                }
            }
            this.draggingId = this.DRAGGING_NONE;
        }
        else {
            const temp218 = this.dayAtPixel(x, y, undefined);
            if (temp218 !== null)
                ((it) => {
                    return this.onTouchUpDate(it);
                })(temp218);
        }
        return true;
    }
    sizeThatFitsWidth(width, height) {
        return this.dayLabelHeight * 28;
    }
    sizeThatFitsHeight(width, height) {
        return width * 6 / 7 + this.dayLabelHeight;
    }
}
exports.MonthCVD = MonthCVD;
//! Declares com.lightningkite.khrysalis.views.CalendarDrawing
class CalendarDrawing {
    constructor() {
    }
    day(canvas, month, date, inner, paint) {
        if (date.month === month.month && date.year === month.year) {
            Canvas_actual_1.androidGraphicsCanvasDrawTextCentered(canvas, date.day.toString(), inner.centerX(), inner.centerY(), paint);
        }
        else {
            const originalColor = paint.color;
            let myPaint = paint;
            myPaint.color = Colors_actual_1.applyAlphaToColor(paint.color, 64);
            Canvas_actual_1.androidGraphicsCanvasDrawTextCentered(canvas, date.day.toString(), inner.centerX(), inner.centerY(), myPaint);
            myPaint.color = originalColor;
        }
    }
    label(canvas, dayOfWeek, inner, paint) {
        const text = TimeNames_actual_1.TimeNames.INSTANCE.shortWeekdayName(dayOfWeek);
        Canvas_actual_1.androidGraphicsCanvasDrawTextCentered(canvas, text, inner.centerX(), inner.centerY(), paint);
    }
    dayBackground(canvas, inner, paint) {
        canvas.arc(inner.centerX(), inner.centerY(), Math.min(inner.width() / 2, inner.height() / 2), 0, Math.PI * 2);
        paint.complete(canvas);
    }
    dayBackgroundStart(canvas, inner, outer, paint) {
        canvas.arc(inner.centerX(), inner.centerY(), Math.min(inner.width() / 2, inner.height() / 2), 0, Math.PI * 2);
        paint.complete(canvas);
        canvas.clip(Path_actual_1.pathFromLTRB(outer.centerX(), inner.top, outer.right, inner.bottom));
        paint.complete(canvas);
    }
    dayBackgroundMid(canvas, inner, outer, paint) {
        canvas.clip(Path_actual_1.pathFromLTRB(outer.left, inner.top, outer.right, inner.bottom));
        paint.complete(canvas);
    }
    dayBackgroundEnd(canvas, inner, outer, paint) {
        canvas.arc(inner.centerX(), inner.centerY(), Math.min(inner.width() / 2, inner.height() / 2), 0, Math.PI * 2);
        paint.complete(canvas);
        canvas.clip(Path_actual_1.pathFromLTRB(outer.left, inner.top, outer.centerX(), inner.bottom));
        paint.complete(canvas);
    }
}
exports.CalendarDrawing = CalendarDrawing;
CalendarDrawing.INSTANCE = new CalendarDrawing();
