"use strict";
// Generated by Khrysalis TypeScript converter
// File: views/CustomView.actual.kt
// Package: com.lightningkite.khrysalis.views
Object.defineProperty(exports, "__esModule", { value: true });
const DisplayMetrics_actual_1 = require("./DisplayMetrics.actual");
const DisposeCondition_actual_1 = require("../rx/DisposeCondition.actual");
const customViewDelegateSymbol = Symbol("customViewDelegateSymbol");
const customViewConfiguredSymbol = Symbol("customViewConfiguredSymbol");
function customViewSetDelegate(view, delegate) {
    var _a, _b;
    (_a = view[customViewDelegateSymbol]) === null || _a === void 0 ? void 0 : _a.dispose();
    delegate.customView = view;
    let lastEndHandled = -1;
    view.style.touchAction = "none";
    view.onpointerdown = (e) => {
        lastEndHandled = -1;
        const b = view.getBoundingClientRect();
        const result = delegate.onTouchDown(e.pointerId, e.pageX - b.x, e.pageY - b.y, view.width, view.height);
        if (result)
            e.preventDefault();
    };
    view.onpointermove = (e) => {
        if (e.buttons > 0) {
            const b = view.getBoundingClientRect();
            const result = delegate.onTouchMove(e.pointerId, e.pageX - b.x, e.pageY - b.y, view.width, view.height);
            if (result)
                e.preventDefault();
        }
    };
    view.onpointercancel = (e) => {
        if (e.pointerId == lastEndHandled) {
            return;
        }
        lastEndHandled = e.pointerId;
        const b = view.getBoundingClientRect();
        const result = delegate.onTouchCancelled(e.pointerId, e.pageX - b.x, e.pageY - b.y, view.width, view.height);
        if (result)
            e.preventDefault();
    };
    view.onpointerleave = (e) => {
        if (e.pointerId == lastEndHandled) {
            return;
        }
        lastEndHandled = e.pointerId;
        const b = view.getBoundingClientRect();
        const result = delegate.onTouchCancelled(e.pointerId, e.pageX - b.x, e.pageY - b.y, view.width, view.height);
        if (result)
            e.preventDefault();
    };
    view.onpointerup = (e) => {
        if (e.pointerId == lastEndHandled) {
            return;
        }
        lastEndHandled = e.pointerId;
        const b = view.getBoundingClientRect();
        const result = delegate.onTouchUp(e.pointerId, e.pageX - b.x, e.pageY - b.y, view.width, view.height);
        if (result)
            e.preventDefault();
    };
    view.onwheel = (e) => {
        const result = delegate.onWheel(e.deltaY);
        if (result)
            e.preventDefault();
    };
    if (view.getContext) {
        const ctx = view.getContext("2d");
        view.width = view.offsetWidth;
        view.height = view.offsetHeight;
        if (ctx && view.width > 2 && view.height > 2) {
            delegate.draw(ctx, view.width, view.height, DisplayMetrics_actual_1.DisplayMetrics.INSTANCE);
        }
    }
    else {
        const gen = delegate.generateAccessibilityView();
        if (gen) {
            (_b = view.parentElement) === null || _b === void 0 ? void 0 : _b.appendChild(gen);
        }
    }
    view[customViewDelegateSymbol] = delegate;
    if (!view[customViewConfiguredSymbol]) {
        view[customViewConfiguredSymbol] = true;
        DisposeCondition_actual_1.getAndroidViewViewRemoved(view).call(new DisposeCondition_actual_1.DisposableLambda(() => {
            var _a;
            (_a = view[customViewDelegateSymbol]) === null || _a === void 0 ? void 0 : _a.dispose();
            view[customViewDelegateSymbol] = undefined;
        }));
        const p = view.parentElement;
        if (p) {
            const adjWidth = !view.style.width && !(p.style.flexDirection == "column" && view.style.alignSelf == "stretch");
            const adjHeight = !view.style.height && !(p.style.flexDirection == "row" && view.style.alignSelf == "stretch");
            const obs = new ResizeObserver(function callback() {
                if (adjWidth) {
                    view.style.width = delegate.sizeThatFitsWidth(p.scrollWidth, p.scrollHeight).toString() + "px";
                }
                if (adjHeight) {
                    view.style.height = delegate.sizeThatFitsHeight(p.scrollWidth, p.scrollHeight).toString() + "px";
                }
                customViewInvalidate(view);
                if (!document.contains(view)) {
                    obs.disconnect();
                }
            });
            obs.observe(p);
        }
    }
}
exports.customViewSetDelegate = customViewSetDelegate;
function customViewInvalidate(view) {
    const delegate = view[customViewDelegateSymbol];
    if (!delegate)
        return;
    if (view.getContext) {
        const ctx = view.getContext("2d");
        view.width = view.offsetWidth;
        view.height = view.offsetHeight;
        if (ctx && view.width > 2 && view.height > 2) {
            ctx.clearRect(0, 0, view.width, view.height);
            delegate.draw(ctx, view.width, view.height, DisplayMetrics_actual_1.DisplayMetrics.INSTANCE);
        }
    }
}
exports.customViewInvalidate = customViewInvalidate;
//# sourceMappingURL=CustomView.actual.js.map