"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// Generated by Khrysalis TypeScript converter
// File: net/ConnectedWebSocket.actual.kt
// Package: com.lightningkite.khrysalis.net
const rxjs_1 = require("rxjs");
const WebSocketFrame_shared_1 = require("./WebSocketFrame.shared");
//! Declares com.lightningkite.khrysalis.net.ConnectedWebSocket
class ConnectedWebSocket {
    constructor(url) {
        this.underlyingSocket = null;
        this.read = new rxjs_1.Subject();
        this.ownConnection = new rxjs_1.Subject();
        this.closed = false;
        this.url = url;
    }
    resetSocket() {
        var _a;
        (_a = this.underlyingSocket) === null || _a === void 0 ? void 0 : _a.close(1000, "Resetting connection");
        const newSocket = new WebSocket(this.url);
        const parent = this;
        newSocket.binaryType = "arraybuffer";
        newSocket.addEventListener("open", (event) => {
            parent.ownConnection.next(this);
        });
        newSocket.addEventListener("error", (event) => {
            parent.ownConnection.error(event);
            parent.read.error(event);
        });
        newSocket.addEventListener("close", (event) => {
            parent.ownConnection.complete();
            parent.read.complete();
        });
        newSocket.addEventListener("message", (event) => {
            const d = event.data;
            if (typeof d === "string") {
                parent.read.next(new WebSocketFrame_shared_1.WebSocketFrame(null, d));
            }
            else {
                parent.read.next(new WebSocketFrame_shared_1.WebSocketFrame(new Int8Array(d), null));
            }
        });
        this.underlyingSocket = newSocket;
    }
    complete() {
        var _a;
        (_a = this.underlyingSocket) === null || _a === void 0 ? void 0 : _a.close(1000, null);
        this.closed = true;
    }
    next(t) {
        var _a;
        this.underlyingSocket.send((_a = t.text) !== null && _a !== void 0 ? _a : t.binary.buffer);
    }
    error(e) {
        var _a;
        (_a = this.underlyingSocket) === null || _a === void 0 ? void 0 : _a.close(1011, e.message);
        this.closed = true;
    }
    unsubscribe() {
        this.complete();
    }
}
exports.ConnectedWebSocket = ConnectedWebSocket;
ConnectedWebSocket.implementsInterfaceIoReactivexObserver = true;
