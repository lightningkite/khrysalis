"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// Generated by Khrysalis TypeScript converter
// File: net/RxHttpAssist.actual.kt
// Package: com.lightningkite.khrysalis.net
const HttpResponseError_actual_1 = require("./HttpResponseError.actual");
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
const jsonParsing_1 = require("./jsonParsing");
//! Declares com.lightningkite.khrysalis.net.unsuccessfulAsError
function xSingleUnsuccessfulAsError(this_) {
    return this_.pipe(operators_1.map((it) => {
        if (it.ok) {
            return it;
        }
        else {
            throw new HttpResponseError_actual_1.HttpResponseException(it, undefined);
        }
    }));
}
exports.xSingleUnsuccessfulAsError = xSingleUnsuccessfulAsError;
//! Declares com.lightningkite.khrysalis.net.discard
function xSingleDiscard(this_) {
    return this_.pipe(operators_1.switchMap((it) => {
        if (it.ok) {
            return xResponseDiscard(it);
        }
        else {
            throw new HttpResponseError_actual_1.HttpResponseException(it, undefined);
        }
    }));
}
exports.xSingleDiscard = xSingleDiscard;
//! Declares com.lightningkite.khrysalis.net.readJson
function xSingleReadJson(this_, T) {
    return this_.pipe(operators_1.switchMap((it) => {
        if (it.ok) {
            return xResponseReadJson(it, T);
        }
        else {
            throw new HttpResponseError_actual_1.HttpResponseException(it, undefined);
        }
    }));
}
exports.xSingleReadJson = xSingleReadJson;
//! Declares com.lightningkite.khrysalis.net.readJsonDebug
function xSingleReadJsonDebug(this_, T) {
    return this_.pipe(operators_1.switchMap((it) => {
        if (it.ok) {
            return xResponseReadJsonDebug(it, T);
        }
        else {
            throw new HttpResponseError_actual_1.HttpResponseException(it, undefined);
        }
    }));
}
exports.xSingleReadJsonDebug = xSingleReadJsonDebug;
//! Declares com.lightningkite.khrysalis.net.readText
function xSingleReadText(this_) {
    return this_.pipe(operators_1.switchMap((it) => {
        if (it.ok) {
            return xResponseReadText(it);
        }
        else {
            throw new HttpResponseError_actual_1.HttpResponseException(it, undefined);
        }
    }));
}
exports.xSingleReadText = xSingleReadText;
//! Declares com.lightningkite.khrysalis.net.readData
function xSingleReadData(this_) {
    return this_.pipe(operators_1.switchMap((it) => {
        if (it.ok) {
            return xResponseReadData(it);
        }
        else {
            throw new HttpResponseError_actual_1.HttpResponseException(it, undefined);
        }
    }));
}
exports.xSingleReadData = xSingleReadData;
//! Declares com.lightningkite.khrysalis.net.readJson
function xResponseReadJson(this_, T) {
    return rxjs_1.from(this_.json()).pipe(operators_1.map((it) => {
        return jsonParsing_1.parse(it, T);
    }));
}
exports.xResponseReadJson = xResponseReadJson;
//! Declares com.lightningkite.khrysalis.net.readJsonDebug
function xResponseReadJsonDebug(this_, T) {
    return rxjs_1.from(this_.json()).pipe(operators_1.map((it) => {
        return jsonParsing_1.parse(it, T);
    }));
}
exports.xResponseReadJsonDebug = xResponseReadJsonDebug;
//! Declares com.lightningkite.khrysalis.net.discard
function xResponseDiscard(this_) {
    return rxjs_1.from(this_.text()).pipe(operators_1.map((x) => { }));
}
exports.xResponseDiscard = xResponseDiscard;
//! Declares com.lightningkite.khrysalis.net.readText
function xResponseReadText(this_) {
    return rxjs_1.from(this_.text());
}
exports.xResponseReadText = xResponseReadText;
//! Declares com.lightningkite.khrysalis.net.readData
function xResponseReadData(this_) {
    return rxjs_1.from(this_.arrayBuffer()).pipe(operators_1.map((it) => new Int8Array(it)));
}
exports.xResponseReadData = xResponseReadData;
//! Declares com.lightningkite.khrysalis.net.readHttpException
function xSingleReadHttpException(this_) {
    return this_.pipe(operators_1.catchError((err) => {
        if (err instanceof HttpResponseError_actual_1.HttpResponseException) {
            return rxjs_1.from(err.response.text())
                .pipe(operators_1.map((text) => {
                throw new HttpResponseError_actual_1.HttpReadResponseException(err.response, text, err.cause);
            }));
        }
        else {
            return rxjs_1.throwError(err);
        }
    }));
}
exports.xSingleReadHttpException = xSingleReadHttpException;
//# sourceMappingURL=RxHttpAssist.actual.js.map