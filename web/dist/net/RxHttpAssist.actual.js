"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// Generated by Khrysalis TypeScript converter
// File: net/RxHttpAssist.actual.kt
// Package: com.lightningkite.khrysalis.net
const HttpResponseError_actual_1 = require("./HttpResponseError.actual");
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
const jsonParsing_1 = require("./jsonParsing");
//! Declares com.lightningkite.khrysalis.net.unsuccessfulAsError
function ioReactivexSingleUnsuccessfulAsError(this_) {
    return this_.pipe(operators_1.map((it) => {
        if (it.ok) {
            return it;
        }
        else {
            throw new HttpResponseError_actual_1.HttpResponseException(it, undefined);
        }
    }));
}
exports.ioReactivexSingleUnsuccessfulAsError = ioReactivexSingleUnsuccessfulAsError;
//! Declares com.lightningkite.khrysalis.net.discard
function ioReactivexSingleDiscard(this_) {
    return this_.pipe(operators_1.switchMap((it) => {
        if (it.ok) {
            return okhttp3ResponseDiscard(it);
        }
        else {
            throw new HttpResponseError_actual_1.HttpResponseException(it, undefined);
        }
    }));
}
exports.ioReactivexSingleDiscard = ioReactivexSingleDiscard;
//! Declares com.lightningkite.khrysalis.net.readJson
function ioReactivexSingleReadJson(this_, T) {
    return this_.pipe(operators_1.switchMap((it) => {
        if (it.ok) {
            return okhttp3ResponseReadJson(it, T);
        }
        else {
            throw new HttpResponseError_actual_1.HttpResponseException(it, undefined);
        }
    }));
}
exports.ioReactivexSingleReadJson = ioReactivexSingleReadJson;
//! Declares com.lightningkite.khrysalis.net.readJsonDebug
function ioReactivexSingleReadJsonDebug(this_, T) {
    return this_.pipe(operators_1.switchMap((it) => {
        if (it.ok) {
            return okhttp3ResponseReadJsonDebug(it, T);
        }
        else {
            throw new HttpResponseError_actual_1.HttpResponseException(it, undefined);
        }
    }));
}
exports.ioReactivexSingleReadJsonDebug = ioReactivexSingleReadJsonDebug;
//! Declares com.lightningkite.khrysalis.net.readText
function ioReactivexSingleReadText(this_) {
    return this_.pipe(operators_1.switchMap((it) => {
        if (it.ok) {
            return okhttp3ResponseReadText(it);
        }
        else {
            throw new HttpResponseError_actual_1.HttpResponseException(it, undefined);
        }
    }));
}
exports.ioReactivexSingleReadText = ioReactivexSingleReadText;
//! Declares com.lightningkite.khrysalis.net.readData
function ioReactivexSingleReadData(this_) {
    return this_.pipe(operators_1.switchMap((it) => {
        if (it.ok) {
            return okhttp3ResponseReadData(it);
        }
        else {
            throw new HttpResponseError_actual_1.HttpResponseException(it, undefined);
        }
    }));
}
exports.ioReactivexSingleReadData = ioReactivexSingleReadData;
//! Declares com.lightningkite.khrysalis.net.readJson
function okhttp3ResponseReadJson(this_, T) {
    return rxjs_1.from(this_.json()).pipe(operators_1.map((it) => {
        return jsonParsing_1.parse(it, T);
    }));
}
exports.okhttp3ResponseReadJson = okhttp3ResponseReadJson;
//! Declares com.lightningkite.khrysalis.net.readJsonDebug
function okhttp3ResponseReadJsonDebug(this_, T) {
    return rxjs_1.from(this_.json()).pipe(operators_1.map((it) => {
        return jsonParsing_1.parse(it, T);
    }));
}
exports.okhttp3ResponseReadJsonDebug = okhttp3ResponseReadJsonDebug;
//! Declares com.lightningkite.khrysalis.net.discard
function okhttp3ResponseDiscard(this_) {
    return rxjs_1.from(this_.text()).pipe(operators_1.map((x) => { }));
}
exports.okhttp3ResponseDiscard = okhttp3ResponseDiscard;
//! Declares com.lightningkite.khrysalis.net.readText
function okhttp3ResponseReadText(this_) {
    return rxjs_1.from(this_.text());
}
exports.okhttp3ResponseReadText = okhttp3ResponseReadText;
//! Declares com.lightningkite.khrysalis.net.readData
function okhttp3ResponseReadData(this_) {
    return rxjs_1.from(this_.arrayBuffer()).pipe(operators_1.map((it) => new Int8Array(it)));
}
exports.okhttp3ResponseReadData = okhttp3ResponseReadData;
//! Declares com.lightningkite.khrysalis.net.readHttpException
function ioReactivexSingleReadHttpException(this_) {
    return this_.pipe(operators_1.catchError((err) => {
        if (err instanceof HttpResponseError_actual_1.HttpResponseException) {
            return rxjs_1.from(err.response.text())
                .pipe(operators_1.map((text) => {
                throw new HttpResponseError_actual_1.HttpReadResponseException(err.response, text, err.cause);
            }));
        }
        else {
            return rxjs_1.throwError(err);
        }
    }));
}
exports.ioReactivexSingleReadHttpException = ioReactivexSingleReadHttpException;
//# sourceMappingURL=RxHttpAssist.actual.js.map