"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// Generated by Khrysalis TypeScript converter - this file will be overwritten.
// File: net/HttpModels.shared.kt
// Package: com.lightningkite.khrysalis.net
const Kotlin_1 = require("../Kotlin");
//! Declares com.lightningkite.khrysalis.net.HttpPhase
class HttpPhase {
    constructor(name, jsonName) {
        this.name = name;
        this.jsonName = jsonName;
    }
    static values() { return HttpPhase._values; }
    static valueOf(name) { return HttpPhase[name]; }
    toString() { return this.name; }
    toJSON() { return this.jsonName; }
}
exports.HttpPhase = HttpPhase;
HttpPhase.Connect = new HttpPhase("Connect", "Connect");
HttpPhase.Write = new HttpPhase("Write", "Write");
HttpPhase.Waiting = new HttpPhase("Waiting", "Waiting");
HttpPhase.Read = new HttpPhase("Read", "Read");
HttpPhase.Done = new HttpPhase("Done", "Done");
HttpPhase._values = [HttpPhase.Connect, HttpPhase.Write, HttpPhase.Waiting, HttpPhase.Read, HttpPhase.Done];
//! Declares com.lightningkite.khrysalis.net.HttpProgress
class HttpProgress {
    constructor(phase, ratio) {
        this.phase = phase;
        this.ratio = ratio;
    }
    hashCode() {
        let hash = 17;
        hash = 31 * hash + Kotlin_1.hashAnything(this.phase);
        hash = 31 * hash + Kotlin_1.hashAnything(this.ratio);
        return hash;
    }
    equals(other) { return other instanceof HttpProgress && Kotlin_1.safeEq(this.phase, other.phase) && Kotlin_1.safeEq(this.ratio, other.ratio); }
    toString() { return `HttpProgress(phase = ${this.phase}, ratio = ${this.ratio})`; }
    copy(phase = this.phase, ratio = this.ratio) { return new HttpProgress(phase, ratio); }
    //! Declares com.lightningkite.khrysalis.net.HttpProgress.approximate
    get approximate() {
        return (() => {
            switch (this.phase) {
                case HttpPhase.Connect:
                    return 0;
                case HttpPhase.Write:
                    return 0.15 + 0.5 * this.ratio;
                case HttpPhase.Waiting:
                    return 0.65;
                case HttpPhase.Read:
                    return 0.7 + 0.3 * this.ratio;
                case HttpPhase.Done:
                    return 1;
                default:
                    return 0;
            }
        })();
    }
}
exports.HttpProgress = HttpProgress;
(function (HttpProgress) {
    //! Declares com.lightningkite.khrysalis.net.HttpProgress.Companion
    class Companion {
        constructor() {
            this.connecting = new HttpProgress(HttpPhase.Connect, 0);
            this.waiting = new HttpProgress(HttpPhase.Waiting, 0);
            this.done = new HttpProgress(HttpPhase.Done, 0);
        }
    }
    Companion.INSTANCE = new Companion();
    HttpProgress.Companion = Companion;
})(HttpProgress = exports.HttpProgress || (exports.HttpProgress = {}));
//! Declares com.lightningkite.khrysalis.net.HttpOptions
class HttpOptions {
    constructor(callTimeout = null, writeTimeout = 10000, readTimeout = 10000, connectTimeout = 10000, cacheMode = HttpCacheMode.Default) {
        this.callTimeout = callTimeout;
        this.writeTimeout = writeTimeout;
        this.readTimeout = readTimeout;
        this.connectTimeout = connectTimeout;
        this.cacheMode = cacheMode;
    }
    hashCode() {
        let hash = 17;
        hash = 31 * hash + Kotlin_1.hashAnything(this.callTimeout);
        hash = 31 * hash + Kotlin_1.hashAnything(this.writeTimeout);
        hash = 31 * hash + Kotlin_1.hashAnything(this.readTimeout);
        hash = 31 * hash + Kotlin_1.hashAnything(this.connectTimeout);
        hash = 31 * hash + Kotlin_1.hashAnything(this.cacheMode);
        return hash;
    }
    equals(other) { return other instanceof HttpOptions && Kotlin_1.safeEq(this.callTimeout, other.callTimeout) && Kotlin_1.safeEq(this.writeTimeout, other.writeTimeout) && Kotlin_1.safeEq(this.readTimeout, other.readTimeout) && Kotlin_1.safeEq(this.connectTimeout, other.connectTimeout) && Kotlin_1.safeEq(this.cacheMode, other.cacheMode); }
    toString() { return `HttpOptions(callTimeout = ${this.callTimeout}, writeTimeout = ${this.writeTimeout}, readTimeout = ${this.readTimeout}, connectTimeout = ${this.connectTimeout}, cacheMode = ${this.cacheMode})`; }
    copy(callTimeout = this.callTimeout, writeTimeout = this.writeTimeout, readTimeout = this.readTimeout, connectTimeout = this.connectTimeout, cacheMode = this.cacheMode) { return new HttpOptions(callTimeout, writeTimeout, readTimeout, connectTimeout, cacheMode); }
}
exports.HttpOptions = HttpOptions;
//! Declares com.lightningkite.khrysalis.net.HttpCacheMode
class HttpCacheMode {
    constructor(name, jsonName) {
        this.name = name;
        this.jsonName = jsonName;
    }
    static values() { return HttpCacheMode._values; }
    static valueOf(name) { return HttpCacheMode[name]; }
    toString() { return this.name; }
    toJSON() { return this.jsonName; }
}
exports.HttpCacheMode = HttpCacheMode;
HttpCacheMode.Default = new HttpCacheMode("Default", "Default");
HttpCacheMode.NoStore = new HttpCacheMode("NoStore", "NoStore");
HttpCacheMode.Reload = new HttpCacheMode("Reload", "Reload");
HttpCacheMode.NoCache = new HttpCacheMode("NoCache", "NoCache");
HttpCacheMode.ForceCache = new HttpCacheMode("ForceCache", "ForceCache");
HttpCacheMode.OnlyIfCached = new HttpCacheMode("OnlyIfCached", "OnlyIfCached");
HttpCacheMode._values = [HttpCacheMode.Default, HttpCacheMode.NoStore, HttpCacheMode.Reload, HttpCacheMode.NoCache, HttpCacheMode.ForceCache, HttpCacheMode.OnlyIfCached];
//# sourceMappingURL=HttpModels.shared.js.map