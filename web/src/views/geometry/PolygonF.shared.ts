// Generated by Khrysalis TypeScript converter - this file will be overwritten.
// File: views/geometry/PolygonF.shared.kt
// Package: com.lightningkite.khrysalis.views.geometry
import { iterCount } from '../../kotlin/Collections'
import { PointF } from './PointF.actual'
import { safeEq } from '../../Kotlin'
import { range as iterRange } from 'iterable-operator'
import { Geometry } from './Geometry.shared'

//! Declares com.lightningkite.khrysalis.views.geometry.PolygonF
export class PolygonF {
    public readonly points: Array<PointF>;
    public constructor(points: Array<PointF>) {
        this.points = points;
    }
    public hashCode(): number {
        let hash = 17;
        hash = 31 * hash + (this.points?.hashCode() ?? 0);
        return hash;
    }
    public equals(other: any): boolean { return other instanceof PolygonF && safeEq(this.points, other.points) }
    public toString(): string { return `PolygonF(points = ${this.points})` }
    public copy(points: Array<PointF> = this.points): PolygonF { return new PolygonF(points); }
    
    public contains(point: PointF): boolean {
        const intersections = iterCount(iterRange(0, this.points.length-1), (it: number): boolean => {
                const a = this.points[it];
                
                const b = this.points[(it + 1) % this.points.length];
                
                return Geometry.INSTANCE.rayIntersectsLine(point.x, point.y, point.x + 100, point.y, a.x, a.y, b.x, b.y);
        });
        
        return intersections % 2 === 1;
    }
}

