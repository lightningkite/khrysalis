// Generated by Khrysalis TypeScript converter - this file will be overwritten.
// File: views/SelectDateRangeMonthCVD.shared.kt
// Package: com.lightningkite.khrysalis.views
// FQImport: com.lightningkite.khrysalis.views.CalendarDrawing.dayBackgroundEnd TS dayBackgroundEnd
// FQImport: com.lightningkite.khrysalis.views.SelectDateRangeMonthCVD.drawDay.day TS day
// FQImport: com.lightningkite.khrysalis.views.CalendarDrawing.dayBackgroundStart TS dayBackgroundStart
// FQImport: com.lightningkite.khrysalis.views.SelectDateRangeMonthCVD.dayPaint TS dayPaint
// FQImport: com.lightningkite.khrysalis.observables.subscribeBy>com.lightningkite.khrysalis.observables.ObservableProperty<kotlin.Any> TS comLightningkiteKhrysalisObservablesObservablePropertySubscribeBy
// FQImport: com.lightningkite.khrysalis.views.SelectDateRangeMonthCVD.start TS start
// FQImport: com.lightningkite.khrysalis.views.SelectDateRangeMonthCVD.measure.width TS width
// FQImport: com.lightningkite.khrysalis.views.SelectDateRangeMonthCVD.measure.displayMetrics TS displayMetrics
// FQImport: com.lightningkite.khrysalis.views.SelectDateRangeMonthCVD.invalidate TS invalidate
// FQImport: com.lightningkite.khrysalis.views.SelectDateRangeMonthCVD.draggingStart TS draggingStart
// FQImport: com.lightningkite.khrysalis.views.SelectDateRangeMonthCVD.drawDay.outer TS outer
// FQImport: com.lightningkite.khrysalis.views.MonthCVD TS MonthCVD
// FQImport: com.lightningkite.khrysalis.views.SelectDateRangeMonthCVD.selectedPaint TS selectedPaint
// FQImport: android.graphics.RectF TS RectF
// FQImport: com.lightningkite.khrysalis.views.SelectDateRangeMonthCVD.measure.height TS height
// FQImport: com.lightningkite.khrysalis.views.SelectDateRangeMonthCVD.drawDay.canvas TS canvas
// FQImport: com.lightningkite.khrysalis.time.DateAlone TS DateAlone
// FQImport: android.util.DisplayMetrics TS DisplayMetrics
// FQImport: com.lightningkite.khrysalis.views.SelectDateRangeMonthCVD.onTouchDown.day TS day
// FQImport: com.lightningkite.khrysalis.views.SelectDateRangeMonthCVD.onTouchDown.endInclusiveValue TS endInclusiveValue
// FQImport: com.lightningkite.khrysalis.rx.forever>io.reactivex.disposables.Disposable TS ioReactivexDisposablesDisposableForever
// FQImport: com.lightningkite.khrysalis.views.SelectDateRangeMonthCVD.endInclusive TS endInclusive
// FQImport: com.lightningkite.khrysalis.views.SelectDateRangeMonthCVD.onTouchMove.day TS day
// FQImport: com.lightningkite.khrysalis.views.SelectDateRangeMonthCVD.selectedDayPaint TS selectedDayPaint
// FQImport: com.lightningkite.khrysalis.views.SelectDateRangeMonthCVD.onTouchDown.startValue TS startValue
// FQImport: com.lightningkite.khrysalis.views.SelectDateRangeMonthCVD.onTouchUp.day TS day
// FQImport: com.lightningkite.khrysalis.views.SelectDateRangeMonthCVD.onTouchMove.obs TS obs
// FQImport: com.lightningkite.khrysalis.views.CalendarDrawing.dayBackground TS dayBackground
// FQImport: com.lightningkite.khrysalis.views.SelectDateRangeMonthCVD.onTouchMove.endInclusiveValue TS endInclusiveValue
// FQImport: com.lightningkite.khrysalis.views.SelectDateRangeMonthCVD.onTouchMove TS onTouchMoveDate
// FQImport: com.lightningkite.khrysalis.views.MonthCVD.measure TS measure
// FQImport: com.lightningkite.khrysalis.views.SelectDateRangeMonthCVD.onTap.day TS day
// FQImport: com.lightningkite.khrysalis.views.CalendarDrawing TS CalendarDrawing
// FQImport: com.lightningkite.khrysalis.observables.StandardObservableProperty TS StandardObservableProperty
// FQImport: com.lightningkite.khrysalis.views.CalendarDrawing.dayBackgroundMid TS dayBackgroundMid
// FQImport: com.lightningkite.khrysalis.views.SelectDateRangeMonthCVD.startedDraggingOn TS startedDraggingOn
// FQImport: com.lightningkite.khrysalis.views.SelectDateRangeMonthCVD.onTouchMove.startValue TS startValue
// FQImport: android.graphics.Paint TS Paint
// FQImport: com.lightningkite.khrysalis.views.SelectDateRangeMonthCVD.drawDay.showingMonth TS showingMonth
// FQImport: com.lightningkite.khrysalis.views.CalendarDrawing.day TS day
// FQImport: com.lightningkite.khrysalis.observables.MutableObservableProperty TS MutableObservableProperty
// FQImport: com.lightningkite.khrysalis.views.SelectDateRangeMonthCVD.drawDay.inner TS inner
import { DisplayMetrics } from './DisplayMetrics.actual'
import { CalendarDrawing, MonthCVD } from './MonthCVD.shared'
import { Paint } from './draw/Paint.actual'
import { MutableObservableProperty } from '../observables/MutableObservableProperty.shared'
import { DateAlone } from '../time/DateAlone.actual'
import { safeEq } from '../Kotlin'
import { copyDateAloneMod } from '../time/Date.actual'
import { StandardObservableProperty } from '../observables/StandardObservableProperty.shared'
import { RectF } from './geometry/RectF.actual'
import { comLightningkiteKhrysalisObservablesObservablePropertySubscribeBy } from '../observables/ObservableProperty.ext.shared'
import { ioReactivexDisposablesDisposableForever } from '../rx/DisposeCondition.actual'

//! Declares com.lightningkite.khrysalis.views.SelectDateRangeMonthCVD
export class SelectDateRangeMonthCVD extends MonthCVD {
    public constructor() {
        super();
        this.draggingStart = true;
        this.start = new StandardObservableProperty(null, undefined);
        this.endInclusive = new StandardObservableProperty(null, undefined);
        let temp_360;
        if ((temp_360 = this.start.value) !== null) { 
            this.currentMonthObs.value = copyDateAloneMod(temp_360, Date.prototype.setDate, 1);
        };
        ioReactivexDisposablesDisposableForever(this.start.onChange.subscribe( (value) => {
                    this?.invalidate()
        }, undefined, undefined));
        ioReactivexDisposablesDisposableForever(comLightningkiteKhrysalisObservablesObservablePropertySubscribeBy(this.endInclusive, undefined, undefined, (value) => {
                    this?.invalidate()
        }));
        this.selectedDayPaint = new Paint();
        this.selectedPaint = new Paint();
        this.drawDay_dateAlone = new DateAlone(0, 0, 0);
        this.startedDraggingOn = null;
    }
    
    public generateAccessibilityView(): (HTMLElement | null) { return null; }
    
    public draggingStart: boolean;
    
    public start: MutableObservableProperty<(DateAlone | null)>;
    
    public endInclusive: MutableObservableProperty<(DateAlone | null)>;
    
    
    
    public readonly selectedDayPaint: Paint;
    
    public readonly selectedPaint: Paint;
    
    
    public measure(width: number, height: number, displayMetrics: DisplayMetrics): void {
        super.measure(width, height, displayMetrics);
        this.selectedDayPaint.textSize = this.dayPaint.textSize;
    }
    
    public readonly drawDay_dateAlone: DateAlone;
    
    public drawDay(canvas: CanvasRenderingContext2D, showingMonth: DateAlone, day: DateAlone, displayMetrics: DisplayMetrics, outer: RectF, inner: RectF): void {
        if (safeEq(day, this.start.value) && (safeEq(day, this.endInclusive.value) || this.endInclusive.value === null)){
            CalendarDrawing.INSTANCE.dayBackground(canvas, inner, this.selectedPaint);
            CalendarDrawing.INSTANCE.day(canvas, showingMonth, day, inner, this.selectedDayPaint);
        } else if (safeEq(day, this.start.value)){
            CalendarDrawing.INSTANCE.dayBackgroundStart(canvas, inner, outer, this.selectedPaint);
            CalendarDrawing.INSTANCE.day(canvas, showingMonth, day, inner, this.selectedDayPaint);
        } else if (safeEq(day, this.endInclusive.value)){
            CalendarDrawing.INSTANCE.dayBackgroundEnd(canvas, inner, outer, this.selectedPaint);
            CalendarDrawing.INSTANCE.day(canvas, showingMonth, day, inner, this.selectedDayPaint);
        } else if (day.comparable > (this.start.value?.comparable ?? 2147483647) && day.comparable < (this.endInclusive.value?.comparable ?? -2147483648)){
            CalendarDrawing.INSTANCE.dayBackgroundMid(canvas, inner, outer, this.selectedPaint);
            CalendarDrawing.INSTANCE.day(canvas, showingMonth, day, inner, this.selectedDayPaint);
        } else {
            CalendarDrawing.INSTANCE.day(canvas, showingMonth, day, inner, this.dayPaint);
        }
    }
    
    
    private startedDraggingOn: (DateAlone | null);
    
    
    public onTap(day: DateAlone): void {
        if (this.start.value !== null && safeEq(this.start.value, this.endInclusive.value) && day.comparable > this.start.value!!.comparable) {
            this.endInclusive.value = day;
        } else {
            this.start.value = day;
            this.endInclusive.value = day;
        }
    }
    
    public onTouchDownDate(day: DateAlone): boolean {
        if (!safeEq(day, this.start.value) && !safeEq(day, this.endInclusive.value)) {
            return false;
        }
        this.startedDraggingOn = day;
        //If on start/end - drag
        //If after, extend
        //If before, extend
        //If middle, collapse all
        const startValue = this.start.value;
        
        const endInclusiveValue = this.endInclusive.value;
        
        
        if (startValue === null || endInclusiveValue === null){
            this.start.value = day;
            this.endInclusive.value = day;
            this.draggingStart = false;
        } else if (safeEq(day, endInclusiveValue)){
            this.draggingStart = false;
        } else if (safeEq(day, startValue)){
            this.draggingStart = true;
        } else if (day.comparable > endInclusiveValue!!.comparable && safeEq(startValue, endInclusiveValue)){
            this.endInclusive.value = day;
            this.draggingStart = false;
        } else {
            this.start.value = day;
            this.endInclusive.value = day;
            this.draggingStart = false;
        }
        return true;
    }
    
    public onTouchMoveDate(day: DateAlone): boolean {
        const startValue = this.start.value;
        
        const endInclusiveValue = this.endInclusive.value;
        
        if (startValue === null || endInclusiveValue === null){
        } else if (this.draggingStart && day.comparable > endInclusiveValue!!.comparable){
            this.start.value = this.endInclusive.value;
            this.endInclusive.value = day;
            this.draggingStart = false;
            return true;
        } else if (!this.draggingStart && day.comparable < startValue!!.comparable){
            this.endInclusive.value = this.start.value;
            this.start.value = day;
            this.draggingStart = true;
            return true;
        }
        
        const obs: MutableObservableProperty<(DateAlone | null)> = this.draggingStart ? this.start : this.endInclusive;
        
        obs.value = day;
        return true;
    }
    
    public onTouchUpDate(day: DateAlone): boolean {
        this.onTouchMoveDate(day);
        return true;
    }
}

