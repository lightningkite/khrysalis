// Generated by Khrysalis TypeScript converter - this file will be overwritten.
// File: views/SelectDateRangeMonthCVD.shared.kt
// Package: com.lightningkite.khrysalis.views
import { DisplayMetrics } from './DisplayMetrics.actual'
import { CalendarDrawing, MonthCVD } from './MonthCVD.shared'
import { Paint } from './draw/Paint.actual'
import { SubscriptionLike } from 'rxjs'
import { MutableObservableProperty } from '../observables/MutableObservableProperty.shared'
import { DateAlone } from '../time/DateAlone.actual'
import { safeEq } from '../Kotlin'
import { copyDateAloneMod } from '../time/Date.actual'
import { StandardObservableProperty } from '../observables/StandardObservableProperty.shared'
import { runOrNull } from '../kotlin/Language'
import { RectF } from './geometry/RectF.actual'
import { comLightningkiteKhrysalisObservablesObservablePropertySubscribeBy } from '../observables/ObservableProperty.ext.shared'
import { ioReactivexDisposablesDisposableForever } from '../rx/DisposeCondition.actual'

//! Declares com.lightningkite.khrysalis.views.SelectDateRangeMonthCVD
export class SelectDateRangeMonthCVD extends MonthCVD {
    public constructor() {
        super();
        this.draggingStart = true;
        this.start = new StandardObservableProperty<(DateAlone | null)>(null, undefined);
        this.endInclusive = new StandardObservableProperty<(DateAlone | null)>(null, undefined);
        const it_349 = this.start.value;
        if (it_349 !== null) { 
            this.currentMonthObs.value = copyDateAloneMod(it_349, Date.prototype.setDate, 1);
        };
        ioReactivexDisposablesDisposableForever<SubscriptionLike>(this.start.onChange.subscribe( (value: (DateAlone | null)): void => {
                    this?.invalidate();
        }, undefined, undefined));
        ioReactivexDisposablesDisposableForever<SubscriptionLike>(comLightningkiteKhrysalisObservablesObservablePropertySubscribeBy<(DateAlone | null)>(this.endInclusive, undefined, undefined,  (value: (DateAlone | null)): void => {
                    this?.invalidate();
        }));
        this.selectedDayPaint = new Paint();
        this.selectedPaint = new Paint();
        this.drawDay_dateAlone = new DateAlone(0, 0, 0);
        this.startedDraggingOn = null;
    }
    
    public generateAccessibilityView(): (HTMLElement | null) { 
        return null; 
    }
    
    public draggingStart: boolean;
    
    public start: MutableObservableProperty<(DateAlone | null)>;
    
    public endInclusive: MutableObservableProperty<(DateAlone | null)>;
    
    
    
    public readonly selectedDayPaint: Paint;
    
    public readonly selectedPaint: Paint;
    
    
    public measure(width: number, height: number, displayMetrics: DisplayMetrics): void {
        super.measure(width, height, displayMetrics);
        this.selectedDayPaint.textSize = this.dayPaint.textSize;
    }
    
    public readonly drawDay_dateAlone: DateAlone;
    
    public drawDay(canvas: CanvasRenderingContext2D, showingMonth: DateAlone, day: DateAlone, displayMetrics: DisplayMetrics, outer: RectF, inner: RectF): void {
        if (safeEq(day, this.start.value) && (safeEq(day, this.endInclusive.value) || this.endInclusive.value === null)){
            CalendarDrawing.INSTANCE.dayBackground(canvas, inner, this.selectedPaint);
            CalendarDrawing.INSTANCE.day(canvas, showingMonth, day, inner, this.selectedDayPaint);
        } else if (safeEq(day, this.start.value)){
            CalendarDrawing.INSTANCE.dayBackgroundStart(canvas, inner, outer, this.selectedPaint);
            CalendarDrawing.INSTANCE.day(canvas, showingMonth, day, inner, this.selectedDayPaint);
        } else if (safeEq(day, this.endInclusive.value)){
            CalendarDrawing.INSTANCE.dayBackgroundEnd(canvas, inner, outer, this.selectedPaint);
            CalendarDrawing.INSTANCE.day(canvas, showingMonth, day, inner, this.selectedDayPaint);
        } else if (day.comparable > ((this.start.value?.comparable ?? null) ?? 2147483647) && day.comparable < ((this.endInclusive.value?.comparable ?? null) ?? -2147483648)){
            CalendarDrawing.INSTANCE.dayBackgroundMid(canvas, inner, outer, this.selectedPaint);
            CalendarDrawing.INSTANCE.day(canvas, showingMonth, day, inner, this.selectedDayPaint);
        } else {
            CalendarDrawing.INSTANCE.day(canvas, showingMonth, day, inner, this.dayPaint);
        }
    }
    
    
    private startedDraggingOn: (DateAlone | null);
    
    
    public onTap(day: DateAlone): void {
        if (this.start.value !== null && safeEq(this.start.value, this.endInclusive.value) && day.comparable > this.start.value!!.comparable) {
            this.endInclusive.value = day;
        } else {
            this.start.value = day;
            this.endInclusive.value = day;
        }
    }
    
    public onTouchDownDate(day: DateAlone): boolean {
        if (!safeEq(day, this.start.value) && !safeEq(day, this.endInclusive.value)) {
            return false;
        }
        this.startedDraggingOn = day;
        //If on start/end - drag
        //If after, extend
        //If before, extend
        //If middle, collapse all
        const startValue = this.start.value;
        
        const endInclusiveValue = this.endInclusive.value;
        
        
        if (startValue === null || endInclusiveValue === null){
            this.start.value = day;
            this.endInclusive.value = day;
            this.draggingStart = false;
        } else if (safeEq(day, endInclusiveValue)){
            this.draggingStart = false;
        } else if (safeEq(day, startValue)){
            this.draggingStart = true;
        } else if (day.comparable > endInclusiveValue!!.comparable && safeEq(startValue, endInclusiveValue)){
            this.endInclusive.value = day;
            this.draggingStart = false;
        } else {
            this.start.value = day;
            this.endInclusive.value = day;
            this.draggingStart = false;
        }
        return true;
    }
    
    public onTouchMoveDate(day: DateAlone): boolean {
        const startValue = this.start.value;
        
        const endInclusiveValue = this.endInclusive.value;
        
        if (startValue === null || endInclusiveValue === null){
        } else if (this.draggingStart && day.comparable > endInclusiveValue!!.comparable){
            this.start.value = this.endInclusive.value;
            this.endInclusive.value = day;
            this.draggingStart = false;
            return true;
        } else if ((!this.draggingStart) && day.comparable < startValue!!.comparable){
            this.endInclusive.value = this.start.value;
            this.start.value = day;
            this.draggingStart = true;
            return true;
        }
        
        const obs: MutableObservableProperty<(DateAlone | null)> = this.draggingStart ? this.start : this.endInclusive;
        
        obs.value = day;
        return true;
    }
    
    public onTouchUpDate(day: DateAlone): boolean {
        this.onTouchMoveDate(day);
        return true;
    }
}

