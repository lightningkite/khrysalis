// Generated by Khrysalis TypeScript converter
// File: views/CustomView.actual.kt
// Package: com.lightningkite.khrysalis.views

import {CustomViewDelegate} from "./CustomViewDelegate.shared";
import {DisplayMetrics} from "./DisplayMetrics.actual";

const customViewDelegateSymbol = Symbol("customViewDelegateSymbol");

declare global {
    interface HTMLCanvasElement {
        [customViewDelegateSymbol]: CustomViewDelegate | undefined
    }
}

export function customViewSetDelegate(view: HTMLCanvasElement, delegate: CustomViewDelegate) {
    delegate.customView = view;
    view.ontouchstart = (e) => {
        const b = view.getBoundingClientRect();
        const on = e.changedTouches;
        for(let i = 0; i < on.length; i++){
            const t = on.item(i);
            delegate.onTouchDown(t.identifier, t.pageX - b.x, t.pageY - b.y, view.width, view.height)
        }
    }
    view.ontouchmove = (e) => {
        const b = view.getBoundingClientRect();
        const on = e.changedTouches;
        for(let i = 0; i < on.length; i++){
            const t = on.item(i);
            delegate.onTouchMove(t.identifier, t.pageX - b.x, t.pageY - b.y, view.width, view.height)
        }
    }
    view.ontouchcancel = (e) => {
        const b = view.getBoundingClientRect();
        const on = e.changedTouches;
        for(let i = 0; i < on.length; i++){
            const t = on.item(i);
            delegate.onTouchCancelled(t.identifier, t.pageX - b.x, t.pageY - b.y, view.width, view.height)
        }
    }
    view.ontouchend = (e) => {
        const b = view.getBoundingClientRect();
        const on = e.changedTouches;
        for(let i = 0; i < on.length; i++){
            const t = on.item(i);
            delegate.onTouchUp(t.identifier, t.pageX - b.x, t.pageY - b.y, view.width, view.height)
        }
    }
    //TODO: Measure?
    delegate.draw(view.getContext("2d"), view.width, view.height, DisplayMetrics.INSTANCE);
    view[customViewDelegateSymbol] = delegate;
}

export function customViewInvalidate(view: HTMLCanvasElement) {
    view[customViewDelegateSymbol]?.draw(view.getContext("2d"), view.width, view.height, DisplayMetrics.INSTANCE);
}