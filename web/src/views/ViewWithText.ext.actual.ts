// Generated by Khrysalis TypeScript converter
// File: views/ViewWithText.ext.actual.kt
// Package: com.lightningkite.khrysalis.views


import {range} from "iterable-operator";

const entityMap: Record<string, string> = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;',
    '/': '&#x2F;',
    '`': '&#x60;',
    '=': '&#x3D;',
    '\n': '<br/>'
};

function escapeHtml (s: string) {
    return String(s).replace(/[&<>"'`=\n\/]/g, function fromEntityMap (c) {
        return entityMap[c];
    });
}
export function setViewText(view: HTMLElement, text: string) {
    if(view instanceof HTMLInputElement){
        const labels = view.labels;
        if(labels){
            for(const index of range(0, labels.length)) {
                const labelView = labels.item(index);
                for(const index of range(0, labelView.childNodes.length)) {
                    const subview = labelView.childNodes.item(index);
                    if(subview instanceof HTMLElement && subview.classList.contains("khrysalis-label")) {
                        setViewText(subview, text);
                    }
                }
            }
        }
        const p = view.parentElement;
        if(p){
            for(const index of range(0, p.childNodes.length)) {
                const subview = p.childNodes.item(index);
                if(subview instanceof HTMLElement && subview.classList.contains("khrysalis-label")) {
                    setViewText(subview, text);
                }
            }
        }
    } else {
        view.innerHTML = escapeHtml(text)
    }
}