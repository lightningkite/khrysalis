// Generated by Khrysalis TypeScript converter
// File: collection.actual.kt
// Package: com.lightningkite.khrysalis
import {Comparable, also} from './Kotlin'
import {safeCompare} from "./kotlin/Comparable";

//! Declares kotlin.collections.binarySearch>kotlin.collections.List
export function xListBinarySearch<T>(
    self: Array<T>,
    fromIndex: number = 0,
    toIndex: number = self.length,
    comparison: (a: T) => number
): number {
    let low = fromIndex
    let high = toIndex - 1

    while (low <= high) {
        const mid = (low + high) >>> 1
        const midVal = self[mid]
        const cmp = comparison(midVal)

        if (cmp < 0)
            low = mid + 1
        else if (cmp > 0)
            high = mid - 1
        else
            return mid // key found
    }
    return -(low + 1)  // key not found
}

//! Declares kotlin.collections.binarySearchBy>kotlin.collections.List
export function xListBinarySearchBy<T, K extends Comparable<K>>(
    self: Array<T>,
    key: K | null,
    fromIndex: number = 0,
    toIndex: number = self.length,
    selector: (a: T) => (K | null)
): number {
    return xListBinarySearch(
        self,
        fromIndex,
        toIndex,
        (x) => safeCompare(key, selector(x))
    )
}

//! Declares com.lightningkite.khrysalis.withoutIndex>kotlin.collections.List
export function xListWithoutIndex<T>(this_WithoutIndex: Array<T>, index: number): Array<T> {
    return also(Array.from(this_WithoutIndex), (this_: Array<T>) => this_.splice(index, 1));
}

//! Declares com.lightningkite.khrysalis.sumByLong>kotlin.collections.Iterable
export function xIterableSumByLong<T>(this_SumByLong: Iterable<T>, selector: (a: T) => number): number {
    let sum: number = 0;

    for (const element of this_SumByLong) {
        sum = sum + selector(element);
    }
    return sum;
}

//! Declares com.lightningkite.khrysalis.binaryInsertBy>kotlin.collections.MutableList
export function xMutableListBinaryInsertBy<T, K extends Comparable<K>>(this_BinaryInsertBy: Array<T>, item: T, selector: (a: T) => (K | null)) {
    const index = xListBinarySearchBy(this_BinaryInsertBy, selector(item), undefined, undefined, selector);

    if (index < 0) {
        this_BinaryInsertBy.splice(-index - 1, 0, item);
    } else {
        this_BinaryInsertBy.splice(index, 0, item);
    }
}

//! Declares com.lightningkite.khrysalis.binaryInsertByDistinct>kotlin.collections.MutableList
export function xMutableListBinaryInsertByDistinct<T, K extends Comparable<K>>(this_BinaryInsertByDistinct: Array<T>, item: T, selector: (a: T) => (K | null)): Boolean {
    const index = xListBinarySearchBy(this_BinaryInsertByDistinct, selector(item), undefined, undefined, selector);

    if (index < 0) {
        this_BinaryInsertByDistinct.splice(-index - 1, 0, item);
        return true;
    } else {
        return false;
    }
}


//! Declares com.lightningkite.khrysalis.binaryFind>kotlin.collections.List
export function xListBinaryFind<T, K extends Comparable<K>>(this_BinaryFind: Array<T>, key: K, selector: (a: T) => (K | null)): (T | null) {
    const index = xListBinarySearchBy(this_BinaryFind, key, undefined, undefined, selector);

    if (index >= 0) {
        return this_BinaryFind[index];
    } else {
        return null;
    }
}


//! Declares com.lightningkite.khrysalis.binaryForEach>kotlin.collections.List
export function xListBinaryForEach<T, K extends Comparable<K>>(this_BinaryForEach: Array<T>, lower: K, upper: K, selector: (a: T) => (K | null), action: (a: T) => void) {
    let index = xListBinarySearchBy(this_BinaryForEach, lower, undefined, undefined, selector);

    if (index < 0) {
        index = -index - 1;
    }
    while (index < this_BinaryForEach.size) {
        const item = this_BinaryForEach[index];

        const itemK = selector(item);

        if(itemK === null || safeCompare(item, upper)) break;

        action(item);
        index++;
    }
}

