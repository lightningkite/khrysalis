// Generated by Khrysalis TypeScript converter
// File: Image.loadingRx.actual.kt
// Package: com.lightningkite.khrysalis
import {Image, ImageImageBitmap, ImageRaw, ImageReference, ImageRemoteUrl} from './Image.shared'
import {Exception} from './Kotlin'
import {ioReactivexSingleUnsuccessfulAsError} from './net/RxHttpAssist.actual'
import {Observable, of as rxOf, from as rxFrom, throwError} from 'rxjs'
import {IllegalStateException, also} from 'Kotlin'
import {flatMap, map, map as rxMap} from 'rxjs/operators'

//! Declares com.lightningkite.khrysalis.load>com.lightningkite.khrysalis.Image
export function comLightningkiteKhrysalisImageLoad(this_: Image): Observable<ImageBitmap> {
    return (() => {
        try {
            return (() => {
                if (this_ instanceof ImageRaw) {
                    return rxFrom(createImageBitmap(new Blob([this_.raw])))
                } else if (this_ instanceof ImageReference) {
                    return rxFrom(createImageBitmap(this_.uri));
                } else if (this_ instanceof ImageImageBitmap) {
                    return rxOf(this_.bitmap)
                } else if (this_ instanceof ImageRemoteUrl) {
                    return rxFrom(fetch(this_.url))
                        .pipe(flatMap((x) => { return x.blob() }))
                        .pipe(flatMap((x) => { return createImageBitmap(x); }))
                } else {
                    return throwError(new Exception("This shouldn't be possible - got an image object of an unknown type.", null))
                }
            })()
        } catch (_e) {
            let e = _e as Exception;
            return throwError(e);
        }
    })();
}
