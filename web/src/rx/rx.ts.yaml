---


# Observables


- id: io.reactivex.ObservableSource
  type: type
  template:
    pattern: ObservableInput<~T0~>
    imports:
      ObservableInput: rxjs
- id: io.reactivex.SingleSource
  type: type
  template:
    pattern: ObservableInput<~T0~>
    imports:
      ObservableInput: rxjs

- id: io.reactivex.Observable
  type: type
  template:
    pattern: Observable<~T0~>
    imports:
      Observable: rxjs

- id: io.reactivex.Observable
  type: typeRef
  template:
    pattern: Observable
    imports:
      Observable: rxjs

- id: io.reactivex.Observable.subscribe
  type: call
  arguments: [io.reactivex.Observer]
  template: ~this~.subscribe(~0~)

- id: io.reactivex.Observable.subscribe
  type: call
  template: ~this~.subscribe(~0~, ~1~, ~2~)

- id: io.reactivex.rxkotlin.subscribeBy
  type: call
  receiver: io.reactivex.Observable
  template: ~this~.subscribe(~onNext~, ~onError~, ~onComplete~)

# Operators
- id: io.reactivex.Observable.map
  type: call
  template:
    pattern: ~this~.pipe(rxMap(~0~))
    imports:
      rxMap: map from rxjs/operators

- id: io.reactivex.Observable.retry
  type: call
  template:
    pattern: ~this~.pipe(rxRetry(~0~))
    imports:
      retry: rxjs/operators as rxRetry

- id: io.reactivex.Observable.retry
  type: call
  arguments: []
  template:
    pattern: ~this~.pipe(rxRetry())
    imports:
      retry: rxjs/operators as rxRetry

- id: io.reactivex.Observable.delay
  type: call
  template:
    pattern: ~this~.pipe(rxDelay(~0~))
    imports:
      delay: rxjs/operators as rxDelay

- id: io.reactivex.Observable.debounce
  type: call
  template:
    pattern: ~this~.pipe(rxDebounceTime(~0~))
    imports:
      debounceTime: rxjs/operators as rxDebounceTime

- id: io.reactivex.Observable.filter
  type: call
  template:
    pattern: ~this~.pipe(rxFilter(~0~))
    imports:
      rxFilter: filter from rxjs/operators

- id: io.reactivex.Observable.distinct
  type: call
  template:
    pattern: ~this~.pipe(rxDistinct(~0~))
    imports:
      rxDistinct: distinct from rxjs/operators

- id: io.reactivex.Observable.distinctUntilChanged
  type: call
  arguments: []
  template:
    pattern: ~this~.pipe(rxDistinctUntilChanged())
    imports:
      rxDistinctUntilChanged: distinctUntilChanged from rxjs/operators

- id: io.reactivex.Observable.distinctUntilChanged
  type: call
  template:
    pattern: ~this~.pipe(rxDistinctUntilChanged(~0~))
    imports:
      rxDistinctUntilChanged: distinctUntilChanged from rxjs/operators

- id: io.reactivex.Observable.mapNotNull
  type: call
  template:
    pattern: ~this~.pipe(rxMap(~0~), rxFilter(x => x !== null))
    imports:
      rxMap: map from rxjs/operators
      rxFilter: filter from rxjs/operators

- id: io.reactivex.Observable.filterNotNull
  type: call
  template:
    pattern: ~this~.pipe(rxFilter(x => x !== null))
    imports:
      rxFilter: filter from rxjs/operators

- id: com.lightningkite.khrysalis.rx.combineLatest
  type: call
  template:
    pattern: rxCombineLatest([~this~, ~0~]).pipe(rxMap(x => (~1~)(x[0], x[1])))
    imports:
      rxMap: map from rxjs/operators
      rxCombineLatest: combineLatest from rxjs

- id: com.lightningkite.khrysalis.rx.combineLatest
  type: call
  receiver: kotlin.collections.List
  arguments: []
  template:
    pattern: rxCombineLatest(~this~)
    imports:
      rxMap: map from rxjs/operators
      rxCombineLatest: combineLatest from rxjs

- id: com.lightningkite.khrysalis.rx.combineLatest
  type: call
  receiver: kotlin.collections.List
  template:
    pattern: rxCombineLatest(~this~).pipe(rxMap(~0~))
    imports:
      rxMap: map from rxjs/operators
      rxCombineLatest: combineLatest from rxjs

- id: io.reactivex.Observable.skip
  type: call
  template:
    pattern: ~this~.pipe(rxSkip(0))
    imports:
      rxSkip: skip from rxjs/operators

- id: io.reactivex.Observable.flatMap
  type: call
  template:
    pattern: ~this~.pipe(rxFlatMap(~0~))
    imports:
      rxFlatMap: flatMap from rxjs/operators

- id: io.reactivex.Observable.switchMap
  type: call
  template:
    pattern: ~this~.pipe(rxSwitchMap(~0~))
    imports:
      rxSwitchMap: switchMap from rxjs/operators

- id: io.reactivex.Observable.subscribeOn
  type: call
  template: ~this~

- id: io.reactivex.Observable.scheduleOn
  type: call
  template: ~this~

- id: io.reactivex.Observable.create
  type: call
  template:
    pattern: new Observable(~0~)
    imports:
      Observable: rxjs

- id: io.reactivex.Observable.create
  type: call
  hasExplicitTypeArguments: true
  template:
    pattern: new Observable<~T0~>(~0~)
    imports:
      Observable: rxjs

- id: io.reactivex.Observable.fromIterable
  type: call
  template:
    pattern: rxFrom(~0~)
    imports:
      rxFrom: from from rxjs

- id: io.reactivex.Observable.just
  type: call
  template:
    pattern: rxOf(~*~)
    imports:
      rxOf: of from rxjs

- id: io.reactivex.Observable.error
  type: call
  template:
    pattern: rxThrowError(~*~)
    imports:
      rxThrowError: throwError from rxjs

- id: io.reactivex.Observable.empty
  type: call
  template:
    pattern: rxOf()
    imports:
      rxOf: of from rxjs

- id: io.reactivex.Observable.never
  type: call
  template:
    pattern: rxNEVER
    imports:
      rxNEVER: NEVER from rxjs

- id: io.reactivex.Observable.observeOn
  type: call
  template: ~this~

- id: io.reactivex.Observable.doFinally
  type: call
  template:
    pattern: ~this~.pipe(rxFinalize(~0~))
    imports:
      rxFinalize: finalize from rxjs/operators

- id: io.reactivex.Observable.doOnNext
  type: call
  template:
    pattern: ~this~.pipe(rxTap(~0~))
    imports:
      rxTap: tap from rxjs/operators

- id: io.reactivex.Observable.doOnSubscribe
  type: call
  template:
    pattern: ~this~.pipe(rxDoOnSubscribe(~0~))
    imports:
      rxDoOnSubscribe: doOnSubscribe from khrysalis/dist/rx/RxActual.actual

- id: io.reactivex.Observable.doOnDispose
  type: call
  template:
    pattern: ~this~.pipe(rxDoOnDispose(~0~))
    imports:
      rxDoOnDispose: doOnDispose from khrysalis/dist/rx/RxActual.actual

- id: io.reactivex.Observable.doOnError
  type: call
  template:
    pattern: ~this~.pipe(rxTap(undefined, ~0~))
    imports:
      rxTap: tap from rxjs/operators

- id: io.reactivex.Observable.doOnComplete
  type: call
  template:
    pattern: ~this~.pipe(rxTap(undefined, undefined, ~0~))
    imports:
      rxTap: tap from rxjs/operators

- id: io.reactivex.Observable.doOnTerminate
  type: call
  template:
    pattern: ~this~.pipe(rxTap(undefined, ~0~, ~0~))
    imports:
      tap: rxjs/operators as rxTap

- id: io.reactivex.Observable.startWith
  type: call
  template:
    pattern: rxConcat(rxOf(~0~), ~this~)
    imports:
      rxOf: of from rxjs
      rxConcat: concat from rxjs

- id: io.reactivex.Observable.concat
  type: call
  template:
    pattern: rxConcat(~*~)
    imports:
      rxConcat: concat from rxjs

- id: io.reactivex.Observable.replay
  type: call
  template:
    pattern: ~this~.pipe(rxPublishReplay(~0~))
    imports:
      rxPublishReplay: publishReplay from rxjs/operators

- id: io.reactivex.Observable.publish
  type: call
  template:
    pattern: ~this~.pipe(rxPublish())
    imports:
      rxPublish: publish from rxjs/operators

- id: io.reactivex.Observable.share
  type: call
  template:
    pattern: ~this~.pipe(rxShare())
    imports:
      rxShare: share from rxjs/operators

- id: io.reactivex.observables.ConnectableObservable.refCount
  type: call
  template:
    pattern: ~this~.pipe(rxRefCount())
    imports:
      rxRefCount: refCount from rxjs/operators

- id: io.reactivex.Observable.take
  type: call
  template:
    pattern: ~this~.pipe(rxTake(~0~))
    imports:
      rxTake: take from rxjs/operators

- id: io.reactivex.Observable.singleOrError
  type: call
  template: ~this~

# Observer
- id: io.reactivex.Observer
  type: type
  template:
    pattern: Observer<~T0~>
    imports:
      Observer: rxjs

- id: io.reactivex.Observer.onNext
  type: call
  template: ~this~.next(~0~)

- id: io.reactivex.Observer.onError
  type: call
  template: ~this~.error(~0~)

- id: io.reactivex.Observer.onComplete
  type: call
  template: ~this~.complete()

- id: io.reactivex.Emitter.onNext
  type: call
  template: ~this~.next(~0~)

- id: io.reactivex.Emitter.onError
  type: call
  template: ~this~.error(~0~)

- id: io.reactivex.Emitter.onComplete
  type: call
  template: ~this~.complete()

# ObservableEmitter
- id: io.reactivex.ObservableEmitter
  type: type
  template:
    pattern: Observer<~T0~>
    imports:
      Observer: rxjs


# Single


- id: io.reactivex.Single
  type: type
  template:
    pattern: Observable<~T0~>
    imports:
      Observable: rxjs

- id: io.reactivex.Single
  type: typeRef
  template:
    pattern: Observable
    imports:
      Observable: rxjs

- id: io.reactivex.Single.observeOn
  type: call
  template: ~this~

- id: io.reactivex.Single.subscribe
  type: call
  arguments: [io.reactivex.Observer]
  template: ~this~.subscribe(~0~)

- id: io.reactivex.Single.subscribe
  type: call
  template: ~this~.subscribe(~0~, ~1~)

- id: io.reactivex.Single.subscribe
  type: call
  arguments: [io.reactivex.functions.BiConsumer]
  template:
    pattern: ~this~.subscribe(new SingleObserver(~0~))
    imports:
      SingleObserver: khrysalis/dist/rx/RxActual.actual

- id: io.reactivex.rxkotlin.subscribeBy
  type: call
  receiver: io.reactivex.Single
  template: ~this~.subscribe(~onSuccess~, ~onError~)

# Operators for Single
- id: io.reactivex.Single.cache
  type: call
  template:
    pattern: ~this~.pipe(rxShareReplay(1))
    imports:
      rxShareReplay: shareReplay from rxjs/operators

- id: io.reactivex.Single.map
  type: call
  template:
    pattern: ~this~.pipe(rxMap(~0~))
    imports:
      map: rxjs/operators as rxMap

- id: io.reactivex.Single.retry
  type: call
  template:
    pattern: ~this~.pipe(rxRetry(~0~))
    imports:
      retry: rxjs/operators as rxRetry

- id: io.reactivex.Single.retry
  type: call
  arguments: []
  template:
    pattern: ~this~.pipe(rxRetry())
    imports:
      retry: rxjs/operators as rxRetry

- id: io.reactivex.Single.delay
  type: call
  template:
    pattern: ~this~.pipe(rxDelay(~0~))
    imports:
      delay: rxjs/operators as rxDelay

- id: io.reactivex.Single.flatMap
  type: call
  template:
    pattern: ~this~.pipe(rxFlatMap(~0~))
    imports:
      flatMap: rxjs/operators as rxFlatMap

- id: io.reactivex.Single.subscribeOn
  type: call
  template: ~this~

- id: io.reactivex.Single.scheduleOn
  type: call
  template: ~this~

- id: io.reactivex.Single.create
  type: call
  template:
    pattern: new Observable(~0~)
    imports:
      Observable: rxjs

- id: io.reactivex.Single.create
  type: call
  hasExplicitTypeArguments: true
  template:
    pattern: new Observable<~T0~>(~0~)
    imports:
      Observable: rxjs

- id: io.reactivex.Single.just
  type: call
  template:
    pattern: rxOf(~0~)
    imports:
      of: rxjs as rxOf

- id: io.reactivex.Single.zip
  type: call
  template:
    pattern: rxZip(...~0~).pipe(rxMap(~1~))
    imports:
      rxZip: zip from rxjs
      rxMap: map from rxjs/operators

- id: com.lightningkite.khrysalis.rx.zip
  type: call
  template:
    pattern: rxZip(...~this~)
    imports:
      rxZip: zip from rxjs

- id: io.reactivex.Single.error
  type: call
  template:
    pattern: rxThrowError(~*~)
    imports:
      rxThrowError: throwError from rxjs

- id: io.reactivex.Single.doOnSubscribe
  type: call
  template:
    pattern: doOnSubscribe(~this~, ~0~)
    imports:
      doOnSubscribe: khrysalis/dist/Kotlin

- id: io.reactivex.Single.doFinally
  type: call
  template:
    pattern: ~this~.pipe(rxFinalize(~0~))
    imports:
      finalize: rxjs/operators as rxFinalize

- id: io.reactivex.Single.doOnError
  type: call
  template:
    pattern: ~this~.pipe(rxTap(undefined, ~0~))
    imports:
      tap: rxjs/operators as rxTap

- id: io.reactivex.Single.doOnSuccess
  type: call
  template:
    pattern: ~this~.pipe(rxTap(~0~))
    imports:
      tap: rxjs/operators as rxTap

- id: io.reactivex.Single.doOnTerminate
  type: call
  template:
    pattern: ~this~.pipe(rxTap(~0~, ~0~))
    imports:
      tap: rxjs/operators as rxTap

- id: io.reactivex.Single.toObservable
  type: call
  template: ~this~

# SingleEmitter

- id: io.reactivex.SingleEmitter
  type: type
  template: Observer<~T0~>

- id: io.reactivex.SingleEmitter.onSuccess
  type: call
  template: ~this~.next(~0~); ~this~.complete()

- id: io.reactivex.SingleEmitter.onError
  type: call
  template: ~this~.error(~0~)


# Disposable

- id: io.reactivex.disposables.Disposable
  type: type
  template:
    pattern: SubscriptionLike
    imports:
      SubscriptionLike: rxjs

- id: io.reactivex.disposables.Disposable.dispose
  type: call
  template: ~this~.unsubscribe()

- id: io.reactivex.disposables.Disposable.isDisposed
  type: call
  template: ~this~.closed

- id: io.reactivex.disposables.Disposable.disposed
  type: get
  template: ~this~.closed

# Subjects

- id: io.reactivex.subjects.Subject
  type: type
  template:
    pattern: Subject<~T0~>
    imports:
      Subject: rxjs
- id: io.reactivex.subjects.PublishSubject
  type: type
  template:
    pattern: Subject<~T0~>
    imports:
      Subject: rxjs
- id: io.reactivex.subjects.PublishSubject.create
  type: call
  template:
    pattern: new Subject()
    imports:
      Subject: rxjs