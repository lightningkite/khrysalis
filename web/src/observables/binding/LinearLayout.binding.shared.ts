// Generated by Khrysalis TypeScript converter
// File: observables/binding/LinearLayout.binding.shared.kt
// Package: com.lightningkite.khrysalis.observables.binding
import {xObservablePropertySubscribeBy} from '../ObservableProperty.ext.shared'
import {xViewRemovedGet, xDisposableUntil} from '../../rx/DisposeCondition.actual'
import {StandardObservableProperty} from '../StandardObservableProperty.shared'
import {ObservableProperty} from '../ObservableProperty.shared'
import {xLinearLayoutParams} from '../../views/LinearLayout.actual'
import {AlignPair} from '../../views/geometry/Align.shared'
import {NumberRange} from '../../Kotlin'
import {range} from "iterable-operator";
import {triggerDetatchEvent} from "../../views/viewAttached";

//! Declares com.lightningkite.khrysalis.observables.binding.LinearLayoutBoundSubview
class LinearLayoutBoundSubview<T> {
    public readonly view: HTMLElement;
    public readonly property: StandardObservableProperty<T>;

    public constructor(view: HTMLElement, property: StandardObservableProperty<T>) {
        this.view = view;
        this.property = property;
    }
}

//! Declares com.lightningkite.khrysalis.observables.binding.bind>android.widget.LinearLayout
export function xLinearLayoutBind<T>(this_: HTMLDivElement, data: ObservableProperty<Array<T>>, defaultValue: T, makeView: (a: ObservableProperty<T>) => HTMLElement): void {
    const existingViews: Array<LinearLayoutBoundSubview<T>> = [];

    xDisposableUntil(xObservablePropertySubscribeBy(data, undefined, undefined, (value) => {
        //Fix view count
        const excessViews = existingViews.length - value.length;

        if (excessViews > 0) {
            //remove views
            for (const iter of new NumberRange(1, excessViews)) {
                const old = existingViews.splice((existingViews.length - 1), 1)[0];
                this_.removeChild(old.view);
                triggerDetatchEvent(old.view);
            }
        } else if (existingViews.length < value.length) {
            //add views
            for (const iter of new NumberRange(1, (-excessViews))) {
                const prop = new StandardObservableProperty(defaultValue, undefined);

                const view = makeView(prop);

                this_.appendChild(xLinearLayoutParams(this_, undefined, undefined, undefined, undefined, undefined, undefined, AlignPair.Companion.INSTANCE.centerFill, undefined)(view));
                existingViews.push(new LinearLayoutBoundSubview(view, prop));
            }
        }

        //Update views
        for (const index of new NumberRange(0, value.length - 1)) {
            existingViews[index].property.value = value[index];
        }

    }), xViewRemovedGet(this_));
}


