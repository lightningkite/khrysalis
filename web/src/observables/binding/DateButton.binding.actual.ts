// Generated by Khrysalis TypeScript converter
// File: observables/binding/DateButton.binding.actual.kt
// Package: com.lightningkite.khrysalis.observables.binding
import {comLightningkiteKhrysalisObservablesObservablePropertySubscribeBy} from '../ObservableProperty.ext.shared'
import {dateFrom, getJavaUtilDateDateAlone, getJavaUtilDateTimeAlone} from '../../time/Date.actual'
import {getAndroidViewViewRemoved, ioReactivexDisposablesDisposableUntil} from '../../rx/DisposeCondition.actual'
import {TimeAlone} from '../../time/TimeAlone.actual'
import {MutableObservableProperty} from '../MutableObservableProperty.shared'
import {DateAlone} from '../../time/DateAlone.actual'

//! Declares com.lightningkite.khrysalis.observables.binding.bind>com.lightningkite.khrysalis.views.android.DateButton
export function comLightningkiteKhrysalisViewsAndroidDateButtonBind(this_: HTMLInputElement, date: MutableObservableProperty<Date>): void {
    ioReactivexDisposablesDisposableUntil(comLightningkiteKhrysalisObservablesObservablePropertySubscribeBy(date, undefined, undefined, (it) => {
        this_.valueAsDate = it
    }), getAndroidViewViewRemoved(this_));
    this_.onchange = (e) => {
        date.value = this_.valueAsDate;
    }
}


//! Declares com.lightningkite.khrysalis.observables.binding.bind>com.lightningkite.khrysalis.views.android.TimeButton
export function comLightningkiteKhrysalisViewsAndroidTimeButtonBind(this_: HTMLInputElement, date: MutableObservableProperty<Date>, minuteInterval: number = 1): void {
    ioReactivexDisposablesDisposableUntil(comLightningkiteKhrysalisObservablesObservablePropertySubscribeBy(date, undefined, undefined, (it) => {
        this_.valueAsDate = it
    }), getAndroidViewViewRemoved(this_));
    this_.onchange = (e) => {
        date.value = this_.valueAsDate;
    }
}


//! Declares com.lightningkite.khrysalis.observables.binding.bindDateAlone>com.lightningkite.khrysalis.views.android.DateButton
export function comLightningkiteKhrysalisViewsAndroidDateButtonBindDateAlone(this_: HTMLInputElement, date: MutableObservableProperty<DateAlone>): void {
    ioReactivexDisposablesDisposableUntil(comLightningkiteKhrysalisObservablesObservablePropertySubscribeBy(date, undefined, undefined, (it) => {
        this_.valueAsDate = dateFrom(it, getJavaUtilDateTimeAlone(Date.constructor()), undefined)
    }), getAndroidViewViewRemoved(this_));
    this_.onchange = (e) => {
        date.value = getJavaUtilDateDateAlone(this_.valueAsDate);
    }
}


//! Declares com.lightningkite.khrysalis.observables.binding.bindTimeAlone>com.lightningkite.khrysalis.views.android.TimeButton
export function comLightningkiteKhrysalisViewsAndroidTimeButtonBindTimeAlone(this_: HTMLInputElement, date: MutableObservableProperty<TimeAlone>, minuteInterval: number = 1): void {
    ioReactivexDisposablesDisposableUntil(comLightningkiteKhrysalisObservablesObservablePropertySubscribeBy(date, undefined, undefined, (it) => {
        this_.valueAsDate = dateFrom(getJavaUtilDateDateAlone(Date.constructor()), it, undefined)
    }), getAndroidViewViewRemoved(this_));
    this_.onchange = (e) => {
        date.value = getJavaUtilDateTimeAlone(this_.valueAsDate);
    }
}

