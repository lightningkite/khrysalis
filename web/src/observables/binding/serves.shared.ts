// Generated by Khrysalis TypeScript converter
// File: observables/binding/serves.shared.kt
// Package: com.lightningkite.khrysalis.observables.binding
import { ioReactivexDisposablesDisposableUntil } from '../../rx/DisposeCondition.actual'
import { getComLightningkiteKhrysalisObservablesObservablePropertyObservable } from '../ObservableProperty.ext.shared'
import { MutableObservableProperty } from '../MutableObservableProperty.shared'
import { DisposeCondition } from '../../rx/DisposeCondition.shared'

//! Declares com.lightningkite.khrysalis.observables.binding.serves>com.lightningkite.khrysalis.observables.MutableObservableProperty<kotlin.Any>
export function comLightningkiteKhrysalisObservablesMutableObservablePropertyServes<T>(this_: MutableObservableProperty<T>, until: DisposeCondition, other: MutableObservableProperty<T>): void {
    
    let suppress = false;
    
    
    ioReactivexDisposablesDisposableUntil(getComLightningkiteKhrysalisObservablesObservablePropertyObservable(other).subscribe((value) => {
                if (!suppress) {
                    suppress = true;
                    this_.value = value;
                    suppress = false;
                }
    }, undefined, undefined), until);
    
    ioReactivexDisposablesDisposableUntil(this_.onChange.subscribe((value) => {
                if (!suppress) {
                    suppress = true;
                    other.value = value;
                    suppress = false;
                }
    }, undefined, undefined), until);
}


