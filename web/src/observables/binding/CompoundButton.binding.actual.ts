// Generated by Khrysalis TypeScript converter
// File: observables/binding/CompoundButton.binding.actual.kt
// Package: com.lightningkite.khrysalis.observables.binding
import {xObservablePropertySubscribeBy} from '../ObservableProperty.ext.shared'
import {xViewRemovedGet, xDisposableUntil} from '../../rx/DisposeCondition.actual'
import {MutableObservableProperty} from '../MutableObservableProperty.shared'
import {safeEq} from "../../kotlin/Language";

let runtimeGeneratedId: number = 0;
function fixInput(i: HTMLInputElement){
    const p = i.parentElement;
    if(p instanceof HTMLLabelElement) {
        let gen = `runtime_gen_${runtimeGeneratedId++}`;
        i.id = gen;
        p.htmlFor = gen;
    }
}

//! Declares com.lightningkite.khrysalis.observables.binding.bindSelect>android.widget.CompoundButton
export function xCompoundButtonBindSelect<T>(this_: HTMLInputElement, value: T, observable: MutableObservableProperty<T>): void {
    fixInput(this_);
    xDisposableUntil(xObservablePropertySubscribeBy(observable, undefined, undefined, (it) => {
        const shouldBeChecked = safeEq(it,value);

        if (!(this_.checked === shouldBeChecked)) {
            this_.checked = shouldBeChecked;
        }
    }), xViewRemovedGet(this_));
    this_.onchange = ((ev) => {
        const isChecked = this_.checked;
        if (isChecked && !(safeEq(observable.value, value))) {
            observable.value = value;
        } else if (!isChecked && safeEq(observable.value, value)) {
            this_.checked = true;
        }
    });
}


//! Declares com.lightningkite.khrysalis.observables.binding.bindSelectNullable>android.widget.CompoundButton
export function xCompoundButtonBindSelectNullable<T>(this_: HTMLInputElement, value: T, observable: MutableObservableProperty<(T | null)>): void {
    fixInput(this_);
    xDisposableUntil(xObservablePropertySubscribeBy(observable, undefined, undefined, (it) => {
        const shouldBeChecked = safeEq(it, value);

        if (!(this_.checked === shouldBeChecked)) {
            this_.checked = shouldBeChecked;
        }
    }), xViewRemovedGet(this_));
    this_.onchange = ((ev) => {
        const isChecked = this_.checked;
        if (isChecked && !(safeEq(observable.value, value))) {
            observable.value = value;
        } else if (!isChecked && safeEq(observable.value, value)) {
            observable.value = null;
        }
    });
}


//! Declares com.lightningkite.khrysalis.observables.binding.bindSelectInvert>android.widget.CompoundButton
export function xCompoundButtonBindSelectInvert<T>(this_: HTMLInputElement, value: T, observable: MutableObservableProperty<(T | null)>): void {
    fixInput(this_);
    let suppress = false;

    xDisposableUntil(xObservablePropertySubscribeBy(observable, undefined, undefined, (it) => {
        if (!suppress) {
            suppress = true;
            const shouldBeChecked = safeEq(it, value) || safeEq(it, null);

            if (!(this_.checked === shouldBeChecked)) {
                this_.checked = shouldBeChecked;
            }
            suppress = false;
        }
    }), xViewRemovedGet(this_));
    this_.onchange = ((ev) => {
        const isChecked = this_.checked;
        if (!suppress) {
            suppress = true;
            if (!isChecked && safeEq(observable.value, value)) {
                observable.value = null;
                this_.checked = true;
            } else if (!(safeEq(observable.value, value))) {
                observable.value = value;
                this_.checked = true;
            }
            suppress = false;
        }
    });
}

//! Declares com.lightningkite.khrysalis.observables.binding.bind>android.widget.CompoundButton
export function xCompoundButtonBind(this_: HTMLInputElement, observable: MutableObservableProperty<boolean>): void {
    fixInput(this_);
    xDisposableUntil(xObservablePropertySubscribeBy(observable, undefined, undefined, (it) => {
        if (!(it === this_.checked)) {
            this_.checked = it;
        }
    }), xViewRemovedGet(this_));
    this_.onchange = ((ev) => {
        const isChecked = this_.checked;
        if (!(observable.value === isChecked)) {
            observable.value = isChecked;
        }
    });
}


