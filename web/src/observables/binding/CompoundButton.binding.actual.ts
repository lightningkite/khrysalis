// Generated by Khrysalis TypeScript converter
// File: observables/binding/CompoundButton.binding.actual.kt
// Package: com.lightningkite.khrysalis.observables.binding
import {comLightningkiteKhrysalisObservablesObservablePropertySubscribeBy} from '../ObservableProperty.ext.shared'
import {getAndroidViewViewRemoved, ioReactivexDisposablesDisposableUntil} from '../../rx/DisposeCondition.actual'
import {MutableObservableProperty} from '../MutableObservableProperty.shared'
import {safeEq} from "../../kotlin/Language";

//! Declares com.lightningkite.khrysalis.observables.binding.bindSelect>android.widget.CompoundButton
export function androidWidgetCompoundButtonBindSelect<T>(this_: HTMLInputElement, value: T, observable: MutableObservableProperty<T>): void {
    ioReactivexDisposablesDisposableUntil(comLightningkiteKhrysalisObservablesObservablePropertySubscribeBy(observable, undefined, undefined, (it) => {
        const shouldBeChecked = safeEq(it,value);

        if (!(this_.checked === shouldBeChecked)) {
            this_.checked = shouldBeChecked;
        }
    }), getAndroidViewViewRemoved(this_));
    this_.onchange = ((ev) => {
        const isChecked = this_.checked;
        if (isChecked && !(safeEq(observable.value, value))) {
            observable.value = value;
        } else if (!isChecked && safeEq(observable.value, value)) {
            this_.checked = true;
        }
    });
}


//! Declares com.lightningkite.khrysalis.observables.binding.bindSelectNullable>android.widget.CompoundButton
export function androidWidgetCompoundButtonBindSelectNullable<T>(this_: HTMLInputElement, value: T, observable: MutableObservableProperty<(T | null)>): void {
    ioReactivexDisposablesDisposableUntil(comLightningkiteKhrysalisObservablesObservablePropertySubscribeBy(observable, undefined, undefined, (it) => {
        const shouldBeChecked = safeEq(it, value);

        if (!(this_.checked === shouldBeChecked)) {
            this_.checked = shouldBeChecked;
        }
    }), getAndroidViewViewRemoved(this_));
    this_.onchange = ((ev) => {
        const isChecked = this_.checked;
        if (isChecked && !(safeEq(observable.value, value))) {
            observable.value = value;
        } else if (!isChecked && safeEq(observable.value, value)) {
            observable.value = null;
        }
    });
}


//! Declares com.lightningkite.khrysalis.observables.binding.bindSelectInvert>android.widget.CompoundButton
export function androidWidgetCompoundButtonBindSelectInvert<T>(this_: HTMLInputElement, value: T, observable: MutableObservableProperty<(T | null)>): void {
    let suppress = false;

    ioReactivexDisposablesDisposableUntil(comLightningkiteKhrysalisObservablesObservablePropertySubscribeBy(observable, undefined, undefined, (it) => {
        if (!suppress) {
            suppress = true;
            const shouldBeChecked = safeEq(it, value) || safeEq(it, null);

            if (!(this_.checked === shouldBeChecked)) {
                this_.checked = shouldBeChecked;
            }
            suppress = false;
        }
    }), getAndroidViewViewRemoved(this_));
    this_.onchange = ((ev) => {
        const isChecked = this_.checked;
        if (!suppress) {
            suppress = true;
            if (!isChecked && safeEq(observable.value, value)) {
                observable.value = null;
                this_.checked = true;
            } else if (!(safeEq(observable.value, value))) {
                observable.value = value;
                this_.checked = true;
            }
            suppress = false;
        }
    });
}

//! Declares com.lightningkite.khrysalis.observables.binding.bind>android.widget.CompoundButton
export function androidWidgetCompoundButtonBind(this_: HTMLInputElement, observable: MutableObservableProperty<boolean>): void {
    ioReactivexDisposablesDisposableUntil(comLightningkiteKhrysalisObservablesObservablePropertySubscribeBy(observable, undefined, undefined, (it) => {
        if (!(it === this_.checked)) {
            this_.checked = it;
        }
    }), getAndroidViewViewRemoved(this_));
    this_.onchange = ((ev) => {
        const isChecked = this_.checked;
        if (!(observable.value === isChecked)) {
            observable.value = isChecked;
        }
    });
}


