// Generated by Khrysalis TypeScript converter
// File: observables/binding/ViewPager.binding.actual.kt
// Package: com.lightningkite.khrysalis.observables.binding
import { comLightningkiteKhrysalisObservablesObservablePropertySubscribeBy } from '../ObservableProperty.ext.shared'
import { getAndroidViewViewRemoved, ioReactivexDisposablesDisposableUntil } from '../../rx/DisposeCondition.actual'
import { StandardObservableProperty } from '../StandardObservableProperty.shared'
import { ObservableProperty } from '../ObservableProperty.shared'
import { comLightningkiteKhrysalisObservablesObservablePropertyMap } from '../TransformedObservableProperty.shared'
import { MutableObservableProperty } from '../MutableObservableProperty.shared'
import {findView} from "../../views/View.ext.actual";
import {swapViewSwap} from "../../views/SwapView";
import {comLightningkiteKhrysalisObservablesObservablePropertyCombine} from "../CombineObservableProperty.shared";

/*
We need:
- A main view that swaps
- A left button
- A right button
Such should be generated by the XML.
 */

//! Declares com.lightningkite.khrysalis.observables.binding.bind>androidx.viewpager.widget.ViewPager
export function androidxViewpagerWidgetViewPagerBindStatic<T>(this_: HTMLDivElement, items: Array<T>, showIndex: MutableObservableProperty<number> = new StandardObservableProperty(0, undefined), makeView: (a: T) => HTMLElement): void {
    const content = findView(this_, (e)=> e.classList.contains("khrysalis-pager-content")) as HTMLDivElement;
    const left = findView(this_, (e)=> e.classList.contains("khrysalis-pager-left")) as HTMLButtonElement;
    const right = findView(this_, (e)=> e.classList.contains("khrysalis-pager-right")) as HTMLButtonElement;
    if(!content || !left || !right) return;
    let pastIndex = showIndex.value;
    ioReactivexDisposablesDisposableUntil(comLightningkiteKhrysalisObservablesObservablePropertySubscribeBy(showIndex, undefined, undefined, (it)=>{
        if(it < 0 || it >= items.length) return;
        const newView = makeView(items[it]);
        let animation = "khrysalis-animate-fade";
        if(it > pastIndex) {
            animation = "khrysalis-animate-push"
        } else if (it < pastIndex){
            animation = "khrysalis-animate-pop"
        }
        swapViewSwap(content, newView, animation);
    }), getAndroidViewViewRemoved(this_));
    left.onclick = (ev) => {
        ev.preventDefault()
        if(showIndex.value > 0){
            showIndex.value--;
        }
    }
    right.onclick = (ev) => {
        ev.preventDefault()
        if(showIndex.value < items.length - 1) {
            showIndex.value++;
        }
    }
}

//! Declares com.lightningkite.khrysalis.observables.binding.bind>androidx.viewpager.widget.ViewPager
export function androidxViewpagerWidgetViewPagerBind<T>(this_: HTMLDivElement, items: ObservableProperty<Array<T>>, _default: T, showIndex: MutableObservableProperty<number> = new StandardObservableProperty(0, undefined), makeView: (a: ObservableProperty<T>) => HTMLElement): void {
    const content = findView(this_, (e)=> e.classList.contains("khrysalis-pager-content")) as HTMLDivElement;
    const left = findView(this_, (e)=> e.classList.contains("khrysalis-pager-left")) as HTMLButtonElement;
    const right = findView(this_, (e)=> e.classList.contains("khrysalis-pager-right")) as HTMLButtonElement;
    if(!content || !left || !right) return;
    let pastIndex = showIndex.value;
    const combined = comLightningkiteKhrysalisObservablesObservablePropertyCombine(
        items,
        showIndex,
        (a, b) => [a, b]
    );
    ioReactivexDisposablesDisposableUntil(comLightningkiteKhrysalisObservablesObservablePropertySubscribeBy(combined, undefined, undefined, (pair)=>{
        const items = pair[0];
        const it = pair[1];
        if(it < 0 || it >= items.length) return;
        const newView = makeView(items[it]);
        let animation = "khrysalis-animate-fade";
        if(it > pastIndex) {
            animation = "khrysalis-animate-push"
        } else if (it < pastIndex){
            animation = "khrysalis-animate-pop"
        }
        swapViewSwap(content, newView, animation);
    }), getAndroidViewViewRemoved(this_));
    left.onclick = (ev) => {
        ev.preventDefault()
        if(showIndex.value > 0){
            showIndex.value--;
        }
    };
    right.onclick = (ev) => {
        ev.preventDefault()
        if(showIndex.value < items.value.length - 1) {
            showIndex.value++;
        }
    };
}

