// Generated by Khrysalis TypeScript converter

import {ObservableProperty} from "../ObservableProperty.shared";
import {Video, VideoReference, VideoRemoteUrl} from "../../Video.shared";
import {xDisposableUntil, xViewRemovedGet} from "../../rx/DisposeCondition.actual";
import {xObservablePropertySubscribeBy} from "../ObservableProperty.ext.shared";
import {IllegalArgumentException} from "../../kotlin/Language";

//! Declares com.lightningkite.khrysalis.observables.binding.bind>com.lightningkite.khrysalis.views.VideoPlayer
export function xVideoPlayerBind(this_: HTMLVideoElement, video: ObservableProperty<Video | null>) {
    xDisposableUntil(xObservablePropertySubscribeBy(video, undefined, undefined, (x)=>{
        xVideoPlayerLoadVideo(this_, x);
    }), xViewRemovedGet(this_));
}
//! Declares com.lightningkite.khrysalis.observables.binding.bind>com.google.android.exoplayer2.ui.PlayerView
export let xPlayerViewBind = xVideoPlayerBind

function xVideoPlayerLoadVideo(this_: HTMLVideoElement, video: Video | null){
    if(video === null) {
        this_.src = "";
        return;
    } else if(video instanceof VideoReference) {
        const url = URL.createObjectURL(video.uri);
        this_.src = url;
    } else if(video instanceof VideoRemoteUrl) {
        this_.src = video.url;
    } else{
        throw new IllegalArgumentException(`Unrecognized type ${video}`, null);
    }
}