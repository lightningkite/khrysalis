// Generated by Khrysalis TypeScript converter - this file will be overwritten.
// File: observables/TransformedMutableObservableProperty.shared.kt
// Package: com.lightningkite.khrysalis.observables
import { Observable } from 'rxjs'
import { map as rxMap } from 'rxjs/operators'
import { MutableObservableProperty } from './MutableObservableProperty.shared'

//! Declares com.lightningkite.khrysalis.observables.TransformedMutableObservableProperty
export class TransformedMutableObservableProperty<A, B> extends MutableObservableProperty<B> {
    public readonly basedOn: MutableObservableProperty<A>;
    public readonly read:  ((a: A) => B);
    public readonly write:  ((a: B) => A);
    public constructor(basedOn: MutableObservableProperty<A>, read:  ((a: A) => B), write:  ((a: B) => A)) {
        super();
        this.basedOn = basedOn;
        this.read = read;
        this.write = write;
    }
    
    public update(): void {
        this.basedOn.update();
    }
    
    //! Declares com.lightningkite.khrysalis.observables.TransformedMutableObservableProperty.value
    public get value(): B {
        return this.read(this.basedOn.value);
    }
    public set value(value: B) {
        this.basedOn.value = this.write(value);
    }
    
    //! Declares com.lightningkite.khrysalis.observables.TransformedMutableObservableProperty.onChange
    public get onChange(): Observable<B> {
        const readCopy = this.read;
        
        return this.basedOn.onChange.pipe(rxMap((it: A): B => readCopy(it)));
    }
    
}


//! Declares com.lightningkite.khrysalis.observables.transformed>com.lightningkite.khrysalis.observables.MutableObservableProperty<kotlin.Any>
export function xMutableObservablePropertyTransformed<T, B>(this_: MutableObservableProperty<T>, read:  ((a: T) => B), write:  ((a: B) => T)): MutableObservableProperty<B> {
    return new TransformedMutableObservableProperty<T, B>(this_, read, write);
}

//! Declares com.lightningkite.khrysalis.observables.map>com.lightningkite.khrysalis.observables.MutableObservableProperty<kotlin.Any>
export function xMutableObservablePropertyMap<T, B>(this_: MutableObservableProperty<T>, read:  ((a: T) => B), write:  ((a: B) => T)): MutableObservableProperty<B> {
    return new TransformedMutableObservableProperty<T, B>(this_, read, write);
}

