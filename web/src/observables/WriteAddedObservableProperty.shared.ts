// Generated by Khrysalis TypeScript converter - this file will be overwritten.
// File: observables/WriteAddedObservableProperty.shared.kt
// Package: com.lightningkite.khrysalis.observables
import { ObservableProperty } from './ObservableProperty.shared'
import { Observable } from 'rxjs'
import { MutableObservableProperty } from './MutableObservableProperty.shared'

//! Declares com.lightningkite.khrysalis.observables.WriteAddedObservableProperty
export class WriteAddedObservableProperty<A> extends MutableObservableProperty<A> {
    public readonly basedOn: ObservableProperty<A>;
    public readonly onWrite:  ((a: A) => void);
    public constructor(basedOn: ObservableProperty<A>, onWrite:  ((a: A) => void)) {
        super();
        this.basedOn = basedOn;
        this.onWrite = onWrite;
    }
    
    //! Declares com.lightningkite.khrysalis.observables.WriteAddedObservableProperty.value
    public get value(): A { return this.basedOn.value; }
    public set value(value: A) {
        this.onWrite(value);
    }
    
    //! Declares com.lightningkite.khrysalis.observables.WriteAddedObservableProperty.onChange
    public get onChange(): Observable<A> { return this.basedOn.onChange; }
    
    public update(): void {
        //Do nothing
    }
}

//! Declares com.lightningkite.khrysalis.observables.withWrite>com.lightningkite.khrysalis.observables.ObservableProperty<kotlin.Any>
export function comLightningkiteKhrysalisObservablesObservablePropertyWithWrite<T>(this_: ObservableProperty<T>, onWrite:  ((a: T) => void)): MutableObservableProperty<T> {
    return new WriteAddedObservableProperty<T>(this_, onWrite);
}

