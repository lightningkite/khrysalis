// Generated by Khrysalis TypeScript converter - this file will be overwritten.
// File: observables/SharingObservableProperty.shared.kt
// Package: com.lightningkite.khrysalis.observables
import { doOnDispose as rxDoOnDispose, doOnSubscribe as rxDoOnSubscribe } from '../rx/RxActual.actual'
import { ObservableProperty } from './ObservableProperty.shared'
import { share as rxShare, tap as rxTap } from 'rxjs/operators'
import { Observable, SubscriptionLike } from 'rxjs'

//! Declares com.lightningkite.khrysalis.observables.SharingObservableProperty
export class SharingObservableProperty<T> extends ObservableProperty<T> {
    public readonly basedOn: ObservableProperty<T>;
    public readonly startAsListening: boolean;
    public constructor(basedOn: ObservableProperty<T>, startAsListening: boolean = false) {
        super();
        this.basedOn = basedOn;
        this.startAsListening = startAsListening;
        this.cachedValue = this.basedOn.value;
        this.isListening = this.startAsListening;
        this.onChange = this.basedOn.onChange.pipe(rxTap( (it: T): void => {
                    if(this !== null) {
                        this.cachedValue = it
                    };
        })).pipe(rxDoOnSubscribe( (it: SubscriptionLike): void => {
                    if(this !== null) {
                        this.isListening = true
                    };
        })).pipe(rxDoOnDispose( (): void => {
                    if(this !== null) {
                        this.isListening = false
                    };
        })).pipe(rxShare());
    }
    
    public cachedValue: T;
    
    public isListening: boolean;
    
    //! Declares com.lightningkite.khrysalis.observables.SharingObservableProperty.value
    public get value(): T { return this.isListening ? this.cachedValue : this.basedOn.value; }
    
    
    public readonly onChange: Observable<T>;
    
}

//! Declares com.lightningkite.khrysalis.observables.share>com.lightningkite.khrysalis.observables.ObservableProperty<kotlin.Any>
export function comLightningkiteKhrysalisObservablesObservablePropertyShare<T>(this_: ObservableProperty<T>, startAsListening: boolean = false): SharingObservableProperty<T> {
    return new SharingObservableProperty<T>(this_, startAsListening);
}
