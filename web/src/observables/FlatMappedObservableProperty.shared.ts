// Generated by Khrysalis TypeScript converter - this file will be overwritten.
// File: observables/FlatMappedObservableProperty.shared.kt
// Package: com.lightningkite.khrysalis.observables
import { skip as rxSkip, switchMap as rxSwitchMap } from 'rxjs/operators'
import { ObservableProperty } from './ObservableProperty.shared'
import { Observable, ObservableInput } from 'rxjs'
import { getComLightningkiteKhrysalisObservablesObservablePropertyObservable } from './ObservableProperty.ext.shared'
import { MutableObservableProperty } from './MutableObservableProperty.shared'

//! Declares com.lightningkite.khrysalis.observables.FlatMappedObservableProperty
export class FlatMappedObservableProperty<A, B> extends ObservableProperty<B> {
    public readonly basedOn: ObservableProperty<A>;
    public readonly transformation:  ((a: A) => ObservableProperty<B>);
    public constructor(basedOn: ObservableProperty<A>, transformation:  ((a: A) => ObservableProperty<B>)) {
        super();
        this.basedOn = basedOn;
        this.transformation = transformation;
    }
    
    //! Declares com.lightningkite.khrysalis.observables.FlatMappedObservableProperty.value
    public get value(): B { return this.transformation(this.basedOn.value).value; }
    
    //! Declares com.lightningkite.khrysalis.observables.FlatMappedObservableProperty.onChange
    public get onChange(): Observable<B> {
        const transformCopy = this.transformation;
        
        return getComLightningkiteKhrysalisObservablesObservablePropertyObservable(this.basedOn).pipe(rxSwitchMap((it: A): ObservableInput<B> => getComLightningkiteKhrysalisObservablesObservablePropertyObservable(transformCopy(it)))).pipe(rxSkip(0));
    }
    
}

//! Declares com.lightningkite.khrysalis.observables.switchMap>com.lightningkite.khrysalis.observables.ObservableProperty<kotlin.Any>
export function comLightningkiteKhrysalisObservablesObservablePropertySwitchMap<T, B>(this_: ObservableProperty<T>, transformation:  ((a: T) => ObservableProperty<B>)): FlatMappedObservableProperty<T, B> {
    return new FlatMappedObservableProperty<T, B>(this_, transformation);
}

//! Declares com.lightningkite.khrysalis.observables.flatMap>com.lightningkite.khrysalis.observables.ObservableProperty<kotlin.Any>
export function comLightningkiteKhrysalisObservablesObservablePropertyFlatMap<T, B>(this_: ObservableProperty<T>, transformation:  ((a: T) => ObservableProperty<B>)): FlatMappedObservableProperty<T, B> {
    return new FlatMappedObservableProperty<T, B>(this_, transformation);
}

//! Declares com.lightningkite.khrysalis.observables.MutableFlatMappedObservableProperty
export class MutableFlatMappedObservableProperty<A, B> extends MutableObservableProperty<B> {
    public readonly basedOn: ObservableProperty<A>;
    public readonly transformation:  ((a: A) => MutableObservableProperty<B>);
    public constructor(basedOn: ObservableProperty<A>, transformation:  ((a: A) => MutableObservableProperty<B>)) {
        super();
        this.basedOn = basedOn;
        this.transformation = transformation;
        this.lastProperty = null;
    }
    
    //! Declares com.lightningkite.khrysalis.observables.MutableFlatMappedObservableProperty.value
    public get value(): B { return this.transformation(this.basedOn.value).value; }
    public set value(value: B) {
        this.transformation(this.basedOn.value).value = value;
    }
    
    
    public lastProperty: (MutableObservableProperty<B> | null);
    
    
    //! Declares com.lightningkite.khrysalis.observables.MutableFlatMappedObservableProperty.onChange
    public get onChange(): Observable<B> {
        const transformCopy = this.transformation;
        
        return getComLightningkiteKhrysalisObservablesObservablePropertyObservable(this.basedOn).pipe(rxSwitchMap( (it: A): ObservableInput<B> => {
                    const prop = transformCopy(it);
                    
                    if(this !== null) {
                        this.lastProperty = prop
                    };
                    return getComLightningkiteKhrysalisObservablesObservablePropertyObservable(prop);
        })).pipe(rxSkip(0));
    }
    
    
    public update(): void {
        this.lastProperty?.update();
    }
}

//! Declares com.lightningkite.khrysalis.observables.switchMapMutable>com.lightningkite.khrysalis.observables.ObservableProperty<kotlin.Any>
export function comLightningkiteKhrysalisObservablesObservablePropertySwitchMapMutable<T, B>(this_: ObservableProperty<T>, transformation:  ((a: T) => MutableObservableProperty<B>)): MutableFlatMappedObservableProperty<T, B> {
    return new MutableFlatMappedObservableProperty<T, B>(this_, transformation);
}

//! Declares com.lightningkite.khrysalis.observables.flatMapMutable>com.lightningkite.khrysalis.observables.ObservableProperty<kotlin.Any>
export function comLightningkiteKhrysalisObservablesObservablePropertyFlatMapMutable<T, B>(this_: ObservableProperty<T>, transformation:  ((a: T) => MutableObservableProperty<B>)): MutableFlatMappedObservableProperty<T, B> {
    return new MutableFlatMappedObservableProperty<T, B>(this_, transformation);
}

