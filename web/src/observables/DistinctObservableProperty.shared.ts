// Generated by Khrysalis TypeScript converter - this file will be overwritten.
// File: observables/DistinctObservableProperty.shared.kt
// Package: com.lightningkite.khrysalis.observables
import { distinctUntilChanged as rxDistinctUntilChanged, skip as rxSkip } from 'rxjs/operators'
import { ObservableProperty } from './ObservableProperty.shared'
import { Observable, concat as rxConcat, of as rxOf } from 'rxjs'

//! Declares com.lightningkite.khrysalis.observables.RxTransformationOnlyObservableProperty
export class RxTransformationOnlyObservableProperty<T> extends ObservableProperty<T> {
    public readonly basedOn: ObservableProperty<T>;
    public readonly operator:  ((a: Observable<T>) => Observable<T>);
    public constructor(basedOn: ObservableProperty<T>, operator:  ((a: Observable<T>) => Observable<T>)) {
        super();
        this.basedOn = basedOn;
        this.operator = operator;
    }
    
    //! Declares com.lightningkite.khrysalis.observables.RxTransformationOnlyObservableProperty.value
    public get value(): T { return this.basedOn.value; }
    
    
    //! Declares com.lightningkite.khrysalis.observables.RxTransformationOnlyObservableProperty.onChange
    public get onChange(): Observable<T> { return this.operator(this.basedOn.onChange); }
    
}

//! Declares com.lightningkite.khrysalis.observables.distinctUntilChanged>com.lightningkite.khrysalis.observables.ObservableProperty<kotlin.Any>
export function comLightningkiteKhrysalisObservablesObservablePropertyDistinctUntilChanged<T>(this_: ObservableProperty<T>): ObservableProperty<T> { 
    return comLightningkiteKhrysalisObservablesObservablePropertyPlusRx<T>(this_, (it: Observable<T>): Observable<T> => rxConcat(rxOf(this_.value), it).pipe(rxDistinctUntilChanged()).pipe(rxSkip(0))); 
}

//! Declares com.lightningkite.khrysalis.observables.plusRx>com.lightningkite.khrysalis.observables.ObservableProperty<kotlin.Any>
export function comLightningkiteKhrysalisObservablesObservablePropertyPlusRx<T>(this_: ObservableProperty<T>, operator:  ((a: Observable<T>) => Observable<T>)): ObservableProperty<T> {
    return new RxTransformationOnlyObservableProperty<T>(this_, operator);
}
