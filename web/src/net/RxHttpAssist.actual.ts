// Generated by Khrysalis TypeScript converter
// File: net/RxHttpAssist.actual.kt
// Package: com.lightningkite.khrysalis.net
import {HttpReadResponseException, HttpResponseException} from './HttpResponseError.actual'
import {from, Observable, throwError} from 'rxjs'
import {catchError, map as rxMap, switchMap} from 'rxjs/operators'
import {parse} from "./jsonParsing";

//! Declares com.lightningkite.khrysalis.net.unsuccessfulAsError
export function ioReactivexSingleUnsuccessfulAsError(this_: Observable<Response>): Observable<Response> {
    return this_.pipe(rxMap((it) => {
        if (it.ok) {
            return it;
        } else {
            throw new HttpResponseException(it, undefined);
        }
    }));
}


//! Declares com.lightningkite.khrysalis.net.readJson
export function ioReactivexSingleReadJson<T>(this_: Observable<Response>, T: Array<any>): Observable<T> {
    return this_.pipe(
        switchMap((it) => {
            if (it.ok) {
                return okhttp3ResponseReadJson<T>(it, T);
            } else {
                throw new HttpResponseException(it, undefined);
            }
        })
    );
}

//! Declares com.lightningkite.khrysalis.net.readJsonDebug
export function ioReactivexSingleReadJsonDebug<T>(this_: Observable<Response>, T: Array<any>): Observable<T> {
    return this_.pipe(
        switchMap((it) => {
            if (it.ok) {
                return okhttp3ResponseReadJsonDebug<T>(it, T);
            } else {
                throw new HttpResponseException(it, undefined);
            }
        })
    );
}

//! Declares com.lightningkite.khrysalis.net.readText
export function ioReactivexSingleReadText(this_: Observable<Response>): Observable<String> {
    return this_.pipe(
        switchMap((it) => {
            if (it.ok) {
                return okhttp3ResponseReadText(it);
            } else {
                throw new HttpResponseException(it, undefined);
            }
        })
    );
}

//! Declares com.lightningkite.khrysalis.net.readData
export function ioReactivexSingleReadData(this_: Observable<Response>): Observable<Int8Array> {
    return this_.pipe(
        switchMap((it) => {
            if (it.ok) {
                return okhttp3ResponseReadData(it);
            } else {
                throw new HttpResponseException(it, undefined);
            }
        })
    );
}

//! Declares com.lightningkite.khrysalis.net.readJson
export function okhttp3ResponseReadJson<T>(this_: Response, T: Array<any>): Observable<T> {
    return from(this_.json()).pipe(rxMap((it) => {
        return parse(it, T)
    }));
}

//! Declares com.lightningkite.khrysalis.net.readJsonDebug
export function okhttp3ResponseReadJsonDebug<T>(this_: Response, T: Array<any>): Observable<T> {
    return from(this_.json()).pipe(rxMap((it) => {
        return parse(it, T)
    }));
}

//! Declares com.lightningkite.khrysalis.net.readText
export function okhttp3ResponseReadText(this_: Response): Observable<String> {
    return from(this_.text());
}

//! Declares com.lightningkite.khrysalis.net.readData
export function okhttp3ResponseReadData(this_: Response): Observable<Int8Array> {
    return from(this_.arrayBuffer()).pipe(
        rxMap((it) => new Int8Array(it))
    );
}


//! Declares com.lightningkite.khrysalis.net.readHttpException
export function ioReactivexSingleReadHttpException<Element>(this_: Observable<Element>): Observable<Element> {
    return this_.pipe(catchError((err) => {
        if (err instanceof HttpResponseException) {
            return from(err.response.text())
                .pipe(rxMap((text) => {
                    throw new HttpReadResponseException(err.response, text, err.cause);
                }))
        } else {
            return throwError(err)
        }
    }));
}

