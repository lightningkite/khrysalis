---

# Observables

- id: io.reactivex.Observable
  type: type
  template:
    pattern: Observable<~T0~>
    imports:
      Observable: rxjs
- id: io.reactivex.Observable
  type: typeRef
  template:
    pattern: Observable
    imports:
      Observable: rxjs
- id: io.reactivex.Observable.subscribe
  type: call
  arguments: [io.reactivex.Observer]
  template: ~this~.subscribe(~0~)
- id: io.reactivex.Observable.subscribe
  type: call
  template: ~this~.subscribe(~0~, ~1~, ~2~)
- id: io.reactivex.rxkotlin.subscribeBy
  type: call
  receiver: io.reactivex.Observable
  template: ~this~.subscribe(~onNext~, ~onError~, ~onComplete~)

# Operators
- id: io.reactivex.Observable.map
  type: call
  template:
    pattern: rxMap(~0~)(~this~)
    imports:
      map: rxjs/operators as rxMap
- id: io.reactivex.Observable.filter
  type: call
  template:
    pattern: rxFilter(~0~)(~this~)
    imports:
      filter: rxjs/operators as rxFilter
- id: io.reactivex.Observable.flatMap
  type: call
  template:
    pattern: rxFlatMap(~0~)(~this~)
    imports:
      flatMap: rxjs/operators as rxFlatMap
- id: io.reactivex.Observable.switchMap
  type: call
  template:
    pattern: rxSwitchMap(~0~)(~this~)
    imports:
      switchMap: rxjs/operators as rxSwitchMap
- id: io.reactivex.Observable.subscribeOn
  type: call
  template: ~this~
- id: io.reactivex.Observable.scheduleOn
  type: call
  template: ~this~
- id: io.reactivex.Observable.create
  type: call
  template:
    pattern: new Observable(~0~)
    imports:
      Observable: rxjs
- id: io.reactivex.Observable.create
  type: call
  hasExplicitTypeArguments: true
  template:
    pattern: new Observable<~T0~>(~0~)
    imports:
      Observable: rxjs
- id: io.reactivex.Observable.just
  type: call
  template:
    pattern: rxOf(~*~)
    imports:
      of: rxjs as rxOf
- id: io.reactivex.Observable.empty
  type: call
  template:
    pattern: rxOf()
    imports:
      of: rxjs as rxoF
- id: io.reactivex.Observable.doFinally
  type: call
  template:
    pattern: rxFinalize(~0~)(~this~)
    imports:
      finalize: rxjs/operators as rxFinalize
- id: io.reactivex.Observable.doOnNext
  type: call
  template:
    pattern: rxTap(~0~)(~this~)
    imports:
      tap: rxjs/operators as rxTap
- id: io.reactivex.Observable.doOnError
  type: call
  template:
    pattern: rxTap(undefined, ~0~)(ud~this~)
    imports:
      tap: rxjs/operators as rxTap
- id: io.reactivex.Observable.doOnComplete
  type: call
  template:
    pattern: rxTap(undefined, undefined, ~0~)(ud~this~)
    imports:
      tap: rxjs/operators as rxTap

# ObservableEmitter
- id: io.reactivex.ObservableEmitter
  type: type
  template: Observer<~T0~>
- id: io.reactivex.ObservableEmitter.onNext
  type: call
  template: ~this~.next(~0~)
- id: io.reactivex.ObservableEmitter.onError
  type: call
  template: ~this~.error(~0~)
- id: io.reactivex.ObservableEmitter.onComplete
  type: call
  template: ~this~.complete()


# Single

- id: io.reactivex.Single
  type: type
  template:
    pattern: Observable<~T0~>
    imports:
      Observable: rxjs
- id: io.reactivex.Single
  type: typeRef
  template:
    pattern: Observable
    imports:
      Observable: rxjs
- id: io.reactivex.Single.subscribe
  type: call
  arguments: [io.reactivex.Observer]
  template: ~this~.subscribe(~0~)
- id: io.reactivex.Single.subscribe
  type: call
  template: ~this~.subscribe(~0~, ~1~)
- id: io.reactivex.rxkotlin.subscribeBy
  type: call
  receiver: io.reactivex.Single
  template: ~this~.subscribe(~onNext~, ~onError~)

# Operators for Single
- id: io.reactivex.Single.map
  type: call
  template:
    pattern: rxMap(~0~)(~this~)
    imports:
      map: rxjs/operators as rxMap
- id: io.reactivex.Single.flatMap
  type: call
  template:
    pattern: rxFlatMap(~0~)(~this~)
    imports:
      flatMap: rxjs/operators as rxFlatMap
- id: io.reactivex.Single.subscribeOn
  type: call
  template: ~this~
- id: io.reactivex.Single.scheduleOn
  type: call
  template: ~this~
- id: io.reactivex.Single.create
  type: call
  template:
    pattern: new Observable(~0~)
    imports:
      Observable: rxjs
- id: io.reactivex.Single.create
  type: call
  hasExplicitTypeArguments: true
  template:
    pattern: new Observable<~T0~>(~0~)
    imports:
      Observable: rxjs
- id: io.reactivex.Single.just
  type: call
  template:
    pattern: rxOf(~0~)
    imports:
      of: rxjs as rxOf
- id: io.reactivex.Single.doOnSubscribe
  type: call
  template:
    pattern: doOnSubscribe(~this~, ~0~)
    imports:
      doOnSubscribe: khrysalis/dist/Kotlin
- id: io.reactivex.Single.doFinally
  type: call
  template:
    pattern: rxFinalize(~0~)(~this~)
    imports:
      finalize: rxjs/operators as rxFinalize
- id: io.reactivex.Single.doOnError
  type: call
  template:
    pattern: rxTap(undefined, ~0~)(ud~this~)
    imports:
      tap: rxjs/operators as rxTap
- id: io.reactivex.Single.doOnSuccess
  type: call
  template:
    pattern: rxTap(~0~)(~this~)
    imports:
      tap: rxjs/operators as rxTap

# SingleEmitter
- id: io.reactivex.SingleEmitter
  type: type
  template: Observer<~T0~>
- id: io.reactivex.SingleEmitter.onSuccess
  type: call
  template: ~this~.next(~0~); ~this~.complete()
- id: io.reactivex.SingleEmitter.onError
  type: call
  template: ~this~.error(~0~)


# Disposable
- id: io.reactivex.disposables.Disposable
  type: type
  template:
    pattern: SubscriptionLike
    imports:
      SubscriptionLike: rxjs
- id: io.reactivex.disposables.Disposable.dispose
  type: call
  template: ~this~.unsubscribe()
- id: io.reactivex.disposables.Disposable.isDisposed
  type: call
  template: ~this~.closed
- id: io.reactivex.disposables.Disposable.disposed
  type: get
  template: ~this~.closed
