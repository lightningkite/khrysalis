---

# Observables

- id: io.reactivex.Observable
  type: type
  template:
    pattern: Observable<~T0~>
    imports:
      Observable: rxjs
- id: io.reactivex.Observable.subscribe
  type: call
  arguments: [io.reactivex.Observer]
  template: ~this~.subscribe(~0~)
- id: io.reactivex.Observable.subscribe
  type: call
  template: ~this~.subscribe(~0~, ~1~, ~2~)
- id: io.reactivex.rxkotlin.subscribeBy
  type: call
  receiver: io.reactivex.Observable
  template: ~this~.subscribe(~onNext~, ~onError~, ~onComplete~)

# Operators
- id: io.reactivex.Observable.map
  type: call
  template:
    pattern: map(~0~)(~this~)
    imports:
      map: rxjs/operators
- id: io.reactivex.Observable.filter
  type: call
  template:
    pattern: filter(~0~)(~this~)
    imports:
      filter: rxjs/operators
- id: io.reactivex.Observable.flatMap
  type: call
  template:
    pattern: flatMap(~0~)(~this~)
    imports:
      flatMap: rxjs/operators
- id: io.reactivex.Observable.switchMap
  type: call
  template:
    pattern: switchMap(~0~)(~this~)
    imports:
      switchMap: rxjs/operators
- id: io.reactivex.Observable.subscribeOn
  type: call
  template: ~this~
- id: io.reactivex.Observable.scheduleOn
  type: call
  template: ~this~
- id: io.reactivex.Observable.create
  type: call
  pattern: # TODO
  imports:
    of: rxjs
- id: io.reactivex.Observable.just
  type: call
  pattern: of(~*~)
  imports:
    of: rxjs
- id: io.reactivex.Observable.empty
  type: call
  pattern: of()
  imports:
    of: rxjs

# Single

- id: io.reactivex.Single
  type: type
  template:
    pattern: Promise<~T0~>
    imports:
      Observable: rxjs

- id: io.reactivex.rxkotlin.subscribeBy
  type: call
  receiver: io.reactivex.Single
  template: ~this~.subscribe(~onNext~, ~onError~, ~onComplete~)