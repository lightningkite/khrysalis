// Generated by Khrysalis TypeScript converter
// File: /home/josephivie/IdeaProjects/khrysalis/kotlin-compiler-plugin-typescript/testData/testClasses.shared.kt
// Package: com.test.classes
import { hashString } from 'khrysalis/dist/Kotlin'
import { TestInterface, TestInterfaceDefaults, Weird } from './testClasses.shared'

//! Declares com.test.classes.TestInterface
export interface TestInterface {
    
    readonly interfaceValue: string;
    
    interfaceFunction(): string
}
export class TestInterfaceDefaults {
    public static getInterfaceValue(this_InterfaceValue: TestInterface){ return "Default"; }
    public static interfaceFunction(this_InterfaceFunction: TestInterface){ return "Default"; }
}

//! Declares com.test.classes.DataClassThing
export class DataClassThing implements TestInterface {
    public static implementsInterfaceComTestClassesTestInterface = true;
    public readonly x: number;
    public readonly y: string;
    public constructor( x: number = 0.0,  y: string = "Hello!") {
        this.x = x;
        this.y = y;
    }
    public hashCode(): number {
        let hash = 17;
        hash = 31 * hash + Math.floor(this.x);
        hash = 31 * hash + hashString(this.y);
        return hash;
    }
    public equals(other: any): boolean { return other instanceof DataClassThing && this.x === other.x && this.y === other.y }
    public toString(): string { return `DataClassThing(x = ${this.x}, y = ${this.y})` }
    public copy(x: number = this.x, y: string = this.y) { return new DataClassThing(x, y); }
    
    public interfaceFunction(): string{ return `${this.x} ${this.y}`; }
    public get interfaceValue(): string { return TestInterfaceDefaults.getInterfaceValue(this); }
}

//! Declares com.test.classes.Weird
export class Weird implements TestInterface {
    public static implementsInterfaceComTestClassesTestInterface = true;
    public readonly c: number;
    public d: number;
    public constructor(a: number = 0, b: string,  c: number,  d: number) {
        this.c = c;
        this.d = d;
        this.e = 0;
        this.f = "asdf";
    }
    
    public readonly e: number = 0;
    
    public f: string;
    
    
    
    public static constructorkotlinInt(both: number) {
        let result = new Weird(both, both.toString(), both, both);
        
        result.f = "Something else"
        
        return result;
    }
    
    //! Declares com.test.classes.Weird.interfaceValue
    public get interfaceValue(): string { return this.f; }
    
    public interfaceFunction(): string { return TestInterfaceDefaults.interfaceFunction(this); }
}

//! Declares com.test.classes.main
export function main(){
    const outsideInfo: string = "Pulled in";
    
    const instance = new class Anon implements TestInterface {
        public static implementsInterfaceComTestClassesTestInterface = true;
        public constructor() {
        }
        
        //! Declares null
        public get interfaceValue(): string { return outsideInfo; }
        
        public interfaceFunction(): string { return TestInterfaceDefaults.interfaceFunction(this); }
    }();
    
    const ugh = Weird.constructorkotlinInt(2);
    
}
