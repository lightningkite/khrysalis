// Generated by Khrysalis TypeScript converter
// File: /home/josephivie/IdeaProjects/khrysalis/kotlin-compiler-plugin-typescript/testData/testClasses.shared.kt
// Package: com.test.classes
// Imported FQ name: com.test.classes.DataClassThing.x TS x
// Imported FQ name: com.test.classes.DataClassThing.y TS y
// Imported FQ name: com.test.classes.TestInterface SKIPPED due to same file
// Imported FQ name: com.test.classes.TestInterface TS TestInterface
// Imported FQ name: com.test.classes.TestInterface TS TestInterfaceDefaults
// Imported FQ name: com.test.classes.Weird SKIPPED due to same file
// Imported FQ name: com.test.classes.Weird TS Weird
// Imported FQ name: com.test.classes.Weird.<init>.both TS both
// Imported FQ name: com.test.classes.Weird.f TS f
// Imported FQ name: com.test.classes.main.outsideInfo TS outsideInfo
// Imported FQ name: kotlin.Double TS Double
// Imported FQ name: kotlin.Int TS Int
// Imported FQ name: kotlin.Int.toDouble TS toDouble
// Imported FQ name: kotlin.Int.toLong TS toLong
// Imported FQ name: kotlin.Int.toString TS toString
// Imported FQ name: kotlin.Long TS Long
// Imported FQ name: kotlin.String TS String

export interface TestInterface {
    
    readonly interfaceValue: String;
    
    interfaceFunction(): String
}
export class TestInterfaceDefaults {
    public static getInterfaceValue(this_InterfaceValue: TestInterface){ return "Default"; }
    public static interfaceFunction(this_InterfaceFunction: TestInterface){ return "Default"; }
}

export class DataClassThing implements TestInterface {
    public static implementsInterfaceComTestClassesTestInterface = true;
    public readonly x: Double;
    public readonly y: String;
    public constructor( x: Double = 0.0,  y: String = "Hello!") {
        this.x = x;
        this.y = y;
    }
    public hashCode(): number {
        let hash = 17;
        hash = 31 * hash + this.x.hashCode();
        hash = 31 * hash + this.y.hashCode();
        return hash;
    }
    public equals(other: any): boolean { return other instanceof DataClassThing && this.x.equals(other.x) && this.y.equals(other.y) }
    public toString(): string { return `DataClassThing(x = ${this.x}, y = ${this.y})` }
    public copy(x: Double = this.x, y: String = this.y) { return new DataClassThing(x, y); }
    
    public interfaceFunction(): String{ return `${this.x} ${this.y}`; }
    public get interfaceValue(): String { return TestInterfaceDefaults.getInterfaceValue(this); }
}

export class Weird implements TestInterface {
    public static implementsInterfaceComTestClassesTestInterface = true;
    public readonly c: Double;
    public d: Long;
    public constructor(a: Int = 0, b: String,  c: Double,  d: Long) {
        this.c = c;
        this.d = d;
        this.e = 0;
        this.f = "asdf";
    }
    
    public readonly e: Int = 0;
    
    public f: String;
    
    
    
    public static constructorkotlinInt(both: Int) {
        let result = new Weird(both, both.toString(), both.toDouble(), both.toLong());
        
        result.f = "Something else"
        
        return result;
    }
    
    public get interfaceValue(): String { return this.f; }
    
    public interfaceFunction(): String { return TestInterfaceDefaults.interfaceFunction(this); }
}

export function main(){
    const outsideInfo: String = "Pulled in";
    
    const instance = new class Anon implements TestInterface {
        public static implementsInterfaceComTestClassesTestInterface = true;
        public constructor() {
        }
        
        public get interfaceValue(): String { return outsideInfo; }
        
        public interfaceFunction(): String { return TestInterfaceDefaults.interfaceFunction(this); }
    }();
    
    const ugh = Weird.constructorkotlinInt(2);
    
}
