// Generated by Khrysalis TypeScript converter
// File: /home/josephivie/IdeaProjects/khrysalis/kotlin-compiler-plugin-typescript/testData/testTypes.shared.kt
// Package: com.test.types
// Imported FQ name: com.test.classes.Weird TS Weird
// Imported FQ name: com.test.types.ListOfThings SKIPPED due to same file
// Imported FQ name: com.test.types.ListOfThings TS ListOfThings
// Imported FQ name: com.test.types.MyInteger SKIPPED due to same file
// Imported FQ name: com.test.types.MyInteger TS MyInteger
// Imported FQ name: com.test.types.MyList SKIPPED due to same file
// Imported FQ name: com.test.types.MyList TS MyList
// Imported FQ name: com.test.types.MyList.T TS T
// Imported FQ name: com.test.types.MyThing SKIPPED due to same file
// Imported FQ name: com.test.types.MyThing TS MyThing
// Imported FQ name: com.test.types.Thing SKIPPED due to same file
// Imported FQ name: com.test.types.Thing TS Thing
// Imported FQ name: com.test.types.main.ugh TS ugh
// Imported FQ name: com.test.types.main.unknownThing TS unknownThing
// Imported FQ name: kotlin.Any TS Any
// Imported FQ name: kotlin.Int TS Int
// Imported FQ name: kotlin.collections.List TS List
// Imported FQ name: kotlin.collections.listOf TS listOf
// Imported FQ name: kotlin.io.println TS println
import { checkIsInterface, tryCastClass, tryCastInterface, tryCastPrimitive } from 'khrysalis/dist/Kotlin'
import { Weird } from 'testClasses.shared'

export type MyInteger = Int;
export let MyInteger = Int;


export class Thing {
    public constructor() {
    }
}

export type MyThing = Thing;
export let MyThing = Thing;

export type MyList<T> = List<T>;
export let MyList = List;

export type ListOfThings = MyList<MyThing>;
export let ListOfThings = MyList;


export function main(){
    const x: Int = 0;
    
    const y: MyInteger = 0;
    
    const stuff: ListOfThings = listOf(new MyThing());
    
    const otherList: List<Int> = listOf(1);
    
    const nullabilityTest: (Int | null) = null;
    
    const nullabilityTest2: (ListOfThings | null) = null;
    
    println("Success");
    
    const ugh = Weird.constructorkotlinInt(2);
    
    const unknownThing: (Any | null) = ugh;
    
    
    if(checkIsInterface(unknownThing, "ComTestClassesTestInterface")){
        println("Hello!");
    }
    println(tryCastInterface(unknownThing, "ComTestClassesTestInterface"));
    
    if(unknownThing instanceof Weird){
        println("Hello!");
    }
    println(tryCastClass(unknownThing, Weird));
    
    if(typeof (unknownThing) == "Int"){
        println("Hello!");
    }
    println(tryCastPrimitive(unknownThing, "Int"));
}

