// Generated by Khrysalis TypeScript converter
// File: /home/josephivie/IdeaProjects/khrysalis/kotlin-compiler-plugin-typescript/testData/testTypes.shared.kt
// Package: com.test.types
import { checkIsInterface, tryCastClass, tryCastInterface, tryCastPrimitive } from 'khrysalis/dist/Kotlin'
import { ListOfThings, MyInteger, MyList, MyThing, Thing } from './testTypes.shared'
import { Weird } from './testClasses.shared'

//! Declares com.test.types.MyInteger
export type MyInteger = number;
//! Declares com.test.types.MyInteger
export let MyInteger = Number;


//! Declares com.test.types.Thing
export class Thing {
    public constructor() {
    }
}

//! Declares com.test.types.MyThing
export type MyThing = Thing;
//! Declares com.test.types.MyThing
export let MyThing = Thing;

//! Declares com.test.types.MyList
export type MyList<T> = Array<T>;
//! Declares com.test.types.MyList
export let MyList = Array;

//! Declares com.test.types.ListOfThings
export type ListOfThings = MyList<MyThing>;
//! Declares com.test.types.ListOfThings
export let ListOfThings = MyList;


//! Declares com.test.types.main
export function main(){
    const x: number = 0;
    
    const y: MyInteger = 0;
    
    const stuff: ListOfThings = [new MyThing(), new Thing()];
    
    const otherList: Array<number> = [1, 2, 3];
    
    const nullabilityTest: (number | null) = null;
    
    const nullabilityTest2: (ListOfThings | null) = null;
    
    console.log("Success");
    
    const ugh = Weird.constructorkotlinInt(2);
    
    const unknownThing: (any | null) = ugh;
    
    
    if(checkIsInterface(unknownThing, "ComTestClassesTestInterface")){
        console.log("Hello!");
    }
    console.log(tryCastInterface(unknownThing, "ComTestClassesTestInterface"));
    
    if(unknownThing instanceof Weird){
        console.log("Hello!");
    }
    console.log(tryCastClass(unknownThing, Weird));
    
    if(typeof (unknownThing) == "number"){
        console.log("Hello!");
    }
    console.log(tryCastPrimitive(unknownThing, "number"));
    
    const thingA: object = unknownThing!!;
    
}

