// Generated by Khrysalis TypeScript converter
// File: /home/josephivie/IdeaProjects/khrysalis/kotlin-compiler-plugin-typescript/testData/testVariables.shared.kt
// Package: com.test.variables
// Imported FQ name: com.test.variables.<set-extensionProperty>.value TS value
// Imported FQ name: com.test.variables.<set-topLevelHybrid>.value TS value
// Imported FQ name: com.test.variables.<set-topLevelVirtual>.value TS value
// Imported FQ name: com.test.variables.GenericTest SKIPPED due to same file
// Imported FQ name: com.test.variables.GenericTest TS GenericTest
// Imported FQ name: com.test.variables.TestClass SKIPPED due to same file
// Imported FQ name: com.test.variables.TestClass TS TestClass
// Imported FQ name: com.test.variables.TestClass.<set-memberHybrid>.value TS value
// Imported FQ name: com.test.variables.TestClass.<set-memberVirtual>.value TS value
// Imported FQ name: com.test.variables.TestClass.Companion.<set-companionHybrid>.value TS value
// Imported FQ name: com.test.variables.TestClass.Companion.<set-companionVirtual>.value TS value
// Imported FQ name: com.test.variables.TestClass.Companion.companionHybrid TS companionHybrid
// Imported FQ name: com.test.variables.TestClass.Companion.companionReal TS companionReal
// Imported FQ name: com.test.variables.TestClass.Companion.companionVirtual TS companionVirtual
// Imported FQ name: com.test.variables.TestClass.memberHybrid TS memberHybrid
// Imported FQ name: com.test.variables.TestClass.memberReal TS memberReal
// Imported FQ name: com.test.variables.TestClass.memberVirtual TS memberVirtual
// Imported FQ name: com.test.variables.TestObject SKIPPED due to same file
// Imported FQ name: com.test.variables.TestObject TS TestObject
// Imported FQ name: com.test.variables.TestObject.<set-needlesslyComplex>.value TS value
// Imported FQ name: com.test.variables.TestObject.<set-objectHybrid>.value TS value
// Imported FQ name: com.test.variables.TestObject.<set-objectVirtual>.value TS value
// Imported FQ name: com.test.variables.TestObject.needlesslyComplex TS getComTestVariablesTestClassNeedlesslyComplex
// Imported FQ name: com.test.variables.TestObject.needlesslyComplex TS setComTestVariablesTestClassNeedlesslyComplex
// Imported FQ name: com.test.variables.TestObject.objectHybrid TS objectHybrid
// Imported FQ name: com.test.variables.TestObject.objectReal TS objectReal
// Imported FQ name: com.test.variables.TestObject.objectUsage.testInstance TS testInstance
// Imported FQ name: com.test.variables.TestObject.objectVirtual TS objectVirtual
// Imported FQ name: com.test.variables.ext.T TS T
// Imported FQ name: com.test.variables.extensionProperty SKIPPED due to same file
// Imported FQ name: com.test.variables.extensionProperty TS getComTestVariablesTestClassExtensionProperty
// Imported FQ name: com.test.variables.extensionProperty TS setComTestVariablesTestClassExtensionProperty
// Imported FQ name: com.test.variables.fileReal TS fileReal
// Imported FQ name: com.test.variables.test.instance TS instance
// Imported FQ name: com.test.variables.topLevelHybrid SKIPPED due to same file
// Imported FQ name: com.test.variables.topLevelHybrid TS getTopLevelHybrid
// Imported FQ name: com.test.variables.topLevelHybrid TS setTopLevelHybrid
// Imported FQ name: com.test.variables.topLevelReal SKIPPED due to same file
// Imported FQ name: com.test.variables.topLevelReal TS getTopLevelReal
// Imported FQ name: com.test.variables.topLevelReal TS setTopLevelReal
// Imported FQ name: com.test.variables.topLevelVirtual SKIPPED due to same file
// Imported FQ name: com.test.variables.topLevelVirtual TS getTopLevelVirtual
// Imported FQ name: com.test.variables.topLevelVirtual TS setTopLevelVirtual

let fileReal: number = 0;

export let _topLevelReal: number = 0;
export function getTopLevelReal(): number { return _topLevelReal; }
export function setTopLevelReal(value: number) { _topLevelReal = value; }

export function getTopLevelVirtual(): number { return 1; }
export function setTopLevelVirtual(value: number) {
    console.log(`Attempted to set ${value}`);
}

export let _topLevelHybrid: number = 2;
export function getTopLevelHybrid(): number { return _topLevelHybrid; }
export function setTopLevelHybrid(value: number) {
    _topLevelHybrid = value + 1;
}


export function topLevelUsage(){
    setTopLevelReal(-1);
    console.log(getTopLevelReal());
    setTopLevelVirtual(-2);
    setTopLevelVirtual(getTopLevelVirtual() + 3);
    console.log(getTopLevelVirtual());
    setTopLevelHybrid(-3);
    console.log(getTopLevelHybrid());
}

export class TestClass {
    
    public memberReal: number = 0;
    
    public get memberVirtual(): number { return 1; }
    public set memberVirtual(value: number) {
        console.log(`Attempted to set ${value}`);
    }
    
    public _memberHybrid: number = 2;
    public get memberHybrid(): number { return this._memberHybrid; }
    public set memberHybrid(value: number) {
        this._memberHybrid = value + 1;
    }
    
    public memberUsage(){
        this.memberReal = -1;
        console.log(this.memberReal);
        this.memberVirtual = -2;
        console.log(this.memberVirtual);
        this.memberHybrid = -3;
        console.log(this.memberHybrid);
        setComTestVariablesTestClassExtensionProperty(this, -4);
        console.log(getComTestVariablesTestClassExtensionProperty(this));
        setComTestVariablesTestClassExtensionProperty(this, -4);
        console.log(getComTestVariablesTestClassExtensionProperty(this));
        
        setTopLevelReal(-1);
        console.log(getTopLevelReal());
        setTopLevelVirtual(-2);
        console.log(getTopLevelVirtual());
        setTopLevelHybrid(-3);
        console.log(getTopLevelHybrid());
        
        TestClass.Companion.INSTANCE.companionReal = -1;
        console.log(TestClass.Companion.INSTANCE.companionReal);
        TestClass.Companion.INSTANCE.companionVirtual = -2;
        console.log(TestClass.Companion.INSTANCE.companionVirtual);
        TestClass.Companion.INSTANCE.companionHybrid = -3;
        console.log(TestClass.Companion.INSTANCE.companionHybrid);
        
        TestClass.Companion.INSTANCE.companionReal = -1;
        console.log(TestClass.Companion.INSTANCE.companionReal);
        TestClass.Companion.INSTANCE.companionVirtual = -2;
        console.log(TestClass.Companion.INSTANCE.companionVirtual);
        TestClass.Companion.INSTANCE.companionHybrid = -3;
        console.log(TestClass.Companion.INSTANCE.companionHybrid);
        
        TestClass.Companion.INSTANCE.companionReal = -1;
        console.log(TestClass.Companion.INSTANCE.companionReal);
        TestClass.Companion.INSTANCE.companionVirtual = -2;
        console.log(TestClass.Companion.INSTANCE.companionVirtual);
        TestClass.Companion.INSTANCE.companionHybrid = -3;
        console.log(TestClass.Companion.INSTANCE.companionHybrid);
    }
    
    public static Companion = class Companion {
        private constructor() {
            this.companionReal = 0;
            this.companionHybrid = 2;
        }
        public static INSTANCE = new Companion();
        
        public companionReal: number = 0;
        
        public get companionVirtual(): number { return 1; }
        public set companionVirtual(value: number) {
            console.log(`Attempted to set ${value}`);
        }
        
        public _companionHybrid: number = 2;
        public get companionHybrid(): number { return this._companionHybrid; }
        public set companionHybrid(value: number) {
            this._companionHybrid = value + 1;
        }
        
    }
}

export function getComTestVariablesTestClassExtensionProperty(this_ExtensionProperty: TestClass): number { return this_ExtensionProperty.memberReal; }
export function setComTestVariablesTestClassExtensionProperty(this_ExtensionProperty: TestClass, value: number) {
    this_ExtensionProperty.memberReal = value;
}


export class TestObject {
    private constructor() {
        this.objectReal = 0;
        this.objectHybrid = 2;
    }
    public static INSTANCE = new TestObject();
    
    public objectReal: number = 0;
    
    public get objectVirtual(): number { return 1; }
    public set objectVirtual(value: number) {
        console.log(`Attempted to set ${value}`);
    }
    
    public _objectHybrid: number = 2;
    public get objectHybrid(): number { return this._objectHybrid; }
    public set objectHybrid(value: number) {
        this._objectHybrid = value + 1;
    }
    
    objectUsage(){
        this.objectReal = -1;
        console.log(this.objectReal);
        this.objectVirtual = -2;
        console.log(this.objectVirtual);
        this.objectHybrid = -3;
        console.log(this.objectHybrid);
        
        setTopLevelReal(-1);
        console.log(getTopLevelReal());
        setTopLevelVirtual(-2);
        console.log(getTopLevelVirtual());
        setTopLevelHybrid(-3);
        console.log(getTopLevelHybrid());
        
        const testInstance = new TestClass();
        
        this.setComTestVariablesTestClassNeedlesslyComplex(testInstance, -4);
        console.log(this.getComTestVariablesTestClassNeedlesslyComplex(testInstance));
    }
    getComTestVariablesTestClassNeedlesslyComplex(this_NeedlesslyComplex: TestClass): number { return this_NeedlesslyComplex.memberReal; }
    setComTestVariablesTestClassNeedlesslyComplex(this_NeedlesslyComplex: TestClass, value: number) {
        this_NeedlesslyComplex.memberReal = value;
        this.objectReal = value;
    }
    
}

export class GenericTest<T> {
    
}
export function getComTestVariablesGenericTestExt<T>(this_Ext: GenericTest<T>): number { return 1; }


export function getComTestVariablesTestObjectExtensionProperty(this_ExtensionProperty: TestObject): number { return this_ExtensionProperty.objectReal; }
export function setComTestVariablesTestObjectExtensionProperty(this_ExtensionProperty: TestObject, value: number) {
    this_ExtensionProperty.objectReal = value;
}


export function test(){
    const instance = new TestClass();
    
    fileReal = fileReal + 1;
    console.log(TestObject.INSTANCE.objectReal);
    console.log(instance.memberReal);
    console.log(getComTestVariablesTestClassExtensionProperty(instance));
    console.log(42 /*magicVariable get!*/);
    console.log(`Setting magicVariable to ${Math.abs(9001) + 4}`);;
}
