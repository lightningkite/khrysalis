// Generated by Khrysalis TypeScript converter
// File: /home/josephivie/IdeaProjects/khrysalis/kotlin-compiler-plugin-typescript/testData/testVariables.shared.kt
// Package: com.test.variables
// Imported FQ name: com.test.magicVariable TS getMagicVariable
// Imported FQ name: com.test.magicVariable TS setMagicVariable
// Imported FQ name: com.test.variables.<set-extensionProperty>.value TS value
// Imported FQ name: com.test.variables.<set-topLevelHybrid>.value TS value
// Imported FQ name: com.test.variables.<set-topLevelVirtual>.value TS value
// Imported FQ name: com.test.variables.GenericTest SKIPPED due to same file
// Imported FQ name: com.test.variables.GenericTest TS GenericTest
// Imported FQ name: com.test.variables.TestClass SKIPPED due to same file
// Imported FQ name: com.test.variables.TestClass TS TestClass
// Imported FQ name: com.test.variables.TestClass.<set-memberHybrid>.value TS value
// Imported FQ name: com.test.variables.TestClass.<set-memberVirtual>.value TS value
// Imported FQ name: com.test.variables.TestClass.Companion.<set-companionHybrid>.value TS value
// Imported FQ name: com.test.variables.TestClass.Companion.<set-companionVirtual>.value TS value
// Imported FQ name: com.test.variables.TestClass.Companion.companionHybrid TS companionHybrid
// Imported FQ name: com.test.variables.TestClass.Companion.companionReal TS companionReal
// Imported FQ name: com.test.variables.TestClass.Companion.companionVirtual TS companionVirtual
// Imported FQ name: com.test.variables.TestClass.memberHybrid TS memberHybrid
// Imported FQ name: com.test.variables.TestClass.memberReal TS memberReal
// Imported FQ name: com.test.variables.TestClass.memberVirtual TS memberVirtual
// Imported FQ name: com.test.variables.TestObject SKIPPED due to same file
// Imported FQ name: com.test.variables.TestObject TS TestObject
// Imported FQ name: com.test.variables.TestObject.<set-needlesslyComplex>.value TS value
// Imported FQ name: com.test.variables.TestObject.<set-objectHybrid>.value TS value
// Imported FQ name: com.test.variables.TestObject.<set-objectVirtual>.value TS value
// Imported FQ name: com.test.variables.TestObject.needlesslyComplex TS getComTestVariablesTestClassNeedlesslyComplex
// Imported FQ name: com.test.variables.TestObject.needlesslyComplex TS setComTestVariablesTestClassNeedlesslyComplex
// Imported FQ name: com.test.variables.TestObject.objectHybrid TS objectHybrid
// Imported FQ name: com.test.variables.TestObject.objectReal TS objectReal
// Imported FQ name: com.test.variables.TestObject.objectUsage.testInstance TS testInstance
// Imported FQ name: com.test.variables.TestObject.objectVirtual TS objectVirtual
// Imported FQ name: com.test.variables.ext.T TS T
// Imported FQ name: com.test.variables.extensionProperty SKIPPED due to same file
// Imported FQ name: com.test.variables.extensionProperty TS getComTestVariablesTestClassExtensionProperty
// Imported FQ name: com.test.variables.extensionProperty TS setComTestVariablesTestClassExtensionProperty
// Imported FQ name: com.test.variables.fileReal TS fileReal
// Imported FQ name: com.test.variables.test.instance TS instance
// Imported FQ name: com.test.variables.topLevelHybrid SKIPPED due to same file
// Imported FQ name: com.test.variables.topLevelHybrid TS getTopLevelHybrid
// Imported FQ name: com.test.variables.topLevelHybrid TS setTopLevelHybrid
// Imported FQ name: com.test.variables.topLevelReal SKIPPED due to same file
// Imported FQ name: com.test.variables.topLevelReal TS getTopLevelReal
// Imported FQ name: com.test.variables.topLevelReal TS setTopLevelReal
// Imported FQ name: com.test.variables.topLevelVirtual SKIPPED due to same file
// Imported FQ name: com.test.variables.topLevelVirtual TS getTopLevelVirtual
// Imported FQ name: com.test.variables.topLevelVirtual TS setTopLevelVirtual
// Imported FQ name: kotlin.Int TS Int
// Imported FQ name: kotlin.Int.plus TS plus
// Imported FQ name: kotlin.io.println TS println
// Imported FQ name: kotlin.math.absoluteValue TS getKotlinIntAbsoluteValue

let fileReal: Int = 0;

export let _topLevelReal: Int = 0;
export function getTopLevelReal(): Int { return _topLevelReal; }
export function setTopLevelReal(value: Int) { _topLevelReal = value; }

export function getTopLevelVirtual(): Int { return 1; }
export function setTopLevelVirtual(value: Int) {
    println(`Attempted to set ${value}`);
}

export let _topLevelHybrid: Int = 2;
export function getTopLevelHybrid(): Int { return _topLevelHybrid; }
export function setTopLevelHybrid(value: Int) {
    _topLevelHybrid = value.plus(1);
}


export function topLevelUsage(){
    setTopLevelReal(1.unaryMinus());
    println(getTopLevelReal());
    setTopLevelVirtual(2.unaryMinus());
    setTopLevelVirtual(getTopLevelVirtual().plus(3));
    println(getTopLevelVirtual());
    setTopLevelHybrid(3.unaryMinus());
    println(getTopLevelHybrid());
}

export class TestClass {
    
    public memberReal: Int = 0;
    
    public get memberVirtual(): Int { return 1; }
    public set memberVirtual(value: Int) {
        println(`Attempted to set ${value}`);
    }
    
    public _memberHybrid: Int = 2;
    public get memberHybrid(): Int { return this._memberHybrid; }
    public set memberHybrid(value: Int) {
        this._memberHybrid = value.plus(1);
    }
    
    public memberUsage(){
        this.memberReal = 1.unaryMinus();
        println(this.memberReal);
        this.memberVirtual = 2.unaryMinus();
        println(this.memberVirtual);
        this.memberHybrid = 3.unaryMinus();
        println(this.memberHybrid);
        setComTestVariablesTestClassExtensionProperty(this, 4.unaryMinus());
        println(getComTestVariablesTestClassExtensionProperty(this));
        setComTestVariablesTestClassExtensionProperty(this, 4.unaryMinus());
        println(getComTestVariablesTestClassExtensionProperty(this));
        
        setTopLevelReal(1.unaryMinus());
        println(getTopLevelReal());
        setTopLevelVirtual(2.unaryMinus());
        println(getTopLevelVirtual());
        setTopLevelHybrid(3.unaryMinus());
        println(getTopLevelHybrid());
        
        TestClass.Companion.INSTANCE.companionReal = 1.unaryMinus();
        println(TestClass.Companion.INSTANCE.companionReal);
        TestClass.Companion.INSTANCE.companionVirtual = 2.unaryMinus();
        println(TestClass.Companion.INSTANCE.companionVirtual);
        TestClass.Companion.INSTANCE.companionHybrid = 3.unaryMinus();
        println(TestClass.Companion.INSTANCE.companionHybrid);
        
        TestClass.Companion.INSTANCE.companionReal = 1.unaryMinus();
        println(TestClass.Companion.INSTANCE.companionReal);
        TestClass.Companion.INSTANCE.companionVirtual = 2.unaryMinus();
        println(TestClass.Companion.INSTANCE.companionVirtual);
        TestClass.Companion.INSTANCE.companionHybrid = 3.unaryMinus();
        println(TestClass.Companion.INSTANCE.companionHybrid);
        
        TestClass.Companion.INSTANCE.companionReal = 1.unaryMinus();
        println(TestClass.Companion.INSTANCE.companionReal);
        TestClass.Companion.INSTANCE.companionVirtual = 2.unaryMinus();
        println(TestClass.Companion.INSTANCE.companionVirtual);
        TestClass.Companion.INSTANCE.companionHybrid = 3.unaryMinus();
        println(TestClass.Companion.INSTANCE.companionHybrid);
    }
    
    public static Companion = class Companion {
        private constructor() {
            this.companionReal = 0;
            this.companionHybrid = 2;
        }
        public static INSTANCE = new Companion();
        
        public companionReal: Int = 0;
        
        public get companionVirtual(): Int { return 1; }
        public set companionVirtual(value: Int) {
            println(`Attempted to set ${value}`);
        }
        
        public _companionHybrid: Int = 2;
        public get companionHybrid(): Int { return this._companionHybrid; }
        public set companionHybrid(value: Int) {
            this._companionHybrid = value.plus(1);
        }
        
    }
}

export function getComTestVariablesTestClassExtensionProperty(this_ExtensionProperty: TestClass): Int { return this_ExtensionProperty.memberReal; }
export function setComTestVariablesTestClassExtensionProperty(this_ExtensionProperty: TestClass, value: Int) {
    this_ExtensionProperty.memberReal = value;
}


export class TestObject {
    private constructor() {
        this.objectReal = 0;
        this.objectHybrid = 2;
    }
    public static INSTANCE = new TestObject();
    
    public objectReal: Int = 0;
    
    public get objectVirtual(): Int { return 1; }
    public set objectVirtual(value: Int) {
        println(`Attempted to set ${value}`);
    }
    
    public _objectHybrid: Int = 2;
    public get objectHybrid(): Int { return this._objectHybrid; }
    public set objectHybrid(value: Int) {
        this._objectHybrid = value.plus(1);
    }
    
    objectUsage(){
        this.objectReal = 1.unaryMinus();
        println(this.objectReal);
        this.objectVirtual = 2.unaryMinus();
        println(this.objectVirtual);
        this.objectHybrid = 3.unaryMinus();
        println(this.objectHybrid);
        
        setTopLevelReal(1.unaryMinus());
        println(getTopLevelReal());
        setTopLevelVirtual(2.unaryMinus());
        println(getTopLevelVirtual());
        setTopLevelHybrid(3.unaryMinus());
        println(getTopLevelHybrid());
        
        const testInstance = new TestClass();
        
        this.setComTestVariablesTestClassNeedlesslyComplex(testInstance, 4.unaryMinus());
        println(this.getComTestVariablesTestClassNeedlesslyComplex(testInstance));
    }
    getComTestVariablesTestClassNeedlesslyComplex(this_NeedlesslyComplex: TestClass): Int { return this_NeedlesslyComplex.memberReal; }
    setComTestVariablesTestClassNeedlesslyComplex(this_NeedlesslyComplex: TestClass, value: Int) {
        this_NeedlesslyComplex.memberReal = value;
        this.objectReal = value;
    }
    
}

export class GenericTest<T> {
    
}
export function getComTestVariablesGenericTestExt<T>(this_Ext: GenericTest<T>): Int { return 1; }


export function getComTestVariablesTestObjectExtensionProperty(this_ExtensionProperty: TestObject): Int { return this_ExtensionProperty.objectReal; }
export function setComTestVariablesTestObjectExtensionProperty(this_ExtensionProperty: TestObject, value: Int) {
    this_ExtensionProperty.objectReal = value;
}


export function test(){
    const instance = new TestClass();
    
    fileReal = fileReal.plus(1);
    println(TestObject.INSTANCE.objectReal);
    println(instance.memberReal);
    println(getComTestVariablesTestClassExtensionProperty(instance));
    println(getMagicVariable());
    setMagicVariable(getKotlinIntAbsoluteValue(9001).plus(4));
}
