// Generated by Khrysalis TypeScript converter
// File: /home/josephivie/IdeaProjects/khrysalis/kotlin-compiler-plugin-typescript/testData/testOperators.shared.kt
// Package: com.test.operators
// Imported FQ name: com.test.operators.ExampleImmutableThing SKIPPED due to same file
// Imported FQ name: com.test.operators.ExampleImmutableThing TS ExampleImmutableThing
// Imported FQ name: com.test.operators.ExampleImmutableThing.containedNumber TS containedNumber
// Imported FQ name: com.test.operators.ExampleImmutableThing.get.index TS index
// Imported FQ name: com.test.operators.ExampleImmutableThing.plus.other TS other
// Imported FQ name: com.test.operators.ExampleImmutableThing.plus.result TS result
// Imported FQ name: com.test.operators.ExampleImmutableThing.unaryMinus.result TS result
// Imported FQ name: com.test.operators.ExampleMutableThing SKIPPED due to same file
// Imported FQ name: com.test.operators.ExampleMutableThing TS ExampleMutableThing
// Imported FQ name: com.test.operators.ExampleMutableThing.containedNumber TS containedNumber
// Imported FQ name: com.test.operators.ExampleMutableThing.get.index TS index
// Imported FQ name: com.test.operators.ExampleMutableThing.plus.other TS other
// Imported FQ name: com.test.operators.ExampleMutableThing.plus.result TS result
// Imported FQ name: com.test.operators.ExampleMutableThing.plusAssign.other TS other
// Imported FQ name: com.test.operators.ExampleMutableThing.set.index TS index
// Imported FQ name: com.test.operators.ExampleMutableThing.set.value TS value
// Imported FQ name: com.test.operators.main.choices TS choices
// Imported FQ name: com.test.operators.main.mthing1 TS mthing1
// Imported FQ name: com.test.operators.main.mthing2 TS mthing2
// Imported FQ name: com.test.operators.main.num TS num
// Imported FQ name: com.test.operators.main.thing1 TS thing1
// Imported FQ name: com.test.operators.main.thing2 TS thing2
// Imported FQ name: com.test.operators.main.thing3 TS thing3
// Imported FQ name: com.test.operators.main.thing4 TS thing4
// Imported FQ name: com.test.operators.main.thing5 TS thing5
// Imported FQ name: com.test.operators.main.x TS x
// Imported FQ name: kotlin.Int TS Int
// Imported FQ name: kotlin.Int.and TS and
// Imported FQ name: kotlin.Int.div TS div
// Imported FQ name: kotlin.Int.inv TS inv
// Imported FQ name: kotlin.Int.minus TS minus
// Imported FQ name: kotlin.Int.or TS or
// Imported FQ name: kotlin.Int.plus TS plus
// Imported FQ name: kotlin.Int.rem TS rem
// Imported FQ name: kotlin.Int.shl TS shl
// Imported FQ name: kotlin.Int.shr TS shr
// Imported FQ name: kotlin.Int.times TS times
// Imported FQ name: kotlin.Int.ushr TS ushr
// Imported FQ name: kotlin.Int.xor TS xor
// Imported FQ name: kotlin.collections.listOf TS listOf
// Imported FQ name: kotlin.io.println TS println

export class ExampleMutableThing {
    
    public containedNumber: Int = 0;
    
    public plus(other: ExampleMutableThing): ExampleMutableThing{
        const result = new ExampleMutableThing();
        
        result.containedNumber = this.containedNumber.plus(other.containedNumber);
        return result;
    }
    
    public plusAssign(other: ExampleMutableThing){
        this.containedNumber = this.containedNumber.plus(other.containedNumber);
    }
    
    public get(index: Int): Int{ return this.containedNumber.plus(index); }
    public set(index: Int, value: Int): Int{ return value.minus(index); }
}

export class ExampleImmutableThing {
    
    public containedNumber: Int = 0;
    
    public plus(other: ExampleImmutableThing): ExampleImmutableThing{
        const result = new ExampleImmutableThing();
        
        result.containedNumber = this.containedNumber.plus(other.containedNumber);
        return result;
    }
    
    public unaryMinus(): ExampleImmutableThing{
        const result = new ExampleImmutableThing();
        
        result.containedNumber = this.containedNumber.unaryMinus();
        return result;
    }
    
    public get(index: Int): Int{ return this.containedNumber.plus(index); }
}

export function main(){
    let x: Int = 2;
    
    
    //Normal operators
    println(1.plus(x));
    println(1.minus(x));
    println(1.times(x));
    println(1.div(x));
    println(1.rem(x));
    println(1.compareTo(x));
    println(1.compareTo(x));
    println(1.compareTo(x));
    println(1.compareTo(x));
    println(!(1.equals(x)));
    println(1.equals(x));
    
    //Direct calls
    println(1.plus(x));
    println(1.minus(x));
    println(1.times(x));
    println(1.div(x));
    println(1.rem(x));
    
    //Assign operators
    x = x.plus(1);
    x = x.minus(1);
    x = x.times(2);
    x = x.div(2);
    x = x.rem(1);
    x = x.unaryMinus();
    println(x);
    
    //Psuedo-operators
    x = x.shl(1);
    x = x.shr(1);
    x = x.ushr(1);
    x = x.and(1);
    x = x.or(1);
    x = x.xor(1);
    x = 1.inv();
    
    //Overloading
    const thing1 = new ExampleImmutableThing();
    
    thing1.containedNumber = 1;
    const thing2 = new ExampleImmutableThing();
    
    thing2.containedNumber = 2;
    
    const thing3 = thing1.plus(thing2);
    
    println(thing3.containedNumber);
    
    println(thing3.get(1));
    
    const thing4 = thing3.unaryMinus();
    
    println(thing4.containedNumber);
    
    let thing5 = thing4;
    
    thing5 = thing5.plus(thing1);
    println(thing5.containedNumber);
    
    const mthing1 = new ExampleMutableThing();
    
    mthing1.containedNumber = 1;
    const mthing2 = new ExampleMutableThing();
    
    mthing2.containedNumber = 2;
    mthing1.plusAssign(mthing2);
    println(mthing1.containedNumber);
    println(mthing1.get(2));
    mthing1.set(2, 8);
    mthing1.set(2, mthing1.get(2).plus(8));
    println(mthing1.get(1));
    
    //Binary
    println(true && true);
    println(true || false);
    
    //Ranges
    for (const num of 1.rangeTo(6)) {
        println(num);
    }
    println(1.rangeTo(6).contains(3));
    
    //Containers
    const choices = listOf(1);
    
    println(choices.contains(5));
    println(!(choices.contains(5)));
}
