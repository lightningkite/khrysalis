// Generated by Khrysalis TypeScript converter
// File: /home/josephivie/IdeaProjects/khrysalis/kotlin-compiler-plugin-typescript/testData/testOperators.shared.kt
// Package: com.test.operators
// Imported FQ name: com.test.operators.ExampleImmutableThing SKIPPED due to same file
// Imported FQ name: com.test.operators.ExampleImmutableThing TS ExampleImmutableThing
// Imported FQ name: com.test.operators.ExampleImmutableThing.containedNumber TS containedNumber
// Imported FQ name: com.test.operators.ExampleImmutableThing.get.index TS index
// Imported FQ name: com.test.operators.ExampleImmutableThing.plus.other TS other
// Imported FQ name: com.test.operators.ExampleImmutableThing.plus.result TS result
// Imported FQ name: com.test.operators.ExampleImmutableThing.unaryMinus.result TS result
// Imported FQ name: com.test.operators.ExampleMutableThing SKIPPED due to same file
// Imported FQ name: com.test.operators.ExampleMutableThing TS ExampleMutableThing
// Imported FQ name: com.test.operators.ExampleMutableThing.containedNumber TS containedNumber
// Imported FQ name: com.test.operators.ExampleMutableThing.get.index TS index
// Imported FQ name: com.test.operators.ExampleMutableThing.plus.other TS other
// Imported FQ name: com.test.operators.ExampleMutableThing.plus.result TS result
// Imported FQ name: com.test.operators.ExampleMutableThing.plusAssign.other TS other
// Imported FQ name: com.test.operators.ExampleMutableThing.set.index TS index
// Imported FQ name: com.test.operators.ExampleMutableThing.set.value TS value
// Imported FQ name: com.test.operators.main.choices TS choices
// Imported FQ name: com.test.operators.main.mthing1 TS mthing1
// Imported FQ name: com.test.operators.main.mthing2 TS mthing2
// Imported FQ name: com.test.operators.main.num TS num
// Imported FQ name: com.test.operators.main.thing1 TS thing1
// Imported FQ name: com.test.operators.main.thing2 TS thing2
// Imported FQ name: com.test.operators.main.thing3 TS thing3
// Imported FQ name: com.test.operators.main.thing4 TS thing4
// Imported FQ name: com.test.operators.main.thing5 TS thing5
// Imported FQ name: com.test.operators.main.x TS x
import { NumberRange } from 'khrysalis/dist/Kotlin'

export class ExampleMutableThing {
    
    public containedNumber: number = 0;
    
    public plus(other: ExampleMutableThing): ExampleMutableThing{
        const result = new ExampleMutableThing();
        
        result.containedNumber = this.containedNumber + other.containedNumber;
        return result;
    }
    
    public plusAssign(other: ExampleMutableThing){
        this.containedNumber = this.containedNumber + other.containedNumber;
    }
    
    public get(index: number): number{ return this.containedNumber + index; }
    public set(index: number, value: number): number{ return value - index; }
}

export class ExampleImmutableThing {
    
    public containedNumber: number = 0;
    
    public plus(other: ExampleImmutableThing): ExampleImmutableThing{
        const result = new ExampleImmutableThing();
        
        result.containedNumber = this.containedNumber + other.containedNumber;
        return result;
    }
    
    public unaryMinus(): ExampleImmutableThing{
        const result = new ExampleImmutableThing();
        
        result.containedNumber = -this.containedNumber;
        return result;
    }
    
    public get(index: number): number{ return this.containedNumber + index; }
}

export function main(){
    let x: number = 2;
    
    
    //Normal operators
    console.log(1 + x);
    console.log(1 - x);
    console.log(1 * x);
    console.log(1 / x);
    console.log(1 % x);
    console.log(1 > x);
    console.log(1 < x);
    console.log(1 >= x);
    console.log(1 <= x);
    console.log(!(1 === x));
    console.log(1 === x);
    
    //Direct calls
    console.log(1 + x);
    console.log(1 - x);
    console.log(1 * x);
    console.log(1 / x);
    console.log(1 % x);
    
    //Assign operators
    x = x + 1;
    x = x - 1;
    x = x * 2;
    x = x / 2;
    x = x % 1;
    x = -x;
    console.log(x);
    
    //Psuedo-operators
    x = x << 1;
    x = x >> 1;
    x = x >>> 1;
    x = x & 1;
    x = x | 1;
    x = x ^ 1;
    x = ~1;
    
    //Overloading
    const thing1 = new ExampleImmutableThing();
    
    thing1.containedNumber = 1;
    const thing2 = new ExampleImmutableThing();
    
    thing2.containedNumber = 2;
    
    const thing3 = thing1.plus(thing2);
    
    console.log(thing3.containedNumber);
    
    console.log(thing3.get(1));
    
    const thing4 = thing3.unaryMinus();
    
    console.log(thing4.containedNumber);
    
    let thing5 = thing4;
    
    thing5 = thing5.plus(thing1);
    console.log(thing5.containedNumber);
    
    const mthing1 = new ExampleMutableThing();
    
    mthing1.containedNumber = 1;
    const mthing2 = new ExampleMutableThing();
    
    mthing2.containedNumber = 2;
    mthing1.plusAssign(mthing2);
    console.log(mthing1.containedNumber);
    console.log(mthing1.get(2));
    const array1 = mthing1;
    const index2 = 2;
    array1.set(index2, 8);
    const array3 = mthing1;
    const index4 = 2;
    array3.set(index4, array3.get(index4) + 8);
    console.log(mthing1.get(1));
    
    //Binary
    console.log(true && true);
    console.log(true || false);
    
    //Ranges
    for (const num of new NumberRange(1, 6)) {
        console.log(num);
    }
    console.log(new NumberRange(1, 6).contains(3));
    
    //Containers
    const choices = [1, 2, 3, 4];
    
    console.log((choices.indexOf(5) != -1));
    console.log(!((choices.indexOf(5) != -1)));
}
