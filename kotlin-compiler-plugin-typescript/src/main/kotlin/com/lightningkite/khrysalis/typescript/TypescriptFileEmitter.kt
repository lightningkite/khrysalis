package com.lightningkite.khrysalis.typescript

import com.lightningkite.khrysalis.typescript.replacements.TemplatePart
import com.lightningkite.khrysalis.util.SmartTabWriter
import org.jetbrains.kotlin.descriptors.DeclarationDescriptor
import org.jetbrains.kotlin.descriptors.PackageFragmentDescriptor
import org.jetbrains.kotlin.descriptors.isTopLevelInPackage
import org.jetbrains.kotlin.psi.KtFile
import org.jetbrains.kotlin.resolve.descriptorUtil.fqNameOrNull
import org.jetbrains.kotlin.resolve.descriptorUtil.fqNameSafe
import org.jetbrains.kotlin.resolve.descriptorUtil.getImportableDescriptor
import java.io.BufferedWriter

class TypescriptFileEmitter: Appendable {
    val stringBuilder = StringBuilder()
    val out = SmartTabWriter(stringBuilder)
    private val imports = HashMap<String, ImportInfo>()

    fun write(writer: BufferedWriter, file: KtFile) {
        writer.appendln("// Generated by Khrysalis TypeScript converter")
        writer.appendln("// File: ${file.virtualFilePath}")
        writer.appendln("// Package: ${file.packageFqName.asString()}")
        imports.values.groupBy { it.path }.forEach { (path, parts) ->
            writer.append("import {")
            writer.append(parts.joinToString(", ") {
                it.asName?.let { name ->
                    it.identifier + " as " + name
                } ?: it.identifier
            })
            writer.append("} from '")
            writer.append(path)
            writer.appendln("'")
        }
        writer.appendln()

        out.flush()
        writer.appendln(stringBuilder)
    }

    private data class ImportInfo(
        val path: String,
        val identifier: String,
        val asName: String? = null
    )

    //Map of FQ name to import info
    fun addImport(path: String, identifier: String, asName: String? = null){
        val fqName = "$path->$identifier"
        if(imports.containsKey(fqName)) return
        imports[fqName] = ImportInfo(path, identifier, asName)
    }
    fun addImport(decl: DeclarationDescriptor){
        val name = decl.fqNameOrNull()?.asString() ?: return
        val packageDesc = decl.containingDeclaration as? PackageFragmentDescriptor ?: return
//        addImport(name, packageDesc.getImportableDescriptor())
    }
    fun addImport(part: TemplatePart.Import){
        addImport(
            path = part.path,
            identifier = part.identifier,
            asName = part.asName
        )
    }

    override fun append(p0: CharSequence): Appendable {
        out.append(p0)
        return this
    }

    override fun append(p0: CharSequence, p1: Int, p2: Int): Appendable {
        out.append(p0, p1, p2)
        return this
    }

    override fun append(p0: Char): Appendable {
        out.append(p0)
        return this
    }
}