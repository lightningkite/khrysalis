// Generated by Khrysalis TypeScript converter - this file will be overwritten.
// File: testFunctions.shared.kt
// Package: com.test.functions
import { runOrNull } from 'butterfly-web/dist/kotlin/Language'
import { safeEq } from 'butterfly-web/dist/Kotlin'

//! Declares com.test.functions.topLevelFunction
export function topLevelFunction(): void {
    println("Hello world!");
    const localFunction = (): void => {
        println("Hello from local!");
    }
    localFunction();
}
//! Declares com.test.functions.topLevelGenericFunction
export function topLevelGenericFunction<T>(item: T): void {
    println(`Hello ${item}`);
}
//! Declares com.test.functions.varargFunction
export function restParamsFunction(...numbers: Int[]): void {
    for (const item of numbers) {
        println(`Item: ${item}`);
    }
}

//! Declares com.test.functions.TestClass
export class TestClass {
    public constructor() {
        this.member = null;
    }
    
    public member: (Int | null);
    
    public chain(): TestClass {
        return this;
    }
    public memberFunction(a: Int = 2, b: Int = 3, c: Int = 4): void {
        println("Hello from TestClass!");
    }
    public memberGenericFunction<T>(item: T): void {
        println(`Hello ${item} from TestClass!`);
    }
    public xTestClass2MemberExtensionFunction(this_: TestClass2): void {
        println(`Hello ${this_} from ${this}!`);
    }
    public testExtension(): void {
        this.xTestClass2MemberExtensionFunction(new TestClass2());
    }
    public otherTest(): void {
        const it_10 = this.member;
        if (it_10 !== null) { 
            println(it_10);
        }
        const x = ((): (Int | null) => {
                const temp11 = this.member;
                if(temp11 !== null) {
                    return xAnyLet<Int, Int>(temp11, (it: Int): Int => it.plus(2))
                } else { return null }
        })();
        
        const it_12 = this.member;
        if (it_12 !== null) { 
            println(it_12);
        }
        const it_13 = this.member;
        if (it_13 !== null) { 
            it_13.plus(1);
        } else {
            const it_14 = this.member;
            if (it_14 !== null) { 
                it_14.plus(1);
            } else {
                println("hi");
            }
        }
        const y = ((): (Int | null) => {
                const temp15 = this.member;
                if(temp15 !== null) {
                    return xAnyLet<Int, Int>(temp15, (it: Int): Int => it.plus(1))
                } else { return null }
        })() ?? ((): (Int | null) => {
                const temp16 = this.member;
                if(temp16 !== null) {
                    return xAnyLet<Int, Int>(temp16, (it: Int): Int => it.plus(1))
                } else { return null }
        })() ?? 0;
        
        this.memberFunction(undefined, undefined, undefined);
        this.memberFunction(undefined, undefined, undefined);
        xTestClassExtensionFunction(this);
        xTestClassExtensionFunction(this);
    }
    public memberVarargTestFunction(...values: Int[]): void {
        for (const item of values) {
            println(item);
        }
    }
}

//! Declares com.test.functions.TestClass2
export class TestClass2 {
    public constructor() {
    }
    
    public test(): void {
        println("Hi!");
    }
}

//! Declares com.test.functions.extensionFunction>com.test.functions.TestClass
export function xTestClassExtensionFunction(this_: TestClass): void {
    println("From an extension:");
    this_.memberFunction(undefined, undefined, undefined);
}
//! Declares com.test.functions.extensionFunction>com.test.functions.TestClass
export function extensionFunction2(this_: TestClass, str: String): void {
    println(`From an extension with ${str}:`);
    this_.memberFunction(undefined, undefined, undefined);
}
//! Declares com.test.functions.genericExtensionFunction>kotlin.Any
export function xAnyGenericExtensionFunction<T, E>(this_: T, element: E): void {
    println(`Hello ${element} from ${this_}!`);
}

//! Declares com.test.functions.varargTestFunction
export function varargTestFunction(...values: Int[]): void {
    for (const item of values) {
        println(item);
    }
}

//! Declares com.test.functions.resolve
export function resolve<T>(T: Array<any>): (T | null) {
    return null;
}

//! Declares com.test.functions.main
export function main(): void {
    topLevelFunction();
    topLevelGenericFunction<Int>(2);
    restParamsFunction(1, 2, 3, 4, 5);
    const instance = new TestClass();
    
    instance.member = 2;
    instance.memberFunction(undefined, undefined, undefined);
    instance.memberFunction(1, undefined, undefined);
    instance.memberFunction(undefined, 1, undefined);
    instance.memberFunction(undefined, undefined, 1);
    instance.memberFunction(2, undefined, 1);
    instance.memberGenericFunction<Int>(32);
    instance.testExtension();
    xTestClassExtensionFunction(instance);
    extensionFunction2(instance, "asdf");
    xAnyGenericExtensionFunction<TestClass, Int>(instance, 8);
    instance.memberVarargTestFunction(1, 2, 3, 4);
    instance.memberVarargTestFunction();
    
    const maybeInstance: (TestClass | null) = safeEq(instance.member, 2) ? instance : null;
    
    if(maybeInstance !== null) {
        maybeInstance.member = 2
    };
    maybeInstance?.chain()?.chain()?.chain()?.chain();
    maybeInstance?.memberFunction(undefined, undefined, undefined);
    maybeInstance?.memberFunction(1, undefined, undefined);
    maybeInstance?.memberFunction(undefined, 1, undefined);
    maybeInstance?.memberFunction(undefined, undefined, 1);
    maybeInstance?.memberFunction(2, undefined, 1);
    maybeInstance?.memberGenericFunction<Int>(32);
    maybeInstance?.testExtension();
    if(maybeInstance !== null) {
        xTestClassExtensionFunction(maybeInstance)
    };
    if(maybeInstance !== null) {
        extensionFunction2(maybeInstance, "asdf")
    };
    if(maybeInstance !== null) {
        xAnyGenericExtensionFunction<TestClass, Int>(maybeInstance, 8)
    };
    maybeInstance?.memberVarargTestFunction(1, 2, 3, 4);
    maybeInstance?.memberVarargTestFunction();
    
    const result0 = (maybeInstance?.chain()?.chain()?.chain()?.chain() ?? null);
    
    const result1 = if(maybeInstance !== null) {
        maybeInstance.member = 2
    };
    
    const result2 = ((): (Unit | null) => {
            if(maybeInstance !== null) {
                return maybeInstance.memberFunction(undefined, undefined, undefined)
            } else { return null }
    })();
    
    const result3 = ((): (Unit | null) => {
            if(maybeInstance !== null) {
                return maybeInstance.memberFunction(1, undefined, undefined)
            } else { return null }
    })();
    
    const result4 = ((): (Unit | null) => {
            if(maybeInstance !== null) {
                return maybeInstance.memberFunction(undefined, 1, undefined)
            } else { return null }
    })();
    
    const result5 = ((): (Unit | null) => {
            if(maybeInstance !== null) {
                return maybeInstance.memberFunction(undefined, undefined, 1)
            } else { return null }
    })();
    
    const result6 = ((): (Unit | null) => {
            if(maybeInstance !== null) {
                return maybeInstance.memberFunction(2, undefined, 1)
            } else { return null }
    })();
    
    const result7 = ((): (Unit | null) => {
            if(maybeInstance !== null) {
                return maybeInstance.memberGenericFunction<Int>(32)
            } else { return null }
    })();
    
    const result8 = ((): (Unit | null) => {
            if(maybeInstance !== null) {
                return maybeInstance.testExtension()
            } else { return null }
    })();
    
    const result9 = ((): (Unit | null) => {
            if(maybeInstance !== null) {
                return xTestClassExtensionFunction(maybeInstance)
            } else { return null }
    })();
    
    const result10 = ((): (Unit | null) => {
            if(maybeInstance !== null) {
                return extensionFunction2(maybeInstance, "asdf")
            } else { return null }
    })();
    
    const result11 = ((): (Unit | null) => {
            if(maybeInstance !== null) {
                return xAnyGenericExtensionFunction<TestClass, Int>(maybeInstance, 8)
            } else { return null }
    })();
    
    const result12 = ((): (Unit | null) => {
            if(maybeInstance !== null) {
                return maybeInstance.memberVarargTestFunction(1, 2, 3, 4)
            } else { return null }
    })();
    
    const result13 = ((): (Unit | null) => {
            if(maybeInstance !== null) {
                return maybeInstance.memberVarargTestFunction()
            } else { return null }
    })();
    
    
    const x: (Int | null) = resolve<(Int | null)>([Int]);
    
    const y = resolve<String>([String]);
    
    varargTestFunction();
    varargTestFunction(1, 2, 3, 4);
}

//! Declares com.test.functions.anotherThing
export const _anotherThing = 2;
export function getAnotherThing(): Int { return _anotherThing; }

