// Generated by Khrysalis TypeScript converter - this file will be overwritten.
// File: testOperators.shared.kt
// Package: com.test.operators
import { safeEq } from 'butterfly-web/dist/Kotlin'

//! Declares com.test.operators.ExampleMutableThing
export class ExampleMutableThing {
    public constructor() {
        this.containedNumber = 0;
    }
    
    public containedNumber: Int;
    
    public plus(other: ExampleMutableThing): ExampleMutableThing {
        const result = new ExampleMutableThing();
        
        result.containedNumber = this.containedNumber.plus(other.containedNumber);
        return result;
    }
    
    public plusAssign(other: ExampleMutableThing): void {
        this.containedNumber = this.containedNumber.plus(other.containedNumber);
    }
    
    public get(index: Int): Int { 
        return this.containedNumber.plus(index); 
    }
    public set(index: Int, value: Int): Int { 
        return value.minus(index); 
    }
}

//! Declares com.test.operators.ExampleImmutableThing
export class ExampleImmutableThing {
    public constructor() {
        this.containedNumber = 0;
    }
    
    public containedNumber: Int;
    
    public plus(other: ExampleImmutableThing): ExampleImmutableThing {
        const result = new ExampleImmutableThing();
        
        result.containedNumber = this.containedNumber.plus(other.containedNumber);
        return result;
    }
    
    public unaryMinus(): ExampleImmutableThing {
        const result = new ExampleImmutableThing();
        
        result.containedNumber = this.containedNumber.unaryMinus();
        return result;
    }
    
    public get(index: Int): Int { 
        return this.containedNumber.plus(index); 
    }
}

//! Declares com.test.operators.main
export function main(): void {
    let x: Int = 2;
    
    
    //Normal operators
    println(x.unaryMinus());
    println(1.plus(x));
    println(1.minus(x));
    println(1.times(x));
    println(1.div(x));
    println(1.rem(x));
    println(1.compareTo(x));
    println(1.compareTo(x));
    println(1.compareTo(x));
    println(1.compareTo(x));
    println(!safeEq(1, x));
    println(safeEq(1, x));
    println(1 === x);
    
    //Direct calls
    println(1.plus(x));
    println(1.minus(x));
    println(1.times(x));
    println(1.div(x));
    println(1.rem(x));
    
    x = x.plus(x.compareTo(1) ? 1 : 0);
    
    //Null calls
    const maybeNumber: (Int | null) = x.compareTo(1) ? x : null;
    
    x?.plus(2);
    println((x?.plus(2) ?? null));
    x?.minus(2);
    println((x?.minus(2) ?? null));
    x?.times(2);
    println((x?.times(2) ?? null));
    x?.div(2);
    println((x?.div(2) ?? null));
    x?.rem(2);
    println((x?.rem(2) ?? null));
    
    //Assign operators
    x = x.plus(1);
    x = x.minus(1);
    x = x.times(2);
    x = x.div(2);
    x = x.rem(1);
    x = x.unaryMinus();
    println(x);
    
    //Psuedo-operators
    x = x.shl(1);
    x = x.shr(1);
    x = x.ushr(1);
    x = x.and(1);
    x = x.or(1);
    x = x.xor(1);
    x = 1.inv();
    
    //Overloading
    const thing1 = new ExampleImmutableThing();
    
    thing1.containedNumber = 1;
    const thing2 = new ExampleImmutableThing();
    
    thing2.containedNumber = 2;
    
    const maybe = x.compareTo(1) ? thing1 : null;
    
    println(maybe === null);
    println(maybe !== null);
    println(maybe === null);
    println(maybe !== null);
    println(maybe === null);
    println(maybe !== null);
    println(null === maybe);
    println(null !== maybe);
    
    const thing3 = thing1.plus(thing2);
    
    println(thing3.containedNumber);
    
    println(thing3.get(1));
    
    const thing4 = thing3.unaryMinus();
    
    println(thing4.containedNumber);
    
    let thing5 = thing4;
    
    thing5 = thing5.plus(thing1);
    println(thing5.containedNumber);
    
    const mthing1 = new ExampleMutableThing();
    
    mthing1.containedNumber = 1;
    const mthing2 = new ExampleMutableThing();
    
    mthing2.containedNumber = 2;
    mthing1.plusAssign(mthing2);
    println(mthing1.containedNumber);
    println(mthing1.get(2));
    const array24 = mthing1;
    const index25 = 2;
    array24.set(index25, 8);
    const array26 = mthing1;
    const index27 = 2;
    array26.set(index27, array26.get(2, 8).plus(8));
    println(mthing1.get(1));
    
    //Binary
    println(true && true);
    println(true || false);
    
    //Ranges
    for (const num of 1.rangeTo(6)) {
        println(num);
    }
    println(1.rangeTo(6).contains(3));
    
    //Containers
    const choices = listOf<Int>(1, 2, 3, 4);
    
    println(choices.contains(5));
    println(!(choices.contains(5)));
}
