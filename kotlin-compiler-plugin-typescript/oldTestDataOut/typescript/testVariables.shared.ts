// Generated by Khrysalis TypeScript converter - this file will be overwritten.
// File: testVariables.shared.kt
// Package: com.test.variables
import { Box } from './testCodable.shared'

let fileReal: Int = 0;

//! Declares com.test.variables.topLevelReal
export let _topLevelReal: Int = 0;
export function getTopLevelReal(): Int { return _topLevelReal; }
export function setTopLevelReal(value: Int) { _topLevelReal = value; }

//! Declares com.test.variables.topLevelVirtual
export function getTopLevelVirtual(): Int { return 1; }
export function setTopLevelVirtual(value: Int) {
    println(`Attempted to set ${value}`);
}

//! Declares com.test.variables.topLevelHybrid
export let _topLevelHybrid: Int = 2;
export function getTopLevelHybrid(): Int { return _topLevelHybrid; }
export function setTopLevelHybrid(value: Int) {
    _topLevelHybrid = value.plus(1);
}


//! Declares com.test.variables.topLevelUsage
export function topLevelUsage(): void {
    setTopLevelReal(1.unaryMinus());
    println(getTopLevelReal());
    setTopLevelVirtual(2.unaryMinus());
    setTopLevelVirtual(getTopLevelVirtual().plus(3));
    println(getTopLevelVirtual());
    setTopLevelHybrid(3.unaryMinus());
    println(getTopLevelHybrid());
}

//! Declares com.test.variables.TestClass
export class TestClass {
    public constructor() {
        this.memberReal = 0;
        this.memberHybrid = 2;
        this.memberLambda = (it: Int): Unit => {
            println(it);
        };
        this.box = new Box<Int>("HI", 0);
        this.box.item = 3;
        this.box.item = 3;
    }
    
    public memberReal: Int;
    
    //! Declares com.test.variables.TestClass.memberVirtual
    public get memberVirtual(): Int { return 1; }
    public set memberVirtual(value: Int) {
        println(`Attempted to set ${value}`);
    }
    
    public _memberHybrid: Int;
    public get memberHybrid(): Int { return this._memberHybrid; }
    public set memberHybrid(value: Int) {
        this._memberHybrid = value.plus(1);
    }
    
    public readonly memberLambda: ((a: Int) => Unit);
    
    public readonly box: Box<Int>;
    
    
    public memberUsage(): void {
        
        this.memberLambda(1);
        this.memberLambda(1);
        
        this.memberReal = 1.unaryMinus();
        this.memberReal = this.memberReal.plus(1.unaryMinus());
        println(this.memberReal);
        
        this.memberReal = 1.unaryMinus();
        this.memberReal = this.memberReal.plus(1.unaryMinus());
        println(this.memberReal);
        
        this.memberVirtual = 2.unaryMinus();
        this.memberVirtual = this.memberVirtual.plus(2.unaryMinus());
        println(this.memberVirtual);
        
        this.memberVirtual = 2.unaryMinus();
        this.memberVirtual = this.memberVirtual.plus(2.unaryMinus());
        println(this.memberVirtual);
        
        this.memberHybrid = 3.unaryMinus();
        this.memberHybrid = this.memberHybrid.plus(3.unaryMinus());
        println(this.memberHybrid);
        
        this.memberHybrid = 3.unaryMinus();
        this.memberHybrid = this.memberHybrid.plus(3.unaryMinus());
        println(this.memberHybrid);
        
        xTestClassExtensionPropertySet(this, 4.unaryMinus());
        xTestClassExtensionPropertySet(this, xTestClassExtensionPropertyGet(this).plus(4.unaryMinus()));
        println(xTestClassExtensionPropertyGet(this));
        
        xTestClassExtensionPropertySet(this, 4.unaryMinus());
        xTestClassExtensionPropertySet(this, xTestClassExtensionPropertyGet(this).plus(4.unaryMinus()));
        println(xTestClassExtensionPropertyGet(this));
        
        setTopLevelReal(1.unaryMinus());
        println(getTopLevelReal());
        setTopLevelVirtual(2.unaryMinus());
        println(getTopLevelVirtual());
        setTopLevelHybrid(3.unaryMinus());
        println(getTopLevelHybrid());
        
        TestClass.Companion.INSTANCE.companionReal = 1.unaryMinus();
        println(TestClass.Companion.INSTANCE.companionReal);
        TestClass.Companion.INSTANCE.companionVirtual = 2.unaryMinus();
        println(TestClass.Companion.INSTANCE.companionVirtual);
        TestClass.Companion.INSTANCE.companionHybrid = 3.unaryMinus();
        println(TestClass.Companion.INSTANCE.companionHybrid);
        
        TestClass.Companion.INSTANCE.companionReal = 1.unaryMinus();
        println(TestClass.Companion.INSTANCE.companionReal);
        TestClass.Companion.INSTANCE.companionVirtual = 2.unaryMinus();
        println(TestClass.Companion.INSTANCE.companionVirtual);
        TestClass.Companion.INSTANCE.companionHybrid = 3.unaryMinus();
        println(TestClass.Companion.INSTANCE.companionHybrid);
        
        TestClass.Companion.INSTANCE.companionReal = 1.unaryMinus();
        println(TestClass.Companion.INSTANCE.companionReal);
        TestClass.Companion.INSTANCE.companionVirtual = 2.unaryMinus();
        println(TestClass.Companion.INSTANCE.companionVirtual);
        TestClass.Companion.INSTANCE.companionHybrid = 3.unaryMinus();
        println(TestClass.Companion.INSTANCE.companionHybrid);
    }
    
    
}
export namespace TestClass {
    //! Declares com.test.variables.TestClass.Companion
    export class Companion {
        private constructor() {
            this.companionReal = 0;
            this.companionHybrid = 2;
        }
        public static INSTANCE = new Companion();
        
        public companionReal: Int;
        
        //! Declares com.test.variables.TestClass.Companion.companionVirtual
        public get companionVirtual(): Int { return 1; }
        public set companionVirtual(value: Int) {
            println(`Attempted to set ${value}`);
        }
        
        public _companionHybrid: Int;
        public get companionHybrid(): Int { return this._companionHybrid; }
        public set companionHybrid(value: Int) {
            this._companionHybrid = value.plus(1);
        }
        
    }
}

//! Declares com.test.variables.extensionProperty>com.test.variables.TestClass
export function xTestClassExtensionPropertyGet(this_: TestClass): Int { return this_.memberReal; }
export function xTestClassExtensionPropertySet(this_: TestClass, value: Int) {
    this_.memberReal = value;
}


//! Declares com.test.variables.TestObject
export class TestObject {
    private constructor() {
        this.objectReal = 0;
        this.objectHybrid = 2;
    }
    public static INSTANCE = new TestObject();
    
    public objectReal: Int;
    
    //! Declares com.test.variables.TestObject.objectVirtual
    public get objectVirtual(): Int { return 1; }
    public set objectVirtual(value: Int) {
        println(`Attempted to set ${value}`);
    }
    
    public _objectHybrid: Int;
    public get objectHybrid(): Int { return this._objectHybrid; }
    public set objectHybrid(value: Int) {
        this._objectHybrid = value.plus(1);
    }
    
    objectUsage(): void {
        this.objectReal = 1.unaryMinus();
        println(this.objectReal);
        this.objectVirtual = 2.unaryMinus();
        println(this.objectVirtual);
        this.objectHybrid = 3.unaryMinus();
        println(this.objectHybrid);
        
        setTopLevelReal(1.unaryMinus());
        println(getTopLevelReal());
        setTopLevelVirtual(2.unaryMinus());
        println(getTopLevelVirtual());
        setTopLevelHybrid(3.unaryMinus());
        println(getTopLevelHybrid());
        
        const testInstance = new TestClass();
        
        this.xTestClassNeedlesslyComplexSet(testInstance, 4.unaryMinus());
        println(this.xTestClassNeedlesslyComplexGet(testInstance));
    }
    //! Declares com.test.variables.TestObject.needlesslyComplex>com.test.variables.TestClass
    xTestClassNeedlesslyComplexGet(this_: TestClass): Int { return this_.memberReal; }
    xTestClassNeedlesslyComplexSet(this_: TestClass, value: Int) {
        this_.memberReal = value;
        this.objectReal = value;
    }
    
}

//! Declares com.test.variables.GenericTest
export class GenericTest<T> {
    public constructor() {
    }
    
}
//! Declares com.test.variables.ext>com.test.variables.GenericTest<kotlin.Any>
export function xGenericTestExtGet<T>(this_: GenericTest<T>): Int { return 1; }


//! Declares com.test.variables.extensionProperty>com.test.variables.TestObject
export function xTestObjectExtensionPropertyGet(this_: TestObject): Int { return this_.objectReal; }
export function xTestObjectExtensionPropertySet(this_: TestObject, value: Int) {
    this_.objectReal = value;
}


//! Declares com.test.variables.maybeInstance
export let _maybeInstance: (TestClass | null) = null;
export function getMaybeInstance(): (TestClass | null) { return _maybeInstance; }
export function setMaybeInstance(value: (TestClass | null)) { _maybeInstance = value; }

//! Declares com.test.variables.test
export function test(): void {
    const instance = new TestClass();
    
    fileReal = fileReal.plus(1);
    println(TestObject.INSTANCE.objectReal);
    println(instance.memberReal);
    println(xTestClassExtensionPropertyGet(instance));
    println(getMagicVariable());
    setMagicVariable(xIntAbsoluteValueGet(9001).plus(4));
    
    let local = 0;
    
    local = 1;
    local = local.plus(1);
    local = local.inc();
    println(local);
    
    setTopLevelReal(1);
    setTopLevelReal(getTopLevelReal().plus(1));
    setTopLevelReal(getTopLevelReal().inc());
    println(getTopLevelReal());
    
    setTopLevelVirtual(1);
    setTopLevelVirtual(getTopLevelVirtual().plus(1));
    setTopLevelVirtual(getTopLevelVirtual().inc());
    println(getTopLevelVirtual());
    
    setTopLevelHybrid(1);
    setTopLevelHybrid(getTopLevelHybrid().plus(1));
    setTopLevelHybrid(getTopLevelHybrid().inc());
    println(getTopLevelHybrid());
    
    setMagicVariable(1);
    setMagicVariable(getMagicVariable().plus(1));
    setMagicVariable(getMagicVariable().inc());
    println(getMagicVariable());
    
    instance.memberLambda(1);
    
    instance.memberReal = 1;
    instance.memberReal = instance.memberReal.plus(1);
    instance.memberReal = instance.memberReal.inc();
    println(instance.memberReal);
    
    instance.memberVirtual = 2.unaryMinus();
    instance.memberVirtual = instance.memberVirtual.plus(2.unaryMinus());
    instance.memberVirtual = instance.memberVirtual.inc();
    println(instance.memberVirtual);
    
    instance.memberHybrid = 3.unaryMinus();
    instance.memberHybrid = instance.memberHybrid.plus(3.unaryMinus());
    instance.memberHybrid = instance.memberHybrid.inc();
    println(instance.memberHybrid);
    
    xTestClassExtensionPropertySet(instance, 4.unaryMinus());
    xTestClassExtensionPropertySet(instance, xTestClassExtensionPropertyGet(instance).plus(4.unaryMinus()));
    xTestClassExtensionPropertySet(instance, xTestClassExtensionPropertyGet(instance).inc());
    println(xTestClassExtensionPropertyGet(instance));
    
    instance.box.item = 4.unaryMinus();
    const temp28 = instance.box;
    temp28.item = temp28.item.plus(4.unaryMinus());
    instance.box.item = instance.box.item.inc();
    println(instance.box.item);
    
    const temp29 = getMaybeInstance();
    if(temp29 !== null) {
        temp29.memberReal = 1
    };
    println((getMaybeInstance()?.memberReal ?? null));
    const temp30 = getMaybeInstance();
    if(temp30 !== null) {
        temp30.memberVirtual = 2.unaryMinus()
    };
    println((getMaybeInstance()?.memberVirtual ?? null));
    const temp31 = getMaybeInstance();
    if(temp31 !== null) {
        temp31.memberHybrid = 3.unaryMinus()
    };
    println((getMaybeInstance()?.memberHybrid ?? null));
    const temp32 = getMaybeInstance();
    if(temp32 !== null) {
        xTestClassExtensionPropertySet(temp32, 4.unaryMinus())
    };
    println(((): (Int | null) => {
                const temp33 = getMaybeInstance();
                if(temp33 !== null) {
                    return xTestClassExtensionPropertyGet(temp33)
                } else { return null }
    })());
    
    const maybeInstance2 = getMaybeInstance();
    
    if(maybeInstance2 !== null) {
        maybeInstance2.memberReal = 1
    };
    println((maybeInstance2?.memberReal ?? null));
    if(maybeInstance2 !== null) {
        maybeInstance2.memberVirtual = 2.unaryMinus()
    };
    println((maybeInstance2?.memberVirtual ?? null));
    if(maybeInstance2 !== null) {
        maybeInstance2.memberHybrid = 3.unaryMinus()
    };
    println((maybeInstance2?.memberHybrid ?? null));
    if(maybeInstance2 !== null) {
        xTestClassExtensionPropertySet(maybeInstance2, 4.unaryMinus())
    };
    println(((): (Int | null) => {
                if(maybeInstance2 !== null) {
                    return xTestClassExtensionPropertyGet(maybeInstance2)
                } else { return null }
    })());
}

