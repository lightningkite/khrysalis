// Generated by Khrysalis TypeScript converter - this file will be overwritten.
// File: testTypes.shared.kt
// Package: com.test.types
import { checkIsInterface, tryCastClass, tryCastInterface, tryCastPrimitive } from 'butterfly-web/dist/Kotlin'
import { TestInterface, Weird } from './testClasses.shared'

//! Declares com.test.types.MyInteger
export type MyInteger = Int;
//! Declares com.test.types.MyInteger
export let MyInteger = Int;


//! Declares com.test.types.Thing
export class Thing {
    public constructor() {
    }
}

//! Declares com.test.types.MyThing
export type MyThing = Thing;
//! Declares com.test.types.MyThing
export let MyThing = Thing;

//! Declares com.test.types.MyList
export type MyList<T> = List<T>;
//! Declares com.test.types.MyList
export let MyList = List;

//! Declares com.test.types.ListOfThings
export type ListOfThings = MyList<MyThing>;
//! Declares com.test.types.ListOfThings
export let ListOfThings = MyList;


//! Declares com.test.types.main
export function main(): void {
    const x: Int = 0;
    
    const y: MyInteger = 0;
    
    const stuff: ListOfThings = listOf<Thing>(new MyThing(), new Thing());
    
    const otherList: List<Int> = listOf<Int>(1, 2, 3);
    
    const nullabilityTest: (Int | null) = null;
    
    const nullabilityTest2: (ListOfThings | null) = null;
    
    println("Success");
    
    const ugh = Weird.constructorInt(2);
    
    const unknownThing: (Any | null) = ugh;
    
    
    if (checkIsInterface<TestInterface>(unknownThing, "ComTestClassesTestInterface")) {
        println("Hello!");
    }
    println(tryCastInterface<TestInterface>(unknownThing, "ComTestClassesTestInterface"));
    
    if (unknownThing instanceof Weird) {
        println("Hello!");
    }
    println(tryCastClass<Weird>(unknownThing, Weird));
    
    if (typeof (unknownThing) == "Int") {
        println("Hello!");
    }
    println(tryCastPrimitive<Int>(unknownThing, "Int"));
    
    const thingA: AnyObject = unknownThing!!;
    
    
    const a = 23;
    
    const b = 23;
    
    const c = 23;
    
    const d = 23.0;
    
    
    const unit: Unit = Unit.INSTANCE;
    
    const returnsUnit: (() => Unit) = (): Unit => {
        return Unit.INSTANCE;
    };
    
}

