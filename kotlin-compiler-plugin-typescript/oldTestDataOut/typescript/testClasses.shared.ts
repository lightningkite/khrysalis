// Generated by Khrysalis TypeScript converter - this file will be overwritten.
// File: testClasses.shared.kt
// Package: com.test.classes
import { hashAnything, safeEq } from 'butterfly-web/dist/Kotlin'

//! Declares com.test.classes.TestInterface
export interface TestInterface {
    
    readonly interfaceValue: String;
    
    interfaceFunction(): String 
}
export namespace TestInterfaceDefaults {
    export function getInterfaceValue(this_: TestInterface): String { return "Default"; }
    export function interfaceFunction(this_: TestInterface): String { 
        return "Default"; 
    }
}

//! Declares com.test.classes.DataClassThing
export class DataClassThing implements TestInterface {
    public static implementsInterfaceComTestClassesTestInterface = true;
    public readonly x: Double;
    public readonly y: String;
    public readonly z: (DataClassThing | null);
    public constructor(x: Double = 0.0, y: String = "Hello!", z: (DataClassThing | null) = null) {
        this.x = x;
        this.y = y;
        this.z = z;
    }
    public hashCode(): number {
        let hash = 17;
        hash = 31 * hash + hashAnything(this.x);
        hash = 31 * hash + hashAnything(this.y);
        hash = 31 * hash + hashAnything(this.z);
        return hash;
    }
    public equals(other: any): boolean { return other instanceof DataClassThing && safeEq(this.x, other.x) && safeEq(this.y, other.y) && safeEq(this.z, other.z) }
    public toString(): string { return `DataClassThing(x = ${this.x}, y = ${this.y}, z = ${this.z})` }
    public copy(x: Double = this.x, y: String = this.y, z: (DataClassThing | null) = this.z): DataClassThing { return new DataClassThing(x, y, z); }
    
    public interfaceFunction(): String { 
        return `${this.x} ${this.y}`; 
    }
    public get interfaceValue(): String { return TestInterfaceDefaults.getInterfaceValue(this); }
}

//! Declares com.test.classes.Weird
export class Weird implements TestInterface {
    public static implementsInterfaceComTestClassesTestInterface = true;
    public readonly c: Double;
    public d: Long;
    public constructor(a: Int = 0, b: String, c: Double, d: Long) {
        this.c = c;
        this.d = d;
        this.e = 0;
        this.f = "asdf";
    }
    
    public readonly e: Int;
    
    public f: String;
    
    
    
    public static constructorInt(both: Int) {
        let result = new Weird(both, both.toString(), both.toDouble(), both.toLong());
        
        result.f = "Something else"
        
        return result;
    }
    
    //! Declares com.test.classes.Weird.interfaceValue
    public get interfaceValue(): String { return this.f; }
    
    
    public test(): void {
        println("Hi!");
    }
    public interfaceFunction(): String { return TestInterfaceDefaults.interfaceFunction(this); }
}

//! Declares com.test.classes.Box
export class Box<T> {
    public readonly value: T;
    public constructor(value: T) {
        this.value = value;
    }
}

//! Declares com.test.classes.SubWeird
export class SubWeird extends Weird {
    public constructor(a: Int, b: String, c: Double, d: Long) {
        super(a, b, c, d);
    }
    
    public test(): void {
        super.test();
    }
}

//! Declares com.test.classes.main
export function main(): void {
    const outsideInfo: String = "Pulled in";
    
    const instance = new class Anon implements TestInterface {
        public static implementsInterfaceComTestClassesTestInterface = true;
        public constructor() {
        }
        
        //! Declares com.test.classes.main
        public get interfaceValue(): String { return outsideInfo; }
        
        public interfaceFunction(): String { return TestInterfaceDefaults.interfaceFunction(this); }
    }();
    
    const ugh = Weird.constructorInt(2);
    
    const box1 = new Box<Int>(88);
    
    const box2 = new Box<Int>(88);
    
    Random.Companion.INSTANCE.nextInt();
}
