// Generated by Khrysalis TypeScript converter - this file will be overwritten.
// File: testCodable.shared.kt
// Package: com.test.codable
import { hashAnything, safeEq } from 'butterfly-web/dist/Kotlin'
import { parse as parseJsonTyped } from 'butterfly-web/dist/net/jsonParsing'

//! Declares com.test.codable.Point
export class Point {
    public readonly x: Double;
    public readonly y: Double;
    public constructor(x: Double, y: Double) {
        this.x = x;
        this.y = y;
    }
    public static fromJson(obj: any): Point { return new Point(
            parseJsonTyped(obj["x_better"], [Double]) as Double, 
            parseJsonTyped(obj["y"], [Double]) as Double
    ) }
    public toJSON(): object { return {
            x_better: this.x, 
            y: this.y
    } }
    public hashCode(): number {
        let hash = 17;
        hash = 31 * hash + hashAnything(this.x);
        hash = 31 * hash + hashAnything(this.y);
        return hash;
    }
    public equals(other: any): boolean { return other instanceof Point && safeEq(this.x, other.x) && safeEq(this.y, other.y) }
    public toString(): string { return `Point(x = ${this.x}, y = ${this.y})` }
    public copy(x: Double = this.x, y: Double = this.y): Point { return new Point(x, y); }
}
//! Declares com.test.codable.Box
export class Box<T> {
    public readonly description: String;
    public item: T;
    public constructor(description: String, item: T) {
        this.description = description;
        this.item = item;
    }
    public static fromJson<T>(obj: any, T: any): Box<T> { return new Box(
            parseJsonTyped(obj["description"], [String]) as String, 
            parseJsonTyped(obj["item"], T) as T
    ) }
    public toJSON(): object { return {
            description: this.description, 
            item: this.item
    } }
    public hashCode(): number {
        let hash = 17;
        hash = 31 * hash + hashAnything(this.description);
        hash = 31 * hash + hashAnything(this.item);
        return hash;
    }
    public equals(other: any): boolean { return other instanceof Box && safeEq(this.description, other.description) && safeEq(this.item, other.item) }
    public toString(): string { return `Box(description = ${this.description}, item = ${this.item})` }
    public copy(description: String = this.description, item: T = this.item): Box<T> { return new Box(description, item); }
}
//! Declares com.test.codable.CodableEnum
export class CodableEnum {
    private constructor(name: string, jsonName: string) {
        this.name = name;
        this.jsonName = jsonName;
    }
    
    public static A = new CodableEnum("A", "VeryA");
    
    private static _values: Array<CodableEnum> = [CodableEnum.A];
    public static values(): Array<CodableEnum> { return CodableEnum._values; }
    public readonly name: string;
    public readonly jsonName: string;
    public static valueOf(name: string): CodableEnum { return (CodableEnum as any)[name]; }
    public toString(): string { return this.name }
    public toJSON(): string { return this.jsonName }
}
