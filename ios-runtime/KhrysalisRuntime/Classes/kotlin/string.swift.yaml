---
- id: kotlin.Char
  type: type
  template: Character

- id: kotlin.String
  type: type
  template: String

- id: kotlin.CharSequence
  type: type
  template: String

# Operators

- id: kotlin.text.filter
  type: call
  template: ~this~.filter(~0~)
- id: kotlin.text.toLowerCase
  type: call
  template: ~this~.lowercased()
- id: kotlin.text.toUpperCase
  type: call
  template: ~this~.uppercased()
- id: kotlin.text.lowercase
  type: call
  template: ~this~.lowercased()
- id: kotlin.text.uppercase
  type: call
  template: ~this~.uppercased()
- id: kotlin.text.trim
  type: call
  arguments: []
  template: "~this~.trimmingCharacters(in: .whitespacesAndNewlines)"
- id: kotlin.text.trim
  type: call
  arguments: [kotlin.CharArray]
  template: "~this~.trimmingCharacters(in: CharacterSet(charactersIn: ~0~))"
- id: kotlin.text.trimIndent
  type: call
  arguments: []
  template: "~this~.trimmingCharacters(in: .whitespacesAndNewlines)" #TODO: This could be more accurate
- id: kotlin.text.padEnd
  type: call
  template: "~this~.padding(toLength: ~0~, withPad: ~1~, startingAtIndex: 0)"
- id: kotlin.text.isEmpty
  type: call
  template: ~this~.isEmpty
- id: kotlin.text.isNullOrEmpty
  type: call
  template: (~this~?.isEmpty ?? true)
- id: kotlin.text.isNotEmpty
  type: call
  template: (!~this~.isEmpty)
- id: kotlin.text.isBlank
  type: call
  template: "~this~.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty"
- id: kotlin.text.isNotBlank
  type: call
  template: "!~this~.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty"
- id: kotlin.text.isNullOrBlank
  type: call
  template: "(~this~?.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty ?? true)"
- id: kotlin.text.orEmpty
  type: call
  template: (~this~ ?? "")
- id: kotlin.text.replace
  type: call
  template: "~this~.replacingOccurrences(of: ~0~, with: ~1~)"
- id: kotlin.text.startsWith
  type: call
  template: "~this~.starts(with: ~0~)"
- id: kotlin.text.endsWith
  type: call
  template: "~this~.ends(with: ~0~)"
- id: kotlin.text.split
  type: call
  template: '~this~.split(separator: ~*~).map { String($0) }'
- id: kotlin.text.split
  type: call
  arguments: [kotlin.text.Regex, kotlin.Int]
  suppliedArguments: [regex]
  template: '~0~.split(input: ~this~)'
- id: kotlin.text.lines
  type: call
  template: '~this~.split(separator: "\n").map { String($0) }'
- id: kotlin.text.contains
  type: call
  template: '(~this~.indexOf(~0~) != -1)'
- id: kotlin.text.contains
  type: call
  suppliedArguments: [string, ignoreCase]
  template: '(~this~.indexOf(~0~, ignoreCase: ~ignoreCase~) != -1)'

# Characters
- id: kotlin.text.isLowerCase
  type: call
  template: ~this~.isLowercase
- id: kotlin.text.isUpperCase
  type: call
  template: ~this~.isUppercase
- id: kotlin.text.isDigit
  type: call
  template: ~this~.isNumber
- id: kotlin.text.isLetter
  type: call
  template: ~this~.isLetter
- id: kotlin.text.isLetterOrDigit
  type: call
  template: (~this~.isNumber || ~this~.isLetter)
- id: kotlin.text.isWhitespace
  type: call
  template: ~this~.isWhitespace

# String
- id: kotlin.String.plus
  type: call
  infix: true
  template: ~this~ + ~0~

- id: kotlin.String.length
  type: get
  template: ~this~.count

- id: kotlin.String.plus
  type: call
  template: (~this~ + ~0~)

- id: kotlin.String.get
  type: call
  template: ~this~[~0~]

- id: kotlin.text.firstOrNull
  type: call
  template: '~this~.getOrNull(index: 0)'

- id: kotlin.text.first
  type: call
  template: ~this~[0]

- id: kotlin.Any.toString
  type: call
  template: 'String(kotlin: ~this~)'

# CharSequence
- id: kotlin.CharSequence.plus
  type: call
  infix: true
  template: ~this~ + ~0~

- id: kotlin.CharSequence.plus
  type: call
  template: (~this~ + ~0~)

- id: kotlin.CharSequence.get
  type: call
  template: ~this~[~0~]


# Regex

- id: kotlin.text.Regex
  type: type
  template: NSRegularExpression
- id: kotlin.text.Regex
  type: call
  template: "(try! NSRegularExpression(pattern: ~0~, options: []))"

# String Builder
- id: kotlin.text.StringBuilder
  type: type
  template: Box<String>
- id: kotlin.text.StringBuilder
  type: call
  arguments: ["*"]
  template: Box(~0~)
- id: kotlin.text.StringBuilder
  type: call
  template: Box("")
- id: kotlin.text.StringBuilder.insert
  type: call
  template: ~this~.value.insert(~1~, ~0~)
- id: kotlin.text.StringBuilder.append
  type: call
  template: ~this~.value.append(~0~)
- id: kotlin.text.StringBuilder.toString
  type: call
  template: ~this~.value
- id: kotlin.Any.toString
  type: call
  actualReceiver: kotlin.text.StringBuilder
  template: ~this~.value
- id: kotlin.text.buildString
  type: call
  template:
    pattern: also(Box(""), ~0~).value
    imports: [ KhrysalisRuntime ]
- id: kotlin.text.appendln
  type: call
  template: ~this~.value.append(~0~ + "\n")
- id: kotlin.text.appendln
  type: call
  arguments: []
  template: ~this~.value.append("\n")
- id: kotlin.text.appendLine
  type: call
  template: ~this~.value.append(~0~ + "\n")
- id: kotlin.text.appendLine
  type: call
  arguments: []
  template: ~this~.value.append("\n")

# String Builder
- id: java.lang.StringBuilder
  type: type
  template: Box<String>
- id: java.lang.StringBuilder
  type: call
  arguments: ["*"]
  template: Box(~0~)
- id: java.lang.StringBuilder
  type: call
  template: Box("")
- id: java.lang.StringBuilder.insert
  type: call
  template: ~this~.value.insert(~1~, ~0~)
- id: java.lang.StringBuilder.append
  type: call
  template: ~this~.value.append(~0~)
- id: java.lang.StringBuilder.toString
  type: call
  template: ~this~.value
- id: kotlin.text.appendln
  type: call
  template: ~this~.value.append(~0~ + "\n")
- id: kotlin.text.appendln
  type: call
  arguments: []
  template: ~this~.value.append("\n")
- id: kotlin.text.appendLine
  type: call
  template: ~this~.value.append(~0~ + "\n")
- id: kotlin.text.appendLine
  type: call
  arguments: []
  template: ~this~.value.append("\n")

# Converting to Numbers

- id: kotlin.text.toByte
  type: call
  template: Int8(~this~)!
- id: kotlin.text.toShort
  type: call
  template: Int16(~this~)!
- id: kotlin.text.toInt
  type: call
  template: Int(~this~)!
- id: kotlin.text.toLong
  type: call
  template: Int(~this~)!
- id: kotlin.text.toFloat
  type: call
  template: Float(~this~)!
- id: kotlin.text.toDouble
  type: call
  template: Double(~this~)!

- id: kotlin.text.toByteOrNull
  type: call
  template: Int8(~this~)
- id: kotlin.text.toShortOrNull
  type: call
  template: Int16(~this~)
- id: kotlin.text.toIntOrNull
  type: call
  template: Int(~this~)
- id: kotlin.text.toLongOrNull
  type: call
  template: Int(~this~)
- id: kotlin.text.toFloatOrNull
  type: call
  template: Float(~this~)
- id: kotlin.text.toDoubleOrNull
  type: call
  template: Double(~this~)

- id: kotlin.collections.toString
  type: call
  receiver: kotlin.ByteArray
  arguments: [ charset ]
  template: 'String(data: ~this~, encoding: ~0~)!'

- id: kotlin.text.toByteArray
  type: call
  receiver: kotlin.String
  template: '~this~.data(using: ~0~)!'

- id: kotlin.text.Charsets.UTF_8
  type: get
  template: 'String.Encoding.utf8'

- id: kotlin.text.Charsets.UTF_16
  type: get
  template: 'String.Encoding.utf16'