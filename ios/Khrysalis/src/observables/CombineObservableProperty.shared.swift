// Generated by Khrysalis Swift converter - this file will be overwritten.
// File: observables/CombineObservableProperty.shared.kt
// Package: com.lightningkite.khrysalis.observables
import RxSwift
import Foundation

public class CombineObservableProperty<T, A, B> : ObservableProperty<T> {
    public var observableA: ObservableProperty<A>
    public var observableB: ObservableProperty<B>
    public var combiner:  (A, B) -> T
    public init(observableA: ObservableProperty<A>, observableB: ObservableProperty<B>, combiner: @escaping  (A, B) -> T) {
        self.observableA = observableA
        self.observableB = observableB
        self.combiner = combiner
        super.init()
    }
    
    override public var value: T {
        get { return self.combiner(self.observableA.value, self.observableB.value) }
    }
    override public var onChange: Observable<T> {
        get { return self.observableA.onChange.startWith(p0: self.observableA.value)
            .combineLatest(observable: self.observableB.onChange.startWith(p0: self.observableB.value), function: { (a: Any, b: Any) -> Any in self.combiner(a, b) })
        .skip(p0: 1) }
    }
}

public extension ObservableProperty {
    func combine<B, C>(other: ObservableProperty<B>, combiner: @escaping  (T, B) -> C) -> ObservableProperty<C> {
        return CombineObservableProperty(observableA: self, observableB: other, combiner: combiner)
    }
}

