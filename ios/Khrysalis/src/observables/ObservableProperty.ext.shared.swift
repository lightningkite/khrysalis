// Generated by Khrysalis Swift converter - this file will be overwritten.
// File: observables/ObservableProperty.ext.shared.kt
// Package: com.lightningkite.khrysalis.observables
import RxSwift
import Foundation

public extension ObservableProperty {
    var observable: Observable<T> {
        get { return Observable.concat(Observable.create({ (it) -> Void in 
                        it.onNext(self.value); it.onComplete()
        }), self.onChange) }
    }
}
public extension ObservableProperty {
    var observableNN: Observable<T> {
        get { return Observable.concat(Observable.create({ (it) -> Void in 
                        it.onNext(self.value); it.onComplete()
        }), self.onChange).map({ (it) -> T in it }) }
    }
}
public extension ObservableProperty {
    var onChangeNN: Observable<T> {
        get { return self.onChange.map({ (it) -> T in it }) }
    }
}

public extension ObservableProperty {
    func subscribeBy(onError: @escaping  (Error) -> Void = { (it) -> Void in it.printStackTrace() }, onComplete: @escaping  () -> Void = { () -> Void in  }, onNext: @escaping  (T) -> Void = { (it) -> Void in  }) -> Disposable { return self.observable.subscribe(onNext: { (boxed) -> Void in onNext(boxed) }, onError: onError, onCompleted: onComplete) }
}

public func includes<E>(collection: MutableObservableProperty<Set<E>>, element: E) -> MutableObservableProperty<Bool> {
    return collection.map(read: { (it) -> Bool in it.contains(element) }).withWrite(onWrite: { (it) -> Void in if it {
                collection.value = collection.value.union([element])
            } else {
                collection.value = collection.value.subtracting([element])
    } })
}

public extension ObservableProperty where T == Bool {
    func whileActive(action: @escaping  () -> Disposable) -> Disposable {
        var current: Disposable? = nil
        return self.subscribeBy(onNext: { (it) -> Void in if it {
                    if current == nil {
                        current = action()
                    }
                } else {
                    current?.dispose()
                    current = nil
        } })
    }
}

