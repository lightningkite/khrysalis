// Generated by Khrysalis Swift converter - this file will be overwritten.
// File: observables/EventToObservableProperty.shared.kt
// Package: com.lightningkite.khrysalis.observables
import Foundation

public class EventToObservableProperty<T> : ObservableProperty<Any> {
    public var value: T
    public var wrapped: Observable<T>
    override public init(value: T, wrapped: Observable<T>) {
        self.value = value
        self.wrapped = wrapped
        super.init()
    }
    
    override public var onChange: Observable<T> {
        get { return self.wrapped.map(p0: { (it: Any) -> Any in 
                    self.value = it
                    return it
        }) }
    }
}
public extension Observable {
    func asObservableProperty(defaultValue: Element) -> ObservableProperty<Element> {
        return EventToObservableProperty(value: defaultValue, wrapped: self.map(p0: { (it: Any) -> Any in it }))
    }
}

public extension Observable {
    func asObservablePropertyDefaultNull() -> ObservableProperty<Element?> {
        return EventToObservableProperty(value: nil, wrapped: self.map(p0: { (it: Any) -> Any in it }))
    }
}


