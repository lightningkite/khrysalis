// Generated by Khrysalis Swift converter - this file will be overwritten.
// File: observables/EventToObservableProperty.shared.kt
// Package: com.lightningkite.khrysalis.observables
import RxSwift
import Foundation

public class EventToObservableProperty<T> : ObservableProperty<T> {
    private var _value: T
    override public var value: T { get { return self.value } set(value) { self.value = value } }
    public var wrapped: Observable<T>
    public init(value: T, wrapped: Observable<T>) {
        self._value = value
        self.wrapped = wrapped
        super.init()
    }
    
    override public var onChange: Observable<T> {
        get { return self.wrapped.map({ (it: T) -> T in 
                    self.value = it
                    return it
        }) }
    }
}
public extension Observable {
    func asObservableProperty(defaultValue: Element) -> ObservableProperty<Element> {
        return (EventToObservableProperty(value: defaultValue as Element, wrapped: self.map({ (it: Element) -> Element in it }) as Observable<Element>) as EventToObservableProperty<Element>)
    }
}

public extension Observable {
    func asObservablePropertyDefaultNull() -> ObservableProperty<Element?> {
        return (EventToObservableProperty(value: nil as Element?, wrapped: self.map({ (it: Element) -> Element in it }) as Observable<Element?>) as EventToObservableProperty<Element?>)
    }
}



