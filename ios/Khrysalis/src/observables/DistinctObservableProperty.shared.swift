// Generated by Khrysalis Swift converter - this file will be overwritten.
// File: observables/DistinctObservableProperty.shared.kt
// Package: com.lightningkite.khrysalis.observables
import RxSwift
import Foundation

public class RxTransformationOnlyObservableProperty<T> : ObservableProperty<T> {
    public var basedOn: ObservableProperty<T>
    public var `operator`:  (Observable<T>) -> Observable<T>
    public init(basedOn: ObservableProperty<T>, `operator`: @escaping  (Observable<T>) -> Observable<T>) {
        self.basedOn = basedOn
        self.`operator` = `operator`
        super.init()
        //Necessary properties should be initialized now
    }
    
    override public var value: T {
        get { return self.basedOn.value }
    }
    
    override public var onChange: Observable<T> {
        get { return self.`operator`(self.basedOn.onChange) }
    }
}

public extension ObservableProperty {
    func distinctUntilChanged() -> ObservableProperty<T> { return self.plusRx(operator: { (it) -> Observable<T> in it.startWith(self.value).distinctUntilChanged().skip(1) }) }
}

public extension ObservableProperty {
    func plusRx(`operator`: @escaping  (Observable<T>) -> Observable<T>) -> ObservableProperty<T> {
        return (RxTransformationOnlyObservableProperty(basedOn: self as ObservableProperty<T>, operator: `operator` as (Observable<T>) -> Observable<T>) as RxTransformationOnlyObservableProperty<T>)
    }
}

