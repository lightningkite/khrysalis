// Generated by Khrysalis Swift converter - this file will be overwritten.
// File: observables/TransformedObservableProperty.shared.kt
// Package: com.lightningkite.khrysalis.observables
import RxSwift
import Foundation

public class TransformedObservableProperty<A, B> : ObservableProperty<B> {
    public var basedOn: ObservableProperty<A>
    public var read:  (A) -> B
    public init(basedOn: ObservableProperty<A>, read: @escaping  (A) -> B) {
        self.basedOn = basedOn
        self.read = read
        self.onChange = self.basedOn.onChange.map(p0: { (it: Any) -> Any in self.read(it) })
        super.init()
    }
    
    override public var value: B {
        get {
            return self.read(self.basedOn.value)
        }
    }
    override public let onChange: Observable<B>
}

public extension ObservableProperty {
    func transformed<B>(read: @escaping  (T) -> B) -> ObservableProperty<B> {
        return TransformedObservableProperty(basedOn: self, read: read)
    }
}

public extension ObservableProperty {
    func map<B>(read: @escaping  (T) -> B) -> ObservableProperty<B> {
        return TransformedObservableProperty(basedOn: self, read: read)
    }
}

