// Generated by Khrysalis Swift converter - this file will be overwritten.
// File: observables/binding/serves.shared.kt
// Package: com.lightningkite.khrysalis.observables.binding
import Foundation

public extension MutableObservableProperty {
    func serves(whilePresent: AnyObject, other: MutableObservableProperty<T>) -> Void {
        
        var suppress = false
        
        other.observable.addWeak(referenceA: whilePresent, listener: { (ignored: Any, value: T) -> Void in if !suppress {
                    suppress = true
                    self.value = value
                    suppress = false
        } })
        
        self.onChange.addWeak(referenceA: whilePresent, listener: { (ignored: Any, value: T) -> Void in if !suppress {
                    suppress = true
                    other.value = value
                    suppress = false
        } })
    }
}

public extension MutableObservableProperty {
    func serves(until: DisposeCondition, other: MutableObservableProperty<T>) -> Void {
        
        var suppress = false
        
        other.observable.subscribeBy(onNext: { (value: T) -> Void in if !suppress {
                    suppress = true
                    self.value = value
                    suppress = false
        } }).until(condition: until)
        
        self.onChange.subscribeBy(onNext: { (value: T) -> Void in if !suppress {
                    suppress = true
                    other.value = value
                    suppress = false
        } }).until(condition: until)
    }
}



