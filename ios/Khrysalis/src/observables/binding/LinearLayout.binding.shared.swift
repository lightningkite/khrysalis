// Generated by Khrysalis Swift converter - this file will be overwritten.
// File: observables/binding/LinearLayout.binding.shared.kt
// Package: com.lightningkite.khrysalis.observables.binding
import Foundation

private class LinearLayoutBoundSubview<T> {
    public var view: View
    public var property: StandardObservableProperty<T>
    public init(view: View, property: StandardObservableProperty<T>) {
        self.view = view
        self.property = property
    }
}

public extension LinearLayout {
    func bind<T>(data: ObservableProperty<Array<T>>, defaultValue: T, makeView: @escaping  (ObservableProperty<T>) -> View) -> Void {
        var existingViews: Array<LinearLayoutBoundSubview<T>> = []
        data.subscribeBy(onNext: { (value: Array<T>) -> Void in 
                //Fix view count
                let excessViews = existingViews.count - value.count
                if excessViews > 0 {
                    //remove views
                    for iter in ((1...excessViews)){
                        let old = existingViews.remove(at: (existingViews.count - 1))
                        self.removeView(old.view)
                    }
                } else { if existingViews.count < value.count {
                        //add views
                        for iter in ((1...(-excessViews))){
                            let prop = StandardObservableProperty(underlyingValue: defaultValue)
                            let view = makeView(prop)
                            self.addView(view, self.params(gravity: AlignPair.Companion.INSTANCE.centerFill))
                            existingViews.append(LinearLayoutBoundSubview(view: view, property: prop))
                        }
                } }
                
                //Update views
                for index in (value.indices){
                    existingViews[index].property.value = value[index]
                }
        }).until(condition: self.removed)
    }
}


public extension LinearLayout {
    func bindHorizontal<T>(data: ObservableProperty<Array<T>>, defaultValue: T, makeView: @escaping  (ObservableProperty<T>) -> View) -> Void {
        var existingViews: Array<LinearLayoutBoundSubview<T>> = []
        data.subscribeBy(onNext: { (value: Array<T>) -> Void in 
                //Fix view count
                let excessViews = existingViews.count - value.count
                if excessViews > 0 {
                    //remove views
                    for iter in ((1...excessViews)){
                        let old = existingViews.remove(at: (existingViews.count - 1))
                        self.removeView(old.view)
                    }
                } else { if existingViews.count < value.count {
                        //add views
                        for iter in ((1...(-excessViews))){
                            let prop = StandardObservableProperty(underlyingValue: defaultValue)
                            let view = makeView(prop)
                            self.addView(view, self.params(gravity: AlignPair.Companion.INSTANCE.center))
                            existingViews.append(LinearLayoutBoundSubview(view: view, property: prop))
                        }
                } }
                
                //Update views
                for index in (value.indices){
                    existingViews[index].property.value = value[index]
                }
        }).until(condition: self.removed)
    }
}



