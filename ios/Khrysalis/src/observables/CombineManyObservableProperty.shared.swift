// Generated by Khrysalis Swift converter - this file will be overwritten.
// File: observables/CombineManyObservableProperty.shared.kt
// Package: com.lightningkite.khrysalis.observables
import RxSwift
import Foundation

public class CombineManyObservableProperty<IN> : ObservableProperty<Array<IN>> {
    public var observables: Array<ObservableProperty<IN>>
    public init(observables: Array<ObservableProperty<IN>>) {
        self.observables = observables
        super.init()
        //Necessary properties should be initialized now
    }
    
    override public var value: Array<IN> {
        get { return self.observables.map({ (it: ObservableProperty<IN>) -> IN in it.value }) }
    }
    override public var onChange: Observable<Array<IN>> {
        get { return kotlinCollectionsListCombineLatest(self.observables.map({ (it: ObservableProperty<IN>) -> Observable<IN> in it.observable }), combine: { (items: Array<IN>) -> Array<IN> in items.map({ (it: IN) -> IN in it }) }).skip(1) }
    }
}

func kotlinCollectionsListCombined<IN, OUT>(_ this: Array<ObservableProperty<IN>>, combiner: @escaping  (Array<IN>) -> OUT) -> ObservableProperty<OUT> {
    return CombineManyObservableProperty(observables: this).map(read: combiner)
}


func kotlinCollectionsListCombined<T>(_ this: Array<ObservableProperty<T>>) -> ObservableProperty<Array<T>> {
    return CombineManyObservableProperty(observables: this)
}


