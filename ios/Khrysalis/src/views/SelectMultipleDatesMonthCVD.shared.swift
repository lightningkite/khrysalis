// Generated by Khrysalis Swift converter - this file will be overwritten.
// File: views/SelectMultipleDatesMonthCVD.shared.kt
// Package: com.lightningkite.khrysalis.views
import Foundation

public class SelectMultipleDatesMonthCVD : MonthCVD {
    override public init() {
        self.dates = StandardObservableProperty(underlyingValue: Set([]))
        self.selectedDayPaint = Paint()
        self.selectedPaint = Paint()
        self.drawDay_dateAlone = DateAlone(year: 0, month: 0, day: 0)
        self.adding = false
        super.init()
        if let it = (self.dates.value.firstOrNull()) { 
            self.currentMonthObs.value = it.dayOfMonth(value: 1)
        }
        self.dates.onChange.subscribeBy(onNext:  { (value: Set<DateAlone>) -> Void in self?.invalidate() }).forever()
    }
    
    override public func generateAccessibilityView() -> View? { return nil }
    
    public let dates: StandardObservableProperty<Set<DateAlone>>
    public let selectedDayPaint: Paint
    public let selectedPaint: Paint
    
    
    
    override public func measure(width: CGFloat, height: CGFloat, displayMetrics: DisplayMetrics) -> Void {
        super.measure(width: width, height: height, displayMetrics: displayMetrics)
        self.selectedDayPaint.textSize = self.dayPaint.textSize
    }
    
    public let drawDay_dateAlone: DateAlone
    override public func drawDay(canvas: Canvas, showingMonth: DateAlone, day: DateAlone, displayMetrics: DisplayMetrics, outer: RectF, inner: RectF) -> Void {
        if self.dates.value.contains(day) {
            let leftDate = self.drawDay_dateAlone.set(other: day).setAddDayOfMonth(value: -1)
            let left = self.dates.value.contains(leftDate)
            let rightDate = self.drawDay_dateAlone.set(other: day).setAddDayOfMonth(value: 1)
            let right = self.dates.value.contains(rightDate)
            
            if !left && !right{
                CalendarDrawing.INSTANCE.dayBackground(canvas: canvas, inner: inner, paint: self.selectedPaint)
            } else if !left && right{
                CalendarDrawing.INSTANCE.dayBackgroundStart(canvas: canvas, inner: inner, outer: outer, paint: self.selectedPaint)
            } else if left && !right{
                CalendarDrawing.INSTANCE.dayBackgroundEnd(canvas: canvas, inner: inner, outer: outer, paint: self.selectedPaint)
            } else if left && right{
                CalendarDrawing.INSTANCE.dayBackgroundMid(canvas: canvas, inner: inner, outer: outer, paint: self.selectedPaint)
            } else {
                CalendarDrawing.INSTANCE.dayBackground(canvas: canvas, inner: inner, paint: self.selectedPaint)
            }
            CalendarDrawing.INSTANCE.day(canvas: canvas, month: showingMonth, date: day, inner: inner, paint: self.selectedDayPaint)
        } else {
            CalendarDrawing.INSTANCE.day(canvas: canvas, month: showingMonth, date: day, inner: inner, paint: self.dayPaint)
        }
    }
    
    override public func onTap(day: DateAlone) -> Void {
        self.adding = self.dates.value.allSatisfy({ !{ (it: DateAlone) -> Bool in day == it }($0) })
        self.onTouchMove(day: day)
    }
    
    public var adding: Bool
    override public func onTouchDown(day: DateAlone) -> Bool {
        self.adding = self.dates.value.allSatisfy({ !{ (it: DateAlone) -> Bool in day == it }($0) })
        self.onTouchMove(day: day)
        return true
    }
    
    override public func onTouchMove(day: DateAlone) -> Bool {
        if self.adding {
            if self.dates.value.allSatisfy({ !{ (it: DateAlone) -> Bool in day == it }($0) }) {
                self.dates.value = self.dates.value.union([day])
            }
        } else {
            self.dates.value = Set(self.dates.value.filter({ (it: DateAlone) -> Bool in it != day }))
        }
        return true
    }
    
    override public func onTouchUp(day: DateAlone) -> Bool {
        return true
    }
}

