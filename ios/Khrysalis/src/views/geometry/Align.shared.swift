// Generated by Khrysalis Swift converter - this file will be overwritten.
// File: views/geometry/Align.shared.kt
// Package: com.lightningkite.khrysalis.views.geometry
import Foundation

public enum Align: CaseIterable {
    case start
    case center
    case end
    case fill
    
    
}

public class AlignPair : KDataClass {
    public var horizontal: Align
    public var vertical: Align
    public init(horizontal: Align, vertical: Align) {
        self.horizontal = horizontal
        self.vertical = vertical
    }
    public func hash(into hasher: inout Hasher) {
        hasher.combine(horizontal)
        hasher.combine(vertical)
    }
    public static func == (lhs: AlignPair, rhs: AlignPair) -> Bool { return lhs.horizontal == rhs.horizontal && lhs.vertical == rhs.vertical }
    public var description: String { return "AlignPair(horizontal = \(self.horizontal), vertical = \(self.vertical))" }
    public func copy(horizontal: Align? = nil, vertical: Align? = nil) -> AlignPair { return AlignPair(horizontal: horizontal ?? self.horizontal, vertical: vertical ?? self.vertical) }
    
    
    public class Companion {
        private init() {
            self.center = AlignPair(horizontal: Align.center, vertical: Align.center)
            self.fill = AlignPair(horizontal: Align.fill, vertical: Align.fill)
            self.topLeft = AlignPair(horizontal: Align.start, vertical: Align.start)
            self.topCenter = AlignPair(horizontal: Align.center, vertical: Align.start)
            self.topFill = AlignPair(horizontal: Align.fill, vertical: Align.start)
            self.topRight = AlignPair(horizontal: Align.end, vertical: Align.start)
            self.centerLeft = AlignPair(horizontal: Align.start, vertical: Align.center)
            self.centerCenter = AlignPair(horizontal: Align.center, vertical: Align.center)
            self.centerFill = AlignPair(horizontal: Align.fill, vertical: Align.center)
            self.centerRight = AlignPair(horizontal: Align.end, vertical: Align.center)
            self.fillLeft = AlignPair(horizontal: Align.start, vertical: Align.fill)
            self.fillCenter = AlignPair(horizontal: Align.center, vertical: Align.fill)
            self.fillFill = AlignPair(horizontal: Align.fill, vertical: Align.fill)
            self.fillRight = AlignPair(horizontal: Align.end, vertical: Align.fill)
            self.bottomLeft = AlignPair(horizontal: Align.start, vertical: Align.end)
            self.bottomCenter = AlignPair(horizontal: Align.center, vertical: Align.end)
            self.bottomFill = AlignPair(horizontal: Align.fill, vertical: Align.end)
            self.bottomRight = AlignPair(horizontal: Align.end, vertical: Align.end)
        }
        public static let INSTANCE = Companion()
        
        public let center: AlignPair
        public let fill: AlignPair
        
        public let topLeft: AlignPair
        public let topCenter: AlignPair
        public let topFill: AlignPair
        public let topRight: AlignPair
        public let centerLeft: AlignPair
        public let centerCenter: AlignPair
        public let centerFill: AlignPair
        public let centerRight: AlignPair
        public let fillLeft: AlignPair
        public let fillCenter: AlignPair
        public let fillFill: AlignPair
        public let fillRight: AlignPair
        public let bottomLeft: AlignPair
        public let bottomCenter: AlignPair
        public let bottomFill: AlignPair
        public let bottomRight: AlignPair
    }
    
}


