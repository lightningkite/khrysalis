// Generated by Khrysalis Swift converter - this file will be overwritten.
// File: Image.shared.kt
// Package: com.lightningkite.khrysalis
import Foundation

public class Image {
    public init() {
        //Necessary properties should be initialized now
    }
}
public class ImageReference : Image, KDataClass {
    public var uri: URL
    public init(uri: URL) {
        self.uri = uri
        super.init()
        //Necessary properties should be initialized now
    }
    public func hash(into hasher: inout Hasher) {
        hasher.combine(uri)
    }
    public static func == (lhs: ImageReference, rhs: ImageReference) -> Bool { return lhs.uri == rhs.uri }
    public var description: String { return "ImageReference(uri = \(self.uri))" }
    public func copy(uri: URL? = nil) -> ImageReference { return ImageReference(uri: uri ?? self.uri) }
}
public class ImageBitmap : Image, KDataClass {
    public var bitmap: Bitmap
    public init(bitmap: Bitmap) {
        self.bitmap = bitmap
        super.init()
        //Necessary properties should be initialized now
    }
    public func hash(into hasher: inout Hasher) {
        hasher.combine(bitmap)
    }
    public static func == (lhs: ImageBitmap, rhs: ImageBitmap) -> Bool { return lhs.bitmap == rhs.bitmap }
    public var description: String { return "ImageBitmap(bitmap = \(self.bitmap))" }
    public func copy(bitmap: Bitmap? = nil) -> ImageBitmap { return ImageBitmap(bitmap: bitmap ?? self.bitmap) }
}
public class ImageRaw : Image, KDataClass {
    public var raw: Data
    public init(raw: Data) {
        self.raw = raw
        super.init()
        //Necessary properties should be initialized now
    }
    public func hash(into hasher: inout Hasher) {
        hasher.combine(raw)
    }
    public static func == (lhs: ImageRaw, rhs: ImageRaw) -> Bool { return lhs.raw == rhs.raw }
    public var description: String { return "ImageRaw(raw = \(self.raw))" }
    public func copy(raw: Data? = nil) -> ImageRaw { return ImageRaw(raw: raw ?? self.raw) }
}
public class ImageRemoteUrl : Image, KDataClass {
    public var url: String
    public init(url: String) {
        self.url = url
        super.init()
        //Necessary properties should be initialized now
    }
    public func hash(into hasher: inout Hasher) {
        hasher.combine(url)
    }
    public static func == (lhs: ImageRemoteUrl, rhs: ImageRemoteUrl) -> Bool { return lhs.url == rhs.url }
    public var description: String { return "ImageRemoteUrl(url = \(self.url))" }
    public func copy(url: String? = nil) -> ImageRemoteUrl { return ImageRemoteUrl(url: url ?? self.url) }
}
public class ImageResource : Image, KDataClass {
    public var resource: DrawableResource
    public init(resource: DrawableResource) {
        self.resource = resource
        super.init()
        //Necessary properties should be initialized now
    }
    public func hash(into hasher: inout Hasher) {
        hasher.combine(resource)
    }
    public static func == (lhs: ImageResource, rhs: ImageResource) -> Bool { return lhs.resource == rhs.resource }
    public var description: String { return "ImageResource(resource = \(self.resource))" }
    public func copy(resource: DrawableResource? = nil) -> ImageResource { return ImageResource(resource: resource ?? self.resource) }
}

public extension String {
    func asImage() -> Image { return ImageRemoteUrl(url: self) }
}
public extension URL {
    func asImage() -> Image { return ImageReference(uri: self) }
}
public extension Bitmap {
    func asImage() -> Image { return ImageBitmap(bitmap: self) }
}
public extension DrawableResource {
    func asImage() -> Image { return ImageResource(resource: self) }
}


