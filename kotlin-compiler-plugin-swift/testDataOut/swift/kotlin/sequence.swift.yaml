---


- id: kotlin.sequences.Sequence
  type: call
  template: LazySequence<~T0~>
- id: kotlin.sequences.sequenceOf
  type: call
  template: "[~*~]"
- id: kotlin.sequences.sequenceOf
  type: call
  hasExplicitTypeArguments: true
  template: "([~*~] as Array<~T0~>)"


# Extensions
- id: kotlin.sequences.asSequence
  type: call
  template: ~this~.lazy

- id: kotlin.sequences.drop
  type: call
  template: ~this~.dropFirst(~0~)
- id: kotlin.sequences.dropLast
  type: call
  template: ~this~.dropLast(~0~)
- id: kotlin.sequences.dropWhile
  type: call
  template: "~this~.drop(while: ~0~)"
#- id: kotlin.sequences.dropLastWhile

- id: kotlin.sequences.take
  type: call
  template: "~this~.prefix(~0~)"
- id: kotlin.sequences.takeLast
  type: call
  template: "~this~.suffix(~0~)"
- id: kotlin.sequences.takeWhile
  type: call
  template: "~this~.prefix(while: ~0~)"
- id: kotlin.sequences.takeLastWhile
  type: call
  template: "~this~.suffix(while: ~0~)"

- id: kotlin.sequences.forEach
  type: call
  template: "~this~.forEach(~0~)"

- id: kotlin.sequences.filter
  type: call
  template: "~this~.filter(~0~)"
- id: kotlin.sequences.map
  type: call
  template: "~this~.map(~0~)"
#- id: kotlin.sequences.mapIndexed
#  type: call
#  template: ~this~ #TODO
- id: kotlin.sequences.flatMap
  type: call
  template: "~this~.flatMap(~0~)"

#- id: kotlin.sequences.filterIndexed
#  type: call
#  template: ~this~ #TODO
- id: kotlin.sequences.filterNot
  type: call
  template: "~this~.filter({ x in !~0~(x) })"
- id: kotlin.sequences.filterNotNull
  type: call
  template: "~this~.compactMap({$0})"
- id: kotlin.sequences.mapNotNull
  type: call
  template: "~this~.compactMap(~0~)"
#- id: kotlin.sequences.mapIndexedNotNull
#  type: call
#  template: ~this~ #TODO
#- id: kotlin.sequences.chunked
#  type: call
#  template: ~this~ #TODO

- id: kotlin.sequences.sorted
  type: call
  template: ~this~.sorted()
#- id: kotlin.sequences.sortedBy
#  type: call
#  template: ~this~ #TODO
#- id: kotlin.sequences.sortedByDescending
#  type: call
#  template: ~this~ #TODO

- id: kotlin.sequences.associate
  type: call
  template: "Dictionary(~this~.map(~0~), uniquingKeysWith: { $0.0 })"
- id: kotlin.sequences.associateBy
  type: call
  template: "Dictionary(~this~.map { it in (~0~(it), it) }, uniquingKeysWith: { $0.0 })"

- id: kotlin.sequences.toList
  type: call
  template: "Array(~this~)"

- id: kotlin.sequences.toMutableList
  type: call
  template: "Array(~this~)"

- id: kotlin.sequences.toSet
  type: call
  template: "Set(~this~)"

- id: kotlin.sequences.toMutableSet
  type: call
  template: "Set(~this~)"

# TODO: groupBy

- id: kotlin.sequences.any
  type: call
  template:
    pattern: iterSome(~this~, ~0~)
    imports:
      iterSome: some from iterable-operator

- id: kotlin.sequences.all
  type: call
  template: ~this~.allSatisfy(~0~)

- id: kotlin.sequences.none
  type: call
  template: ~this~.allSatisfy({ !~0~($0) })

- id: kotlin.sequences.find
  type: call
  template: "~this~.first(where: ~0~)"

# Join

- id: kotlin.sequences.joinToString
  type: call
  suppliedArguments: []
  template: '~this~.map { "\($0)" }.joined(separator: ", ")'

- id: kotlin.sequences.joinToString
  type: call
  suppliedArguments: [separator]
  template: '~this~.map { "\($0)" }.joined(separator: ~0~)'

- id: kotlin.sequences.joinToString
  type: call
  suppliedArguments: [transform]
  template: '~this~.map(~transform~).joined(separator: ", ")'

- id: kotlin.sequences.joinToString
  type: call
  suppliedArguments: [separator, transform]
  template: '~this~.map(~transform~).joined(separator: ~separator~)'

- id: kotlin.sequences.joinToString
  type: call
  suppliedArguments: [separator, transform, prefix]
  template: '(~prefix~ + ~this~.map(~transform~).joined(separator: ~separator~))'

- id: kotlin.sequences.joinToString
  type: call
  suppliedArguments: [separator, transform, prefix, postfix]
  template: '(~prefix~ + ~this~.map(~transform~).joined(separator: ~separator~) + ~postfix~)'

- id: kotlin.sequences.joinToString
  type: call
  suppliedArguments: [separator, transform, postfix]
  template: '(~this~.map(~transform~).joined(separator: ~separator~) + ~postfix~)'