package com.lightningkite.khrysalis.swift

import com.lightningkite.khrysalis.generic.FileEmitter
import com.lightningkite.khrysalis.replacements.Import
import com.lightningkite.khrysalis.swift.replacements.SwiftImport
import org.jetbrains.kotlin.psi.KtFile
import java.io.BufferedWriter
import java.io.File

class SwiftFileEmitter(val translator: SwiftTranslator, file: KtFile) : FileEmitter(file) {
    private val imports = HashSet<SwiftImport>()
    init {
        imports.add(SwiftImport("Foundation"))
        imports.add(SwiftImport("LKButterfly"))
    }
    val importedFqs = HashSet<String>()

    override fun renderImports(to: Appendable) {
        for(imp in imports){
            if(imp.module != translator.projectName) {
                to.appendln("import ${imp.module}")
            }
        }
    }

    override fun sub(): FileEmitter = SwiftFileEmitter(translator, file)

    companion object {
        val overwriteWarning = "// Generated by Khrysalis Swift converter - this file will be overwritten."
        fun canBeOverwritten(file: File): Boolean {
            val firstLine =  file.useLines { it.firstOrNull() }
            return firstLine == overwriteWarning || firstLine == FileEmitter.overwriteWarning
        }
    }

    fun write(writer: BufferedWriter, file: KtFile) {
        render(writer)
    }

    override fun addImport(import: Import) {
        imports.add(import as SwiftImport)
    }

    fun addImports(parts: Iterable<SwiftImport>) {
        for (p in parts) addImport(p)
    }
}